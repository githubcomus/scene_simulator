// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
#include <vector>
#include <map>
#include <string>

namespace xlsdata
{
	
	// Defined in table: Globals
	enum class RangedWeaponBulletType
	{
		
		/// <summary> 
		/// 远程武器子弹类型
		/// </summary>
		Bullet_Arrow = 0, // 箭支
		
		/// <summary> 
		/// 远程武器子弹类型
		/// </summary>
		Bullet_Bullet = 1, // 子弹
	
	};
	
	// Defined in table: Globals
	enum class HitType
	{
		
		
		Hit_Pawn = 0, // 人
		
		
		Hit_Static = 1, // 静态物体
	
	};
	
	// Defined in table: Globals
	enum class BuildInstanceType
	{
		
		/// <summary> 
		/// 建筑材料类型
		/// </summary>
		Build_Qita = 0, // 其他
		
		/// <summary> 
		/// 建筑材料类型
		/// </summary>
		Build_Diji = 1, // 地基
		
		/// <summary> 
		/// 建筑材料类型
		/// </summary>
		Build_Muban = 2, // 地板
	
	};
	
	// Defined in table: Globals
	enum class ItemType
	{
		
		/// <summary> 
		/// 背包物品类型
		/// </summary>
		ItemType_Mesh = 0, // 网格
		
		/// <summary> 
		/// 背包物品类型
		/// </summary>
		ItemType_Material = 1, // 材质
	
	};
	
	// Defined in table: Globals
	enum class WeaponType
	{
		
		/// <summary> 
		/// 武器类型
		/// </summary>
		WeaponType_Bow = 0, // 弓箭
		
		/// <summary> 
		/// 武器类型
		/// </summary>
		WeaponType_Gun = 1, // 枪
	
	};
	
	// Defined in table: Globals
	enum class MenuType
	{
		
		/// <summary> 
		/// 菜单类型
		/// </summary>
		MenuType_Backpack = 0, // 背包
	
	};
	
	// Defined in table: Globals
	enum class FirstMenuType
	{
		
		/// <summary> 
		/// 一级菜单类型
		/// </summary>
		FirstMenuType_BasePlace = 0, // 基础摆放
		
		/// <summary> 
		/// 一级菜单类型
		/// </summary>
		FirstMenuType_Material = 1, // 材质
		
		/// <summary> 
		/// 一级菜单类型
		/// </summary>
		FirstMenuType_Image = 2, // 图片
		
		/// <summary> 
		/// 一级菜单类型
		/// </summary>
		FirstMenuType_Video = 3, // 视频
	
	};
	
	// Defined in table: Globals
	enum class SecondMenuType
	{
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Mesh = 0, // 网格
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_ParticleEffect = 1, // 粒子
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_laser = 2, // 激光
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Smoke = 3, // 烟雾
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Sound = 4, // 声音
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Material = 5, // 材质
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Image = 6, // 图片
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Video = 7, // 视频
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Vegetation = 8, // 植被
		
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		SecondMenuType_Megascans = 9, // 超级扫描
	
	};
	
	// Defined in table: Globals
	enum class PlaceType
	{
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_Mesh = 0, // 网格
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_ParticleEffect = 1, // 粒子
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_laser = 2, // 激光
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_Smoke = 3, // 烟雾
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_Sound = 4, // 声音
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_Material = 5, // 材质
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_Image = 6, // 图片
		
		/// <summary> 
		/// 摆放类型
		/// </summary>
		PlaceType_Video = 7, // 视频
	
	};
	

	

	
	

	

	// Defined in table: Globals
	class Vector
	{
	public:
	
		
		public:
 		float x_ = 0.0f; // x
	
		
		public:
 		float y_ = 0.0f; // y
	
		
		public:
 		float z_ = 0.0f; // z
	

	}; 
	

	

	// Defined in table: Globals
	class Transform
	{
	public:
	
		
		public:
 		float x_ = 0.0f; // x
	
		
		public:
 		float y_ = 0.0f; // y
	
		
		public:
 		float z_ = 0.0f; // z
	
		
		public:
 		float roll_ = 0.0f; // roll
	
		
		public:
 		float pitch_ = 0.0f; // pitch
	
		
		public:
 		float yaw_ = 0.0f; // yaw
	
		
		public:
 		float scale_x_ = 0.0f; // scale_x
	
		
		public:
 		float scale_y_ = 0.0f; // scale_y
	
		
		public:
 		float scale_z_ = 0.0f; // scale_z
	

	}; 
	

	

	// Defined in table: Globals
	class NavigationBox
	{
	public:
	
		
		public:
 		BuildInstanceType type_ = BuildInstanceType::Build_Qita; // type
	
		
		public:
 		int before_ = 0; // before
	
		
		public:
 		int Rear_ = 0; // Rear
	
		
		public:
 		int left_ = 0; // left
	
		
		public:
 		int right_ = 0; // right
	
		
		public:
 		int on_ = 0; // on
	
		
		public:
 		int under_ = 0; // under
	

	}; 
	

	

	// Defined in table: SoundEffectTable
	class SoundEffectTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 音效
		/// </summary>
		public:
 		std::string Path_ = ""; 
	

	}; 
	

	

	// Defined in table: MaterialTable
	class MaterialTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 种类
		/// </summary>
		public:
 		std::string MyType_ = ""; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 材质路径
		/// </summary>
		public:
 		std::string MaterialPath_ = ""; 
	

	}; 
	

	

	// Defined in table: BackpackTable
	class BackpackTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		public:
 		SecondMenuType SecondMenuType_ = SecondMenuType::SecondMenuType_Mesh; 
	
		/// <summary> 
		/// 子ID
		/// </summary>
		public:
 		long long ChildID_ = 0; 
	

	}; 
	

	

	// Defined in table: MenuBarTable
	class MenuBarTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 二级菜单类型
		/// </summary>
		public:
 		SecondMenuType SecondMenuType_ = SecondMenuType::SecondMenuType_Mesh; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 图标路径
		/// </summary>
		public:
 		std::string IconPath_ = ""; 
	

	}; 
	

	

	// Defined in table: PlaceTable
	class PlaceTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 摆放类型
		/// </summary>
		public:
 		PlaceType Type_ = PlaceType::PlaceType_Mesh; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 资源模型
		/// </summary>
		public:
 		std::string MeshPath_ = ""; 
	
		/// <summary> 
		/// 是否使用子当以材质
		/// </summary>
		public:
 		bool UseMaterial_ = false; 
	
		/// <summary> 
		/// 是否使用时间轴
		/// </summary>
		public:
 		bool UseTimeline_ = false; 
	
		/// <summary> 
		/// 选中模型(naniti不支持自定义深度)
		/// </summary>
		public:
 		std::string SelectMeshPath_ = ""; 
	

	}; 
	

	

	// Defined in table: SceneTable
	class SceneTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 关卡名称
		/// </summary>
		public:
 		std::string MapName_ = ""; 
	
		/// <summary> 
		/// 图标路径
		/// </summary>
		public:
 		std::string IconPath_ = ""; 
	

	}; 
	

	

	// Defined in table: CharacterTable
	class CharacterTableDefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		long long ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 描述
		/// </summary>
		public:
 		std::string Description_ = ""; 
	
		/// <summary> 
		/// 蓝图路径
		/// </summary>
		public:
 		std::string BpPath_ = ""; 
	
		/// <summary> 
		/// 图标路径
		/// </summary>
		public:
 		std::string IconPath_ = ""; 
	

	}; 
	

	
	

	// Defined in table: XlsData	
	class XlsData
	{
	
	public:
		tabtoy::Logger TableLogger;
	
		
		/// <summary> 
		/// SoundEffectTable
		/// </summary>
		public:
 		std::vector<SoundEffectTableDefine> SoundEffectTable_; 
		
		/// <summary> 
		/// MaterialTable
		/// </summary>
		public:
 		std::vector<MaterialTableDefine> MaterialTable_; 
		
		/// <summary> 
		/// BackpackTable
		/// </summary>
		public:
 		std::vector<BackpackTableDefine> BackpackTable_; 
		
		/// <summary> 
		/// MenuBarTable
		/// </summary>
		public:
 		std::vector<MenuBarTableDefine> MenuBarTable_; 
		
		/// <summary> 
		/// PlaceTable
		/// </summary>
		public:
 		std::vector<PlaceTableDefine> PlaceTable_; 
		
		/// <summary> 
		/// SceneTable
		/// </summary>
		public:
 		std::vector<SceneTableDefine> SceneTable_; 
		
		/// <summary> 
		/// CharacterTable
		/// </summary>
		public:
 		std::vector<CharacterTableDefine> CharacterTable_; 
	
	
		//#region Index code
	 	std::map<long long, SoundEffectTableDefine> _SoundEffectTableByID;
	public:
		class SoundEffectTableDefine* GetSoundEffectTableByID(long long ID, SoundEffectTableDefine* def = nullptr)
        {
            auto ret = _SoundEffectTableByID.find( ID );
            if ( ret != _SoundEffectTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetSoundEffectTableByID failed, ID: %s", ID);
			}

            return def;
        }
		std::map<long long, MaterialTableDefine> _MaterialTableByID;
	public:
		class MaterialTableDefine* GetMaterialTableByID(long long ID, MaterialTableDefine* def = nullptr)
        {
            auto ret = _MaterialTableByID.find( ID );
            if ( ret != _MaterialTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetMaterialTableByID failed, ID: %s", ID);
			}

            return def;
        }
		std::map<long long, BackpackTableDefine> _BackpackTableByID;
	public:
		class BackpackTableDefine* GetBackpackTableByID(long long ID, BackpackTableDefine* def = nullptr)
        {
            auto ret = _BackpackTableByID.find( ID );
            if ( ret != _BackpackTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetBackpackTableByID failed, ID: %s", ID);
			}

            return def;
        }
		std::map<long long, MenuBarTableDefine> _MenuBarTableByID;
	public:
		class MenuBarTableDefine* GetMenuBarTableByID(long long ID, MenuBarTableDefine* def = nullptr)
        {
            auto ret = _MenuBarTableByID.find( ID );
            if ( ret != _MenuBarTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetMenuBarTableByID failed, ID: %s", ID);
			}

            return def;
        }
		std::map<long long, PlaceTableDefine> _PlaceTableByID;
	public:
		class PlaceTableDefine* GetPlaceTableByID(long long ID, PlaceTableDefine* def = nullptr)
        {
            auto ret = _PlaceTableByID.find( ID );
            if ( ret != _PlaceTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetPlaceTableByID failed, ID: %s", ID);
			}

            return def;
        }
		std::map<long long, SceneTableDefine> _SceneTableByID;
	public:
		class SceneTableDefine* GetSceneTableByID(long long ID, SceneTableDefine* def = nullptr)
        {
            auto ret = _SceneTableByID.find( ID );
            if ( ret != _SceneTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetSceneTableByID failed, ID: %s", ID);
			}

            return def;
        }
		std::map<long long, CharacterTableDefine> _CharacterTableByID;
	public:
		class CharacterTableDefine* GetCharacterTableByID(long long ID, CharacterTableDefine* def = nullptr)
        {
            auto ret = _CharacterTableByID.find( ID );
            if ( ret != _CharacterTableByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetCharacterTableByID failed, ID: %s", ID);
			}

            return def;
        }
		
	
		//#endregion
		//#region Deserialize code
		
	public:
		static void Deserialize( XlsData& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.SoundEffectTable_.emplace_back( reader.ReadStruct<SoundEffectTableDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.MaterialTable_.emplace_back( reader.ReadStruct<MaterialTableDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.BackpackTable_.emplace_back( reader.ReadStruct<BackpackTableDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.MenuBarTable_.emplace_back( reader.ReadStruct<MenuBarTableDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0004:
                	{
						ins.PlaceTable_.emplace_back( reader.ReadStruct<PlaceTableDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0005:
                	{
						ins.SceneTable_.emplace_back( reader.ReadStruct<SceneTableDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0006:
                	{
						ins.CharacterTable_.emplace_back( reader.ReadStruct<CharacterTableDefine>(Deserialize) );
                	}
                	break; 
                }
             }

			
			// Build SoundEffectTable Index
			for( size_t i = 0;i< ins.SoundEffectTable_.size();i++)
			{
				auto element = ins.SoundEffectTable_[i];
				
				ins._SoundEffectTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
			// Build MaterialTable Index
			for( size_t i = 0;i< ins.MaterialTable_.size();i++)
			{
				auto element = ins.MaterialTable_[i];
				
				ins._MaterialTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
			// Build BackpackTable Index
			for( size_t i = 0;i< ins.BackpackTable_.size();i++)
			{
				auto element = ins.BackpackTable_[i];
				
				ins._BackpackTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
			// Build MenuBarTable Index
			for( size_t i = 0;i< ins.MenuBarTable_.size();i++)
			{
				auto element = ins.MenuBarTable_[i];
				
				ins._MenuBarTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
			// Build PlaceTable Index
			for( size_t i = 0;i< ins.PlaceTable_.size();i++)
			{
				auto element = ins.PlaceTable_[i];
				
				ins._PlaceTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
			// Build SceneTable Index
			for( size_t i = 0;i< ins.SceneTable_.size();i++)
			{
				auto element = ins.SceneTable_[i];
				
				ins._SceneTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
			// Build CharacterTable Index
			for( size_t i = 0;i< ins.CharacterTable_.size();i++)
			{
				auto element = ins.CharacterTable_[i];
				
				ins._CharacterTableByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
		}
	public:
		static void Deserialize( Vector& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.z_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( Transform& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.z_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.roll_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.pitch_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.yaw_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.scale_x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50007:
                	{
						ins.scale_y_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.scale_z_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( NavigationBox& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.type_ = reader.ReadEnum<BuildInstanceType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.before_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Rear_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.left_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.right_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.on_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.under_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( SoundEffectTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Path_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( MaterialTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.MyType_ = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.MaterialPath_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( BackpackTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.SecondMenuType_ = reader.ReadEnum<SecondMenuType>();
                	}
                	break; 
                	case 0x20004:
                	{
						ins.ChildID_ = reader.ReadInt64();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( MenuBarTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.SecondMenuType_ = reader.ReadEnum<SecondMenuType>();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.IconPath_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( PlaceTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Type_ = reader.ReadEnum<PlaceType>();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.MeshPath_ = reader.ReadString();
                	}
                	break; 
                	case 0x70005:
                	{
						ins.UseMaterial_ = reader.ReadBool();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.UseTimeline_ = reader.ReadBool();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.SelectMeshPath_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( SceneTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MapName_ = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.IconPath_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( CharacterTableDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID_ = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Description_ = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.BpPath_ = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.IconPath_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		//#endregion
	

	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

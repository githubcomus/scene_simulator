// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: the_public.proto

#include "the_public.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Gamedata {
class FVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FVector>
      _instance;
} _FVector_default_instance_;
class FRotatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FRotator>
      _instance;
} _FRotator_default_instance_;
class FTransform_sDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FTransform_s>
      _instance;
} _FTransform_s_default_instance_;
class FTransformDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FTransform>
      _instance;
} _FTransform_default_instance_;
}  // namespace Gamedata
namespace protobuf_the_5fpublic_2eproto {
void InitDefaultsFVectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_FVector_default_instance_;
    new (ptr) ::Gamedata::FVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::FVector::InitAsDefaultInstance();
}

void InitDefaultsFVector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFVectorImpl);
}

void InitDefaultsFRotatorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_FRotator_default_instance_;
    new (ptr) ::Gamedata::FRotator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::FRotator::InitAsDefaultInstance();
}

void InitDefaultsFRotator() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFRotatorImpl);
}

void InitDefaultsFTransform_sImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  protobuf_the_5fpublic_2eproto::InitDefaultsFRotator();
  {
    void* ptr = &::Gamedata::_FTransform_s_default_instance_;
    new (ptr) ::Gamedata::FTransform_s();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::FTransform_s::InitAsDefaultInstance();
}

void InitDefaultsFTransform_s() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFTransform_sImpl);
}

void InitDefaultsFTransformImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  protobuf_the_5fpublic_2eproto::InitDefaultsFRotator();
  {
    void* ptr = &::Gamedata::_FTransform_default_instance_;
    new (ptr) ::Gamedata::FTransform();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::FTransform::InitAsDefaultInstance();
}

void InitDefaultsFTransform() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFTransformImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FVector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FVector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FVector, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FRotator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FRotator, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FRotator, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FRotator, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform_s, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform_s, rotator_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform, rotator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::FTransform, scale_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Gamedata::FVector)},
  { 8, -1, sizeof(::Gamedata::FRotator)},
  { 16, -1, sizeof(::Gamedata::FTransform_s)},
  { 23, -1, sizeof(::Gamedata::FTransform)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_FVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_FRotator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_FTransform_s_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_FTransform_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "the_public.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020the_public.proto\022\010Gamedata\"*\n\007FVector\022"
      "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"4\n\010FRot"
      "ator\022\r\n\005pitch\030\001 \001(\002\022\013\n\003yaw\030\002 \001(\002\022\014\n\004roll"
      "\030\003 \001(\002\"X\n\014FTransform_s\022#\n\010location\030\001 \001(\013"
      "2\021.Gamedata.FVector\022#\n\007rotator\030\002 \001(\0132\022.G"
      "amedata.FRotator\"x\n\nFTransform\022#\n\010locati"
      "on\030\001 \001(\0132\021.Gamedata.FVector\022#\n\007rotator\030\002"
      " \001(\0132\022.Gamedata.FRotator\022 \n\005scale\030\003 \001(\0132"
      "\021.Gamedata.FVector*\373\004\n\007MsgType\022\013\n\007PB_Non"
      "e\020\000\022\022\n\rPB_Hall_Login\020\350\007\022\022\n\016PB_Hall_Logou"
      "t\020e\022\024\n\020PB_Hall_JoinRoom\020f\022\025\n\021PB_Hall_Lea"
      "veRoom\020g\022\023\n\017PB_Hall_JoinMap\020h\022&\n!BP_Over"
      "allSituationData_EnterView\020\221\003\022#\n\036BP_Over"
      "allSituationData_Change\020\222\003\022\027\n\022PB_PlayerE"
      "nterView\020\313\001\022\030\n\023PB_PlayerUpdateView\020\312\001\022\027\n"
      "\022PB_PlayerLeaveView\020\314\001\022\034\n\027PB_PlayerUpdat"
      "eLocation\020\315\001\022\031\n\024PB_PlayerMoveRequest\020\377\001\022"
      "\036\n\031PB_PlayerJiugonggeRequest\020\200\002\022\033\n\026PB_Pl"
      "ayerUpdateRequest\020\201\002\022\027\n\022PB_EntityEnterVi"
      "ew\020\256\002\022\030\n\023PB_EntityUpdateView\020\257\002\022\027\n\022PB_En"
      "tityLeaveView\020\260\002\022\027\n\022PB_EntityOperation\020\265"
      "\002\022\030\n\023PB_EntityAddRequest\020\261\002\022\033\n\026PB_Entity"
      "RemoveRequest\020\262\002\022\033\n\026PB_EntityUpdateReque"
      "st\020\263\002\022\036\n\031PB_EntityJiugonggeRequest\020\264\002\022\021\n"
      "\014PB_EventInfo\020\365\003B\022\n\020zc.test.Protobufb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1004);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "the_public.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_the_5fpublic_2eproto
namespace Gamedata {
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_the_5fpublic_2eproto::file_level_enum_descriptors[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 103:
    case 104:
    case 202:
    case 203:
    case 204:
    case 205:
    case 255:
    case 256:
    case 257:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 401:
    case 402:
    case 501:
    case 1000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FVector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FVector::kXFieldNumber;
const int FVector::kYFieldNumber;
const int FVector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FVector::FVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.FVector)
}
FVector::FVector(const FVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.FVector)
}

void FVector::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

FVector::~FVector() {
  // @@protoc_insertion_point(destructor:Gamedata.FVector)
  SharedDtor();
}

void FVector::SharedDtor() {
}

void FVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FVector::descriptor() {
  ::protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FVector& FVector::default_instance() {
  ::protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  return *internal_default_instance();
}

FVector* FVector::New(::google::protobuf::Arena* arena) const {
  FVector* n = new FVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FVector::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.FVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool FVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.FVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.FVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.FVector)
  return false;
#undef DO_
}

void FVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.FVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.FVector)
}

::google::protobuf::uint8* FVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.FVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.FVector)
  return target;
}

size_t FVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.FVector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.FVector)
  GOOGLE_DCHECK_NE(&from, this);
  const FVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.FVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.FVector)
    MergeFrom(*source);
  }
}

void FVector::MergeFrom(const FVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.FVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void FVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.FVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FVector::CopyFrom(const FVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.FVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FVector::IsInitialized() const {
  return true;
}

void FVector::Swap(FVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FVector::InternalSwap(FVector* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FVector::GetMetadata() const {
  protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FRotator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FRotator::kPitchFieldNumber;
const int FRotator::kYawFieldNumber;
const int FRotator::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FRotator::FRotator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_the_5fpublic_2eproto::InitDefaultsFRotator();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.FRotator)
}
FRotator::FRotator(const FRotator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.FRotator)
}

void FRotator::SharedCtor() {
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  _cached_size_ = 0;
}

FRotator::~FRotator() {
  // @@protoc_insertion_point(destructor:Gamedata.FRotator)
  SharedDtor();
}

void FRotator::SharedDtor() {
}

void FRotator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FRotator::descriptor() {
  ::protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FRotator& FRotator::default_instance() {
  ::protobuf_the_5fpublic_2eproto::InitDefaultsFRotator();
  return *internal_default_instance();
}

FRotator* FRotator::New(::google::protobuf::Arena* arena) const {
  FRotator* n = new FRotator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FRotator::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.FRotator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  _internal_metadata_.Clear();
}

bool FRotator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.FRotator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.FRotator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.FRotator)
  return false;
#undef DO_
}

void FRotator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.FRotator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.FRotator)
}

::google::protobuf::uint8* FRotator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.FRotator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.FRotator)
  return target;
}

size_t FRotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.FRotator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FRotator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.FRotator)
  GOOGLE_DCHECK_NE(&from, this);
  const FRotator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FRotator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.FRotator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.FRotator)
    MergeFrom(*source);
  }
}

void FRotator::MergeFrom(const FRotator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.FRotator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void FRotator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.FRotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FRotator::CopyFrom(const FRotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.FRotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRotator::IsInitialized() const {
  return true;
}

void FRotator::Swap(FRotator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FRotator::InternalSwap(FRotator* other) {
  using std::swap;
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FRotator::GetMetadata() const {
  protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FTransform_s::InitAsDefaultInstance() {
  ::Gamedata::_FTransform_s_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
  ::Gamedata::_FTransform_s_default_instance_._instance.get_mutable()->rotator_ = const_cast< ::Gamedata::FRotator*>(
      ::Gamedata::FRotator::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTransform_s::kLocationFieldNumber;
const int FTransform_s::kRotatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTransform_s::FTransform_s()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_the_5fpublic_2eproto::InitDefaultsFTransform_s();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.FTransform_s)
}
FTransform_s::FTransform_s(const FTransform_s& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gamedata::FVector(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_rotator()) {
    rotator_ = new ::Gamedata::FRotator(*from.rotator_);
  } else {
    rotator_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.FTransform_s)
}

void FTransform_s::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotator_) -
      reinterpret_cast<char*>(&location_)) + sizeof(rotator_));
  _cached_size_ = 0;
}

FTransform_s::~FTransform_s() {
  // @@protoc_insertion_point(destructor:Gamedata.FTransform_s)
  SharedDtor();
}

void FTransform_s::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotator_;
}

void FTransform_s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FTransform_s::descriptor() {
  ::protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FTransform_s& FTransform_s::default_instance() {
  ::protobuf_the_5fpublic_2eproto::InitDefaultsFTransform_s();
  return *internal_default_instance();
}

FTransform_s* FTransform_s::New(::google::protobuf::Arena* arena) const {
  FTransform_s* n = new FTransform_s;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FTransform_s::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.FTransform_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotator_ != NULL) {
    delete rotator_;
  }
  rotator_ = NULL;
  _internal_metadata_.Clear();
}

bool FTransform_s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.FTransform_s)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.FVector location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FRotator rotator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.FTransform_s)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.FTransform_s)
  return false;
#undef DO_
}

void FTransform_s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.FTransform_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FVector location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // .Gamedata.FRotator rotator = 2;
  if (this->has_rotator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotator_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.FTransform_s)
}

::google::protobuf::uint8* FTransform_s::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.FTransform_s)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FVector location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // .Gamedata.FRotator rotator = 2;
  if (this->has_rotator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotator_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.FTransform_s)
  return target;
}

size_t FTransform_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.FTransform_s)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FVector location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .Gamedata.FRotator rotator = 2;
  if (this->has_rotator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotator_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FTransform_s::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.FTransform_s)
  GOOGLE_DCHECK_NE(&from, this);
  const FTransform_s* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FTransform_s>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.FTransform_s)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.FTransform_s)
    MergeFrom(*source);
  }
}

void FTransform_s::MergeFrom(const FTransform_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.FTransform_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gamedata::FVector::MergeFrom(from.location());
  }
  if (from.has_rotator()) {
    mutable_rotator()->::Gamedata::FRotator::MergeFrom(from.rotator());
  }
}

void FTransform_s::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.FTransform_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTransform_s::CopyFrom(const FTransform_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.FTransform_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTransform_s::IsInitialized() const {
  return true;
}

void FTransform_s::Swap(FTransform_s* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTransform_s::InternalSwap(FTransform_s* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(rotator_, other->rotator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FTransform_s::GetMetadata() const {
  protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FTransform::InitAsDefaultInstance() {
  ::Gamedata::_FTransform_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
  ::Gamedata::_FTransform_default_instance_._instance.get_mutable()->rotator_ = const_cast< ::Gamedata::FRotator*>(
      ::Gamedata::FRotator::internal_default_instance());
  ::Gamedata::_FTransform_default_instance_._instance.get_mutable()->scale_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTransform::kLocationFieldNumber;
const int FTransform::kRotatorFieldNumber;
const int FTransform::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTransform::FTransform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.FTransform)
}
FTransform::FTransform(const FTransform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gamedata::FVector(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_rotator()) {
    rotator_ = new ::Gamedata::FRotator(*from.rotator_);
  } else {
    rotator_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::Gamedata::FVector(*from.scale_);
  } else {
    scale_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.FTransform)
}

void FTransform::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&location_)) + sizeof(scale_));
  _cached_size_ = 0;
}

FTransform::~FTransform() {
  // @@protoc_insertion_point(destructor:Gamedata.FTransform)
  SharedDtor();
}

void FTransform::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotator_;
  if (this != internal_default_instance()) delete scale_;
}

void FTransform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FTransform::descriptor() {
  ::protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FTransform& FTransform::default_instance() {
  ::protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  return *internal_default_instance();
}

FTransform* FTransform::New(::google::protobuf::Arena* arena) const {
  FTransform* n = new FTransform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.FTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotator_ != NULL) {
    delete rotator_;
  }
  rotator_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  _internal_metadata_.Clear();
}

bool FTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.FTransform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.FVector location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FRotator rotator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.FTransform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.FTransform)
  return false;
#undef DO_
}

void FTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.FTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FVector location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // .Gamedata.FRotator rotator = 2;
  if (this->has_rotator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotator_, output);
  }

  // .Gamedata.FVector scale = 3;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->scale_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.FTransform)
}

::google::protobuf::uint8* FTransform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.FTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FVector location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // .Gamedata.FRotator rotator = 2;
  if (this->has_rotator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotator_, deterministic, target);
  }

  // .Gamedata.FVector scale = 3;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->scale_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.FTransform)
  return target;
}

size_t FTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.FTransform)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FVector location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .Gamedata.FRotator rotator = 2;
  if (this->has_rotator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotator_);
  }

  // .Gamedata.FVector scale = 3;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scale_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FTransform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.FTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const FTransform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FTransform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.FTransform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.FTransform)
    MergeFrom(*source);
  }
}

void FTransform::MergeFrom(const FTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.FTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gamedata::FVector::MergeFrom(from.location());
  }
  if (from.has_rotator()) {
    mutable_rotator()->::Gamedata::FRotator::MergeFrom(from.rotator());
  }
  if (from.has_scale()) {
    mutable_scale()->::Gamedata::FVector::MergeFrom(from.scale());
  }
}

void FTransform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.FTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTransform::CopyFrom(const FTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.FTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTransform::IsInitialized() const {
  return true;
}

void FTransform::Swap(FTransform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTransform::InternalSwap(FTransform* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(rotator_, other->rotator_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FTransform::GetMetadata() const {
  protobuf_the_5fpublic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_the_5fpublic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Gamedata

// @@protoc_insertion_point(global_scope)

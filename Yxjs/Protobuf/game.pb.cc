// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Gamedata {
class PlayerRacingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRacingInfo>
      _instance;
} _PlayerRacingInfo_default_instance_;
class PlayerButtonKeyInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerButtonKeyInfo>
      _instance;
} _PlayerButtonKeyInfo_default_instance_;
class PlayerEntityButtonInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEntityButtonInfo>
      _instance;
} _PlayerEntityButtonInfo_default_instance_;
class PlayerLocaionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLocaionInfo>
      _instance;
} _PlayerLocaionInfo_default_instance_;
class PlayerStorageEntityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStorageEntity>
      _instance;
} _PlayerStorageEntity_default_instance_;
class PlayerEntityStorageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEntityStorageInfo>
      _instance;
} _PlayerEntityStorageInfo_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo>
      _instance;
} _PlayerInfo_default_instance_;
class PlayerEnterViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterView>
      _instance;
} _PlayerEnterView_default_instance_;
class PlayerLeaveViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLeaveView>
      _instance;
} _PlayerLeaveView_default_instance_;
class PlayerUpdateViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerUpdateView>
      _instance;
} _PlayerUpdateView_default_instance_;
class PlayerUpdateLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerUpdateLocation>
      _instance;
} _PlayerUpdateLocation_default_instance_;
class UpdatePlayerDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdatePlayerDataRequest>
      _instance;
} _UpdatePlayerDataRequest_default_instance_;
class UpdateLocationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateLocationRequest>
      _instance;
} _UpdateLocationRequest_default_instance_;
class ChangeJiugonggeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeJiugonggeRequest>
      _instance;
} _ChangeJiugonggeRequest_default_instance_;
class EntitySplineAloneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntitySplineAlone>
      _instance;
} _EntitySplineAlone_default_instance_;
class EntityLaserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityLaser>
      _instance;
} _EntityLaser_default_instance_;
class EntityMusicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMusic>
      _instance;
} _EntityMusic_default_instance_;
class EntityScenesTimelineGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityScenesTimelineGroup>
      _instance;
} _EntityScenesTimelineGroup_default_instance_;
class EntityScenesTimelineNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityScenesTimelineNode>
      _instance;
} _EntityScenesTimelineNode_default_instance_;
class EntityScenesTimelineAlone_EntityMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityScenesTimelineAlone_EntityMapEntry_DoNotUse>
      _instance;
} _EntityScenesTimelineAlone_EntityMapEntry_DoNotUse_default_instance_;
class EntityScenesTimelineAloneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityScenesTimelineAlone>
      _instance;
} _EntityScenesTimelineAlone_default_instance_;
class EntityScenesTimelineTotal_GroupMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityScenesTimelineTotal_GroupMapEntry_DoNotUse>
      _instance;
} _EntityScenesTimelineTotal_GroupMapEntry_DoNotUse_default_instance_;
class EntityScenesTimelineTotalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityScenesTimelineTotal>
      _instance;
} _EntityScenesTimelineTotal_default_instance_;
class EntityMoveTimelinePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMoveTimelinePoint>
      _instance;
} _EntityMoveTimelinePoint_default_instance_;
class EntityMoveTimeline_PointMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMoveTimeline_PointMapEntry_DoNotUse>
      _instance;
} _EntityMoveTimeline_PointMapEntry_DoNotUse_default_instance_;
class EntityMoveTimelineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMoveTimeline>
      _instance;
} _EntityMoveTimeline_default_instance_;
class EntityPythonInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityPythonInfo>
      _instance;
} _EntityPythonInfo_default_instance_;
class EntityCommandAutoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityCommandAuto>
      _instance;
} _EntityCommandAuto_default_instance_;
class EntityCommandCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityCommandCommand>
      _instance;
} _EntityCommandCommand_default_instance_;
class EntityCommandInteractiveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityCommandInteractive>
      _instance;
} _EntityCommandInteractive_default_instance_;
class EntityCommandTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityCommandTrigger>
      _instance;
} _EntityCommandTrigger_default_instance_;
class EntityCommandInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityCommandInfo>
      _instance;
} _EntityCommandInfo_default_instance_;
class EntityTransformTimelinePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityTransformTimelinePoint>
      _instance;
} _EntityTransformTimelinePoint_default_instance_;
class EntityTransformTimeline_PointMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityTransformTimeline_PointMapEntry_DoNotUse>
      _instance;
} _EntityTransformTimeline_PointMapEntry_DoNotUse_default_instance_;
class EntityTransformTimelineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityTransformTimeline>
      _instance;
} _EntityTransformTimeline_default_instance_;
class EntityChildInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityChildInfo>
      _instance;
} _EntityChildInfo_default_instance_;
class EntityMMeshInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMMeshInfo>
      _instance;
} _EntityMMeshInfo_default_instance_;
class EntityImageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityImageInfo>
      _instance;
} _EntityImageInfo_default_instance_;
class EntityInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityInfo>
      _instance;
} _EntityInfo_default_instance_;
class EntityEnterViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityEnterView>
      _instance;
} _EntityEnterView_default_instance_;
class EntityUpdateViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityUpdateView>
      _instance;
} _EntityUpdateView_default_instance_;
class EntityLeaveViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityLeaveView>
      _instance;
} _EntityLeaveView_default_instance_;
class EntityAddRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityAddRequest>
      _instance;
} _EntityAddRequest_default_instance_;
class EntityRemoveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityRemoveRequest>
      _instance;
} _EntityRemoveRequest_default_instance_;
class EntityUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityUpdateRequest>
      _instance;
} _EntityUpdateRequest_default_instance_;
class EntityOperationValue1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityOperationValue1>
      _instance;
} _EntityOperationValue1_default_instance_;
class EntityOperationValue2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityOperationValue2>
      _instance;
} _EntityOperationValue2_default_instance_;
class EntityOperationAloneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityOperationAlone>
      _instance;
} _EntityOperationAlone_default_instance_;
class EntityOperationTotalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityOperationTotal>
      _instance;
} _EntityOperationTotal_default_instance_;
class OverallSituationSkyInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverallSituationSkyInfo>
      _instance;
} _OverallSituationSkyInfo_default_instance_;
class EntityMeshChildInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMeshChildInfo>
      _instance;
} _EntityMeshChildInfo_default_instance_;
class EntityMeshMasterInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMeshMasterInfo>
      _instance;
} _EntityMeshMasterInfo_default_instance_;
class OverallSituationData_ActorListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverallSituationData_ActorListEntry_DoNotUse>
      _instance;
} _OverallSituationData_ActorListEntry_DoNotUse_default_instance_;
class OverallSituationDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverallSituationData>
      _instance;
} _OverallSituationData_default_instance_;
class OverallSituationDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverallSituationDataRequest>
      _instance;
} _OverallSituationDataRequest_default_instance_;
class OverallSituationDataResponse_ActorListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverallSituationDataResponse_ActorListEntry_DoNotUse>
      _instance;
} _OverallSituationDataResponse_ActorListEntry_DoNotUse_default_instance_;
class OverallSituationDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverallSituationDataResponse>
      _instance;
} _OverallSituationDataResponse_default_instance_;
class EventCommandInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventCommandInfo>
      _instance;
} _EventCommandInfo_default_instance_;
class EventInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventInfo>
      _instance;
} _EventInfo_default_instance_;
class TimelineOneFrameOneEntityDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimelineOneFrameOneEntityData>
      _instance;
} _TimelineOneFrameOneEntityData_default_instance_;
class TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse>
      _instance;
} _TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse_default_instance_;
class TimelineOnewFrameAllEntityDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimelineOnewFrameAllEntityData>
      _instance;
} _TimelineOnewFrameAllEntityData_default_instance_;
class TimelineOneSecondAllFrameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimelineOneSecondAllFrameData>
      _instance;
} _TimelineOneSecondAllFrameData_default_instance_;
}  // namespace Gamedata
namespace protobuf_game_2eproto {
void InitDefaultsPlayerRacingInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerRacingInfo_default_instance_;
    new (ptr) ::Gamedata::PlayerRacingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerRacingInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerRacingInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerRacingInfoImpl);
}

void InitDefaultsPlayerButtonKeyInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerButtonKeyInfo_default_instance_;
    new (ptr) ::Gamedata::PlayerButtonKeyInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerButtonKeyInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerButtonKeyInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerButtonKeyInfoImpl);
}

void InitDefaultsPlayerEntityButtonInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerButtonKeyInfo();
  {
    void* ptr = &::Gamedata::_PlayerEntityButtonInfo_default_instance_;
    new (ptr) ::Gamedata::PlayerEntityButtonInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerEntityButtonInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerEntityButtonInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerEntityButtonInfoImpl);
}

void InitDefaultsPlayerLocaionInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform_s();
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  protobuf_game_2eproto::InitDefaultsPlayerRacingInfo();
  {
    void* ptr = &::Gamedata::_PlayerLocaionInfo_default_instance_;
    new (ptr) ::Gamedata::PlayerLocaionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerLocaionInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerLocaionInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerLocaionInfoImpl);
}

void InitDefaultsPlayerStorageEntityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityInfo();
  {
    void* ptr = &::Gamedata::_PlayerStorageEntity_default_instance_;
    new (ptr) ::Gamedata::PlayerStorageEntity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerStorageEntity::InitAsDefaultInstance();
}

void InitDefaultsPlayerStorageEntity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerStorageEntityImpl);
}

void InitDefaultsPlayerEntityStorageInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerStorageEntity();
  {
    void* ptr = &::Gamedata::_PlayerEntityStorageInfo_default_instance_;
    new (ptr) ::Gamedata::PlayerEntityStorageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerEntityStorageInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerEntityStorageInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerEntityStorageInfoImpl);
}

void InitDefaultsPlayerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerLocaionInfo();
  protobuf_game_2eproto::InitDefaultsPlayerEntityButtonInfo();
  protobuf_game_2eproto::InitDefaultsPlayerEntityStorageInfo();
  {
    void* ptr = &::Gamedata::_PlayerInfo_default_instance_;
    new (ptr) ::Gamedata::PlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerInfoImpl);
}

void InitDefaultsPlayerEnterViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerInfo();
  {
    void* ptr = &::Gamedata::_PlayerEnterView_default_instance_;
    new (ptr) ::Gamedata::PlayerEnterView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerEnterView::InitAsDefaultInstance();
}

void InitDefaultsPlayerEnterView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerEnterViewImpl);
}

void InitDefaultsPlayerLeaveViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerLeaveView_default_instance_;
    new (ptr) ::Gamedata::PlayerLeaveView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerLeaveView::InitAsDefaultInstance();
}

void InitDefaultsPlayerLeaveView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerLeaveViewImpl);
}

void InitDefaultsPlayerUpdateViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerInfo();
  {
    void* ptr = &::Gamedata::_PlayerUpdateView_default_instance_;
    new (ptr) ::Gamedata::PlayerUpdateView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerUpdateView::InitAsDefaultInstance();
}

void InitDefaultsPlayerUpdateView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerUpdateViewImpl);
}

void InitDefaultsPlayerUpdateLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerLocaionInfo();
  {
    void* ptr = &::Gamedata::_PlayerUpdateLocation_default_instance_;
    new (ptr) ::Gamedata::PlayerUpdateLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerUpdateLocation::InitAsDefaultInstance();
}

void InitDefaultsPlayerUpdateLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerUpdateLocationImpl);
}

void InitDefaultsUpdatePlayerDataRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerInfo();
  {
    void* ptr = &::Gamedata::_UpdatePlayerDataRequest_default_instance_;
    new (ptr) ::Gamedata::UpdatePlayerDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::UpdatePlayerDataRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdatePlayerDataRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdatePlayerDataRequestImpl);
}

void InitDefaultsUpdateLocationRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPlayerLocaionInfo();
  {
    void* ptr = &::Gamedata::_UpdateLocationRequest_default_instance_;
    new (ptr) ::Gamedata::UpdateLocationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::UpdateLocationRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateLocationRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateLocationRequestImpl);
}

void InitDefaultsChangeJiugonggeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  {
    void* ptr = &::Gamedata::_ChangeJiugonggeRequest_default_instance_;
    new (ptr) ::Gamedata::ChangeJiugonggeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::ChangeJiugonggeRequest::InitAsDefaultInstance();
}

void InitDefaultsChangeJiugonggeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChangeJiugonggeRequestImpl);
}

void InitDefaultsEntitySplineAloneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform_s();
  {
    void* ptr = &::Gamedata::_EntitySplineAlone_default_instance_;
    new (ptr) ::Gamedata::EntitySplineAlone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntitySplineAlone::InitAsDefaultInstance();
}

void InitDefaultsEntitySplineAlone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntitySplineAloneImpl);
}

void InitDefaultsEntityLaserImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityLaser_default_instance_;
    new (ptr) ::Gamedata::EntityLaser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityLaser::InitAsDefaultInstance();
}

void InitDefaultsEntityLaser() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityLaserImpl);
}

void InitDefaultsEntityMusicImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityMusic_default_instance_;
    new (ptr) ::Gamedata::EntityMusic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityMusic::InitAsDefaultInstance();
}

void InitDefaultsEntityMusic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMusicImpl);
}

void InitDefaultsEntityScenesTimelineGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityScenesTimelineGroup_default_instance_;
    new (ptr) ::Gamedata::EntityScenesTimelineGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityScenesTimelineGroup::InitAsDefaultInstance();
}

void InitDefaultsEntityScenesTimelineGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityScenesTimelineGroupImpl);
}

void InitDefaultsEntityScenesTimelineNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityScenesTimelineNode_default_instance_;
    new (ptr) ::Gamedata::EntityScenesTimelineNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityScenesTimelineNode::InitAsDefaultInstance();
}

void InitDefaultsEntityScenesTimelineNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityScenesTimelineNodeImpl);
}

void InitDefaultsEntityScenesTimelineAlone_EntityMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityScenesTimelineNode();
  {
    void* ptr = &::Gamedata::_EntityScenesTimelineAlone_EntityMapEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse();
  }
  ::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsEntityScenesTimelineAlone_EntityMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityScenesTimelineAlone_EntityMapEntry_DoNotUseImpl);
}

void InitDefaultsEntityScenesTimelineAloneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityScenesTimelineAlone_EntityMapEntry_DoNotUse();
  {
    void* ptr = &::Gamedata::_EntityScenesTimelineAlone_default_instance_;
    new (ptr) ::Gamedata::EntityScenesTimelineAlone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityScenesTimelineAlone::InitAsDefaultInstance();
}

void InitDefaultsEntityScenesTimelineAlone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityScenesTimelineAloneImpl);
}

void InitDefaultsEntityScenesTimelineTotal_GroupMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityScenesTimelineGroup();
  {
    void* ptr = &::Gamedata::_EntityScenesTimelineTotal_GroupMapEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse();
  }
  ::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsEntityScenesTimelineTotal_GroupMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityScenesTimelineTotal_GroupMapEntry_DoNotUseImpl);
}

void InitDefaultsEntityScenesTimelineTotalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityScenesTimelineTotal_GroupMapEntry_DoNotUse();
  protobuf_game_2eproto::InitDefaultsEntityScenesTimelineAlone();
  {
    void* ptr = &::Gamedata::_EntityScenesTimelineTotal_default_instance_;
    new (ptr) ::Gamedata::EntityScenesTimelineTotal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityScenesTimelineTotal::InitAsDefaultInstance();
}

void InitDefaultsEntityScenesTimelineTotal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityScenesTimelineTotalImpl);
}

void InitDefaultsEntityMoveTimelinePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  protobuf_the_5fpublic_2eproto::InitDefaultsFRotator();
  {
    void* ptr = &::Gamedata::_EntityMoveTimelinePoint_default_instance_;
    new (ptr) ::Gamedata::EntityMoveTimelinePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityMoveTimelinePoint::InitAsDefaultInstance();
}

void InitDefaultsEntityMoveTimelinePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMoveTimelinePointImpl);
}

void InitDefaultsEntityMoveTimeline_PointMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityMoveTimelinePoint();
  {
    void* ptr = &::Gamedata::_EntityMoveTimeline_PointMapEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse();
  }
  ::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsEntityMoveTimeline_PointMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMoveTimeline_PointMapEntry_DoNotUseImpl);
}

void InitDefaultsEntityMoveTimelineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityMoveTimeline_PointMapEntry_DoNotUse();
  {
    void* ptr = &::Gamedata::_EntityMoveTimeline_default_instance_;
    new (ptr) ::Gamedata::EntityMoveTimeline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityMoveTimeline::InitAsDefaultInstance();
}

void InitDefaultsEntityMoveTimeline() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMoveTimelineImpl);
}

void InitDefaultsEntityPythonInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityPythonInfo_default_instance_;
    new (ptr) ::Gamedata::EntityPythonInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityPythonInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityPythonInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityPythonInfoImpl);
}

void InitDefaultsEntityCommandAutoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityCommandAuto_default_instance_;
    new (ptr) ::Gamedata::EntityCommandAuto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityCommandAuto::InitAsDefaultInstance();
}

void InitDefaultsEntityCommandAuto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityCommandAutoImpl);
}

void InitDefaultsEntityCommandCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityCommandCommand_default_instance_;
    new (ptr) ::Gamedata::EntityCommandCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityCommandCommand::InitAsDefaultInstance();
}

void InitDefaultsEntityCommandCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityCommandCommandImpl);
}

void InitDefaultsEntityCommandInteractiveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityCommandInteractive_default_instance_;
    new (ptr) ::Gamedata::EntityCommandInteractive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityCommandInteractive::InitAsDefaultInstance();
}

void InitDefaultsEntityCommandInteractive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityCommandInteractiveImpl);
}

void InitDefaultsEntityCommandTriggerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityCommandTrigger_default_instance_;
    new (ptr) ::Gamedata::EntityCommandTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityCommandTrigger::InitAsDefaultInstance();
}

void InitDefaultsEntityCommandTrigger() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityCommandTriggerImpl);
}

void InitDefaultsEntityCommandInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityCommandCommand();
  protobuf_game_2eproto::InitDefaultsEntityCommandInteractive();
  protobuf_game_2eproto::InitDefaultsEntityCommandTrigger();
  {
    void* ptr = &::Gamedata::_EntityCommandInfo_default_instance_;
    new (ptr) ::Gamedata::EntityCommandInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityCommandInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityCommandInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityCommandInfoImpl);
}

void InitDefaultsEntityTransformTimelinePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  protobuf_the_5fpublic_2eproto::InitDefaultsFRotator();
  {
    void* ptr = &::Gamedata::_EntityTransformTimelinePoint_default_instance_;
    new (ptr) ::Gamedata::EntityTransformTimelinePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityTransformTimelinePoint::InitAsDefaultInstance();
}

void InitDefaultsEntityTransformTimelinePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityTransformTimelinePointImpl);
}

void InitDefaultsEntityTransformTimeline_PointMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityTransformTimelinePoint();
  {
    void* ptr = &::Gamedata::_EntityTransformTimeline_PointMapEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse();
  }
  ::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsEntityTransformTimeline_PointMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityTransformTimeline_PointMapEntry_DoNotUseImpl);
}

void InitDefaultsEntityTransformTimelineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityTransformTimeline_PointMapEntry_DoNotUse();
  {
    void* ptr = &::Gamedata::_EntityTransformTimeline_default_instance_;
    new (ptr) ::Gamedata::EntityTransformTimeline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityTransformTimeline::InitAsDefaultInstance();
}

void InitDefaultsEntityTransformTimeline() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityTransformTimelineImpl);
}

void InitDefaultsEntityChildInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  protobuf_game_2eproto::InitDefaultsEntityMMeshInfo();
  protobuf_game_2eproto::InitDefaultsEntityImageInfo();
  {
    void* ptr = &::Gamedata::_EntityChildInfo_default_instance_;
    new (ptr) ::Gamedata::EntityChildInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityChildInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityChildInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityChildInfoImpl);
}

void InitDefaultsEntityMMeshInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFVector();
  {
    void* ptr = &::Gamedata::_EntityMMeshInfo_default_instance_;
    new (ptr) ::Gamedata::EntityMMeshInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityMMeshInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityMMeshInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMMeshInfoImpl);
}

void InitDefaultsEntityImageInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityImageInfo_default_instance_;
    new (ptr) ::Gamedata::EntityImageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityImageInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityImageInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityImageInfoImpl);
}

void InitDefaultsEntityInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  protobuf_game_2eproto::InitDefaultsEntityChildInfo();
  protobuf_game_2eproto::InitDefaultsEntitySplineAlone();
  protobuf_game_2eproto::InitDefaultsEntityPythonInfo();
  protobuf_game_2eproto::InitDefaultsEntityTransformTimeline();
  protobuf_game_2eproto::InitDefaultsEntityCommandInfo();
  {
    void* ptr = &::Gamedata::_EntityInfo_default_instance_;
    new (ptr) ::Gamedata::EntityInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityInfoImpl);
}

void InitDefaultsEntityEnterViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityInfo();
  {
    void* ptr = &::Gamedata::_EntityEnterView_default_instance_;
    new (ptr) ::Gamedata::EntityEnterView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityEnterView::InitAsDefaultInstance();
}

void InitDefaultsEntityEnterView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityEnterViewImpl);
}

void InitDefaultsEntityUpdateViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityInfo();
  {
    void* ptr = &::Gamedata::_EntityUpdateView_default_instance_;
    new (ptr) ::Gamedata::EntityUpdateView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityUpdateView::InitAsDefaultInstance();
}

void InitDefaultsEntityUpdateView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityUpdateViewImpl);
}

void InitDefaultsEntityLeaveViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityLeaveView_default_instance_;
    new (ptr) ::Gamedata::EntityLeaveView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityLeaveView::InitAsDefaultInstance();
}

void InitDefaultsEntityLeaveView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityLeaveViewImpl);
}

void InitDefaultsEntityAddRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityInfo();
  {
    void* ptr = &::Gamedata::_EntityAddRequest_default_instance_;
    new (ptr) ::Gamedata::EntityAddRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityAddRequest::InitAsDefaultInstance();
}

void InitDefaultsEntityAddRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityAddRequestImpl);
}

void InitDefaultsEntityRemoveRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityRemoveRequest_default_instance_;
    new (ptr) ::Gamedata::EntityRemoveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityRemoveRequest::InitAsDefaultInstance();
}

void InitDefaultsEntityRemoveRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityRemoveRequestImpl);
}

void InitDefaultsEntityUpdateRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityInfo();
  {
    void* ptr = &::Gamedata::_EntityUpdateRequest_default_instance_;
    new (ptr) ::Gamedata::EntityUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityUpdateRequest::InitAsDefaultInstance();
}

void InitDefaultsEntityUpdateRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityUpdateRequestImpl);
}

void InitDefaultsEntityOperationValue1Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityOperationValue1_default_instance_;
    new (ptr) ::Gamedata::EntityOperationValue1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityOperationValue1::InitAsDefaultInstance();
}

void InitDefaultsEntityOperationValue1() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityOperationValue1Impl);
}

void InitDefaultsEntityOperationValue2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EntityOperationValue2_default_instance_;
    new (ptr) ::Gamedata::EntityOperationValue2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityOperationValue2::InitAsDefaultInstance();
}

void InitDefaultsEntityOperationValue2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityOperationValue2Impl);
}

void InitDefaultsEntityOperationAloneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityOperationValue1();
  protobuf_game_2eproto::InitDefaultsEntityOperationValue2();
  {
    void* ptr = &::Gamedata::_EntityOperationAlone_default_instance_;
    new (ptr) ::Gamedata::EntityOperationAlone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityOperationAlone::InitAsDefaultInstance();
}

void InitDefaultsEntityOperationAlone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityOperationAloneImpl);
}

void InitDefaultsEntityOperationTotalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityOperationAlone();
  {
    void* ptr = &::Gamedata::_EntityOperationTotal_default_instance_;
    new (ptr) ::Gamedata::EntityOperationTotal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityOperationTotal::InitAsDefaultInstance();
}

void InitDefaultsEntityOperationTotal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityOperationTotalImpl);
}

void InitDefaultsOverallSituationSkyInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_OverallSituationSkyInfo_default_instance_;
    new (ptr) ::Gamedata::OverallSituationSkyInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::OverallSituationSkyInfo::InitAsDefaultInstance();
}

void InitDefaultsOverallSituationSkyInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOverallSituationSkyInfoImpl);
}

void InitDefaultsEntityMeshChildInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  {
    void* ptr = &::Gamedata::_EntityMeshChildInfo_default_instance_;
    new (ptr) ::Gamedata::EntityMeshChildInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityMeshChildInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityMeshChildInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMeshChildInfoImpl);
}

void InitDefaultsEntityMeshMasterInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityMeshChildInfo();
  {
    void* ptr = &::Gamedata::_EntityMeshMasterInfo_default_instance_;
    new (ptr) ::Gamedata::EntityMeshMasterInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EntityMeshMasterInfo::InitAsDefaultInstance();
}

void InitDefaultsEntityMeshMasterInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityMeshMasterInfoImpl);
}

void InitDefaultsOverallSituationData_ActorListEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityMeshMasterInfo();
  {
    void* ptr = &::Gamedata::_OverallSituationData_ActorListEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::OverallSituationData_ActorListEntry_DoNotUse();
  }
  ::Gamedata::OverallSituationData_ActorListEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsOverallSituationData_ActorListEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOverallSituationData_ActorListEntry_DoNotUseImpl);
}

void InitDefaultsOverallSituationDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsOverallSituationData_ActorListEntry_DoNotUse();
  protobuf_game_2eproto::InitDefaultsOverallSituationSkyInfo();
  {
    void* ptr = &::Gamedata::_OverallSituationData_default_instance_;
    new (ptr) ::Gamedata::OverallSituationData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::OverallSituationData::InitAsDefaultInstance();
}

void InitDefaultsOverallSituationData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOverallSituationDataImpl);
}

void InitDefaultsOverallSituationDataRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsOverallSituationSkyInfo();
  protobuf_game_2eproto::InitDefaultsEntityMeshMasterInfo();
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  {
    void* ptr = &::Gamedata::_OverallSituationDataRequest_default_instance_;
    new (ptr) ::Gamedata::OverallSituationDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::OverallSituationDataRequest::InitAsDefaultInstance();
}

void InitDefaultsOverallSituationDataRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOverallSituationDataRequestImpl);
}

void InitDefaultsOverallSituationDataResponse_ActorListEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEntityMeshMasterInfo();
  {
    void* ptr = &::Gamedata::_OverallSituationDataResponse_ActorListEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse();
  }
  ::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsOverallSituationDataResponse_ActorListEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOverallSituationDataResponse_ActorListEntry_DoNotUseImpl);
}

void InitDefaultsOverallSituationDataResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsOverallSituationData();
  protobuf_game_2eproto::InitDefaultsOverallSituationSkyInfo();
  protobuf_game_2eproto::InitDefaultsOverallSituationDataResponse_ActorListEntry_DoNotUse();
  protobuf_game_2eproto::InitDefaultsEntityMeshMasterInfo();
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform();
  {
    void* ptr = &::Gamedata::_OverallSituationDataResponse_default_instance_;
    new (ptr) ::Gamedata::OverallSituationDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::OverallSituationDataResponse::InitAsDefaultInstance();
}

void InitDefaultsOverallSituationDataResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOverallSituationDataResponseImpl);
}

void InitDefaultsEventCommandInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_EventCommandInfo_default_instance_;
    new (ptr) ::Gamedata::EventCommandInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EventCommandInfo::InitAsDefaultInstance();
}

void InitDefaultsEventCommandInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventCommandInfoImpl);
}

void InitDefaultsEventInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsEventCommandInfo();
  {
    void* ptr = &::Gamedata::_EventInfo_default_instance_;
    new (ptr) ::Gamedata::EventInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::EventInfo::InitAsDefaultInstance();
}

void InitDefaultsEventInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventInfoImpl);
}

void InitDefaultsTimelineOneFrameOneEntityDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_the_5fpublic_2eproto::InitDefaultsFTransform_s();
  {
    void* ptr = &::Gamedata::_TimelineOneFrameOneEntityData_default_instance_;
    new (ptr) ::Gamedata::TimelineOneFrameOneEntityData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::TimelineOneFrameOneEntityData::InitAsDefaultInstance();
}

void InitDefaultsTimelineOneFrameOneEntityData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimelineOneFrameOneEntityDataImpl);
}

void InitDefaultsTimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsTimelineOneFrameOneEntityData();
  {
    void* ptr = &::Gamedata::_TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse_default_instance_;
    new (ptr) ::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse();
  }
  ::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUseImpl);
}

void InitDefaultsTimelineOnewFrameAllEntityDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsTimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse();
  {
    void* ptr = &::Gamedata::_TimelineOnewFrameAllEntityData_default_instance_;
    new (ptr) ::Gamedata::TimelineOnewFrameAllEntityData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::TimelineOnewFrameAllEntityData::InitAsDefaultInstance();
}

void InitDefaultsTimelineOnewFrameAllEntityData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimelineOnewFrameAllEntityDataImpl);
}

void InitDefaultsTimelineOneSecondAllFrameDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsTimelineOnewFrameAllEntityData();
  {
    void* ptr = &::Gamedata::_TimelineOneSecondAllFrameData_default_instance_;
    new (ptr) ::Gamedata::TimelineOneSecondAllFrameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::TimelineOneSecondAllFrameData::InitAsDefaultInstance();
}

void InitDefaultsTimelineOneSecondAllFrameData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimelineOneSecondAllFrameDataImpl);
}

::google::protobuf::Metadata file_level_metadata[63];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerRacingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerRacingInfo, steering_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerRacingInfo, throttle_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerRacingInfo, brake_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerRacingInfo, handbrake_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerRacingInfo, current_gear_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerButtonKeyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerButtonKeyInfo, command_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerEntityButtonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerEntityButtonInfo, key_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, transform_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, charactermovementmodetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, characteractiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, isracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLocaionInfo, player_racing_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerStorageEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerStorageEntity, entity_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerStorageEntity, entity_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerStorageEntity, unique_mark_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerEntityStorageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerEntityStorageInfo, storage_entity_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, character_pawn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, playerlocaioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, entity_button_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, entity_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, sky_level_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerInfo, character_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerEnterView, playerinfolist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLeaveView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLeaveView, playeridlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerUpdateView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerUpdateView, playerinfolist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerUpdateLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerUpdateLocation, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerUpdateLocation, playerlocaioninfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::UpdatePlayerDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::UpdatePlayerDataRequest, playerinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::UpdatePlayerDataRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::UpdateLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::UpdateLocationRequest, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::UpdateLocationRequest, playerlocaioninfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::ChangeJiugonggeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::ChangeJiugonggeRequest, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::ChangeJiugonggeRequest, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntitySplineAlone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntitySplineAlone, transform_s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityLaser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineGroup, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineGroup, entityidlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineNode, entityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineNode, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineNode, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone, timelinename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineAlone, entitymap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal, isplay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal, playtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal, groupmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal, alone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityScenesTimelineTotal, totaltime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimelinePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimelinePoint, uniquemark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimelinePoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimelinePoint, rotator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimelinePoint, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, pointmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, entitymovetimelineendofplay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, isreflection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, lenght_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, playlenght_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, ismove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, moveyaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, scenestimelineindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMoveTimeline, entitylistindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityPythonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityPythonInfo, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityPythonInfo, py_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandAuto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandCommand, command_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandCommand, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandCommand, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInteractive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInteractive, is_fixed_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInteractive, is_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInteractive, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInteractive, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandTrigger, is_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandTrigger, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandTrigger, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInfo, command_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInfo, interactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityCommandInfo, trigger_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimelinePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimelinePoint, uniquemark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimelinePoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimelinePoint, rotator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimelinePoint, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, point_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, is_loop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, timeline_highlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, location_teleport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityTransformTimeline, color_teleport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityChildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityChildInfo, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityChildInfo, mesh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityChildInfo, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMMeshInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMMeshInfo, xls_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMMeshInfo, material_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMMeshInfo, highlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMMeshInfo, color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityImageInfo, url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, entityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, collision_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, child_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, spline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, python_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, transform_timeline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, lockplayerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityInfo, entity_sync_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityEnterView, entityinfolist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityUpdateView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityUpdateView, entityinfolist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityLeaveView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityLeaveView, entityidlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityAddRequest, entityinfolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityAddRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityRemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityRemoveRequest, entityidlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityRemoveRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityUpdateRequest, entityinfolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityUpdateRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationValue1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationValue1, isplay_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationValue2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationValue2, isplay_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationAlone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationAlone, thetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationAlone, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationAlone, entityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationAlone, value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationAlone, value2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationTotal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityOperationTotal, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationSkyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationSkyInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationSkyInfo, weather_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationSkyInfo, cloud_coverageoverall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationSkyInfo, cloud_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationSkyInfo, moon_color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshChildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshChildInfo, xlsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshChildInfo, materialid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshChildInfo, transform_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshMasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshMasterInfo, xls_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshMasterInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshMasterInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshMasterInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EntityMeshMasterInfo, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData_ActorListEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData_ActorListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData_ActorListEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData_ActorListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData, actor_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationData, sky_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, set_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, sky_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, actor_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, actor_add_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, actor_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, actor_update_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataRequest, actor_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, set_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, sky_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, actor_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, actor_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, actor_add_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, actor_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, actor_update_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::OverallSituationDataResponse, actor_delete_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventCommandInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventCommandInfo, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventCommandInfo, entity_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventInfo, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventInfo, broadcast_range_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventInfo, broadcast_player_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::EventInfo, command_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOneFrameOneEntityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOneFrameOneEntityData, collision_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOneFrameOneEntityData, child_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOnewFrameAllEntityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOnewFrameAllEntityData, entity_transform_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOneSecondAllFrameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOneSecondAllFrameData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::TimelineOneSecondAllFrameData, frame_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Gamedata::PlayerRacingInfo)},
  { 10, -1, sizeof(::Gamedata::PlayerButtonKeyInfo)},
  { 16, -1, sizeof(::Gamedata::PlayerEntityButtonInfo)},
  { 22, -1, sizeof(::Gamedata::PlayerLocaionInfo)},
  { 33, -1, sizeof(::Gamedata::PlayerStorageEntity)},
  { 41, -1, sizeof(::Gamedata::PlayerEntityStorageInfo)},
  { 47, -1, sizeof(::Gamedata::PlayerInfo)},
  { 59, -1, sizeof(::Gamedata::PlayerEnterView)},
  { 65, -1, sizeof(::Gamedata::PlayerLeaveView)},
  { 71, -1, sizeof(::Gamedata::PlayerUpdateView)},
  { 77, -1, sizeof(::Gamedata::PlayerUpdateLocation)},
  { 84, -1, sizeof(::Gamedata::UpdatePlayerDataRequest)},
  { 91, -1, sizeof(::Gamedata::UpdateLocationRequest)},
  { 98, -1, sizeof(::Gamedata::ChangeJiugonggeRequest)},
  { 105, -1, sizeof(::Gamedata::EntitySplineAlone)},
  { 111, -1, sizeof(::Gamedata::EntityLaser)},
  { 116, -1, sizeof(::Gamedata::EntityMusic)},
  { 121, -1, sizeof(::Gamedata::EntityScenesTimelineGroup)},
  { 129, -1, sizeof(::Gamedata::EntityScenesTimelineNode)},
  { 137, 144, sizeof(::Gamedata::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse)},
  { 146, -1, sizeof(::Gamedata::EntityScenesTimelineAlone)},
  { 153, 160, sizeof(::Gamedata::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse)},
  { 162, -1, sizeof(::Gamedata::EntityScenesTimelineTotal)},
  { 172, -1, sizeof(::Gamedata::EntityMoveTimelinePoint)},
  { 181, 188, sizeof(::Gamedata::EntityMoveTimeline_PointMapEntry_DoNotUse)},
  { 190, -1, sizeof(::Gamedata::EntityMoveTimeline)},
  { 206, -1, sizeof(::Gamedata::EntityPythonInfo)},
  { 213, -1, sizeof(::Gamedata::EntityCommandAuto)},
  { 218, -1, sizeof(::Gamedata::EntityCommandCommand)},
  { 226, -1, sizeof(::Gamedata::EntityCommandInteractive)},
  { 235, -1, sizeof(::Gamedata::EntityCommandTrigger)},
  { 243, -1, sizeof(::Gamedata::EntityCommandInfo)},
  { 252, -1, sizeof(::Gamedata::EntityTransformTimelinePoint)},
  { 261, 268, sizeof(::Gamedata::EntityTransformTimeline_PointMapEntry_DoNotUse)},
  { 270, -1, sizeof(::Gamedata::EntityTransformTimeline)},
  { 281, -1, sizeof(::Gamedata::EntityChildInfo)},
  { 289, -1, sizeof(::Gamedata::EntityMMeshInfo)},
  { 298, -1, sizeof(::Gamedata::EntityImageInfo)},
  { 304, -1, sizeof(::Gamedata::EntityInfo)},
  { 320, -1, sizeof(::Gamedata::EntityEnterView)},
  { 326, -1, sizeof(::Gamedata::EntityUpdateView)},
  { 332, -1, sizeof(::Gamedata::EntityLeaveView)},
  { 338, -1, sizeof(::Gamedata::EntityAddRequest)},
  { 345, -1, sizeof(::Gamedata::EntityRemoveRequest)},
  { 352, -1, sizeof(::Gamedata::EntityUpdateRequest)},
  { 359, -1, sizeof(::Gamedata::EntityOperationValue1)},
  { 365, -1, sizeof(::Gamedata::EntityOperationValue2)},
  { 371, -1, sizeof(::Gamedata::EntityOperationAlone)},
  { 381, -1, sizeof(::Gamedata::EntityOperationTotal)},
  { 387, -1, sizeof(::Gamedata::OverallSituationSkyInfo)},
  { 397, -1, sizeof(::Gamedata::EntityMeshChildInfo)},
  { 405, -1, sizeof(::Gamedata::EntityMeshMasterInfo)},
  { 415, 422, sizeof(::Gamedata::OverallSituationData_ActorListEntry_DoNotUse)},
  { 424, -1, sizeof(::Gamedata::OverallSituationData)},
  { 431, -1, sizeof(::Gamedata::OverallSituationDataRequest)},
  { 444, 451, sizeof(::Gamedata::OverallSituationDataResponse_ActorListEntry_DoNotUse)},
  { 453, -1, sizeof(::Gamedata::OverallSituationDataResponse)},
  { 467, -1, sizeof(::Gamedata::EventCommandInfo)},
  { 474, -1, sizeof(::Gamedata::EventInfo)},
  { 484, -1, sizeof(::Gamedata::TimelineOneFrameOneEntityData)},
  { 491, 498, sizeof(::Gamedata::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse)},
  { 500, -1, sizeof(::Gamedata::TimelineOnewFrameAllEntityData)},
  { 506, -1, sizeof(::Gamedata::TimelineOneSecondAllFrameData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerRacingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerButtonKeyInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerEntityButtonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerLocaionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerStorageEntity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerEntityStorageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerEnterView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerLeaveView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerUpdateView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerUpdateLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_UpdatePlayerDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_UpdateLocationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_ChangeJiugonggeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntitySplineAlone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityLaser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityScenesTimelineGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityScenesTimelineNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityScenesTimelineAlone_EntityMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityScenesTimelineAlone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityScenesTimelineTotal_GroupMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityScenesTimelineTotal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMoveTimelinePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMoveTimeline_PointMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMoveTimeline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityPythonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityCommandAuto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityCommandCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityCommandInteractive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityCommandTrigger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityCommandInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityTransformTimelinePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityTransformTimeline_PointMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityTransformTimeline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityChildInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMMeshInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityEnterView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityUpdateView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityLeaveView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityAddRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityRemoveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityOperationValue1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityOperationValue2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityOperationAlone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityOperationTotal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_OverallSituationSkyInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMeshChildInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EntityMeshMasterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_OverallSituationData_ActorListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_OverallSituationData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_OverallSituationDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_OverallSituationDataResponse_ActorListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_OverallSituationDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EventCommandInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_EventInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_TimelineOneFrameOneEntityData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_TimelineOnewFrameAllEntityData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_TimelineOneSecondAllFrameData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 63);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ngame.proto\022\010Gamedata\032\020the_public.proto"
      "\"\206\001\n\020PlayerRacingInfo\022\026\n\016steering_input\030"
      "\001 \001(\002\022\026\n\016throttle_input\030\002 \001(\002\022\023\n\013brake_i"
      "nput\030\003 \001(\002\022\027\n\017handbrake_input\030\004 \001(\002\022\024\n\014c"
      "urrent_gear\030\005 \001(\005\"+\n\023PlayerButtonKeyInfo"
      "\022\024\n\014command_list\030\001 \003(\t\"I\n\026PlayerEntityBu"
      "ttonInfo\022/\n\010key_list\030\001 \003(\0132\035.Gamedata.Pl"
      "ayerButtonKeyInfo\"\263\002\n\021PlayerLocaionInfo\022"
      "+\n\013transform_s\030\001 \001(\0132\026.Gamedata.FTransfo"
      "rm_s\022#\n\010velocity\030\002 \001(\0132\021.Gamedata.FVecto"
      "r\022F\n\031characterMovementModeType\030\003 \001(\0162#.G"
      "amedata.CharacterMovementModeType\022:\n\023cha"
      "racterActionType\030\004 \001(\0162\035.Gamedata.Charac"
      "terActionType\022\020\n\010isRacing\030\005 \001(\010\0226\n\022playe"
      "r_racing_info\030\006 \001(\0132\032.Gamedata.PlayerRac"
      "ingInfo\"j\n\023PlayerStorageEntity\022)\n\013entity"
      "_info\030\001 \001(\0132\024.Gamedata.EntityInfo\022\023\n\013ent"
      "ity_name\030\002 \001(\t\022\023\n\013unique_mark\030\003 \001(\005\"U\n\027P"
      "layerEntityStorageInfo\022:\n\023storage_entity"
      "_list\030\001 \003(\0132\035.Gamedata.PlayerStorageEnti"
      "ty\"\277\002\n\nPlayerInfo\022\020\n\010playerId\030\001 \001(\005\022<\n\023c"
      "haracter_pawn_type\030\002 \001(\0162\037.Gamedata.Game"
      "MainOperationMode\0226\n\021playerLocaionInfo\030\004"
      " \001(\0132\033.Gamedata.PlayerLocaionInfo\022<\n\022ent"
      "ity_button_info\030\005 \001(\0132 .Gamedata.PlayerE"
      "ntityButtonInfo\0229\n\016entity_storage\030\006 \001(\0132"
      "!.Gamedata.PlayerEntityStorageInfo\022\027\n\017sk"
      "y_level_index\030\007 \001(\005\022\027\n\017character_index\030\010"
      " \001(\005\"\?\n\017PlayerEnterView\022,\n\016playerInfoLis"
      "t\030\001 \003(\0132\024.Gamedata.PlayerInfo\"\'\n\017PlayerL"
      "eaveView\022\024\n\014playerIdList\030\001 \003(\005\"@\n\020Player"
      "UpdateView\022,\n\016playerInfoList\030\001 \003(\0132\024.Gam"
      "edata.PlayerInfo\"`\n\024PlayerUpdateLocation"
      "\022\020\n\010playerId\030\001 \001(\005\0226\n\021playerLocaionInfo\030"
      "\002 \001(\0132\033.Gamedata.PlayerLocaionInfo\"U\n\027Up"
      "datePlayerDataRequest\022(\n\nplayerInfo\030\001 \001("
      "\0132\024.Gamedata.PlayerInfo\022\020\n\010playerId\030\002 \001("
      "\005\"a\n\025UpdateLocationRequest\022\020\n\010playerId\030\001"
      " \001(\005\0226\n\021playerLocaionInfo\030\002 \001(\0132\033.Gameda"
      "ta.PlayerLocaionInfo\"O\n\026ChangeJiugonggeR"
      "equest\022\020\n\010playerId\030\001 \001(\005\022#\n\010location\030\002 \001"
      "(\0132\021.Gamedata.FVector\"@\n\021EntitySplineAlo"
      "ne\022+\n\013transform_s\030\001 \001(\0132\026.Gamedata.FTran"
      "sform_s\"\r\n\013EntityLaser\"\r\n\013EntityMusic\"U\n"
      "\031EntityScenesTimelineGroup\022\017\n\007groupId\030\001 "
      "\001(\005\022\021\n\tgroupName\030\002 \001(\t\022\024\n\014entityIdList\030\003"
      " \003(\005\"K\n\030EntityScenesTimelineNode\022\020\n\010enti"
      "tyId\030\001 \001(\005\022\017\n\007groupId\030\002 \001(\005\022\014\n\004type\030\003 \001("
      "\005\"\316\001\n\031EntityScenesTimelineAlone\022\024\n\014timel"
      "ineName\030\002 \001(\t\022E\n\tentityMap\030\003 \003(\01322.Gamed"
      "ata.EntityScenesTimelineAlone.EntityMapE"
      "ntry\032T\n\016EntityMapEntry\022\013\n\003key\030\001 \001(\005\0221\n\005v"
      "alue\030\002 \001(\0132\".Gamedata.EntityScenesTimeli"
      "neNode:\0028\001\"\237\002\n\031EntityScenesTimelineTotal"
      "\022\016\n\006isPlay\030\001 \001(\010\022\020\n\010playTime\030\002 \001(\002\022C\n\010gr"
      "oupMap\030\003 \003(\01321.Gamedata.EntityScenesTime"
      "lineTotal.GroupMapEntry\0222\n\005alone\030\004 \003(\0132#"
      ".Gamedata.EntityScenesTimelineAlone\022\021\n\tt"
      "otalTime\030\005 \001(\002\032T\n\rGroupMapEntry\022\013\n\003key\030\001"
      " \001(\005\0222\n\005value\030\002 \001(\0132#.Gamedata.EntitySce"
      "nesTimelineGroup:\0028\001\"\231\001\n\027EntityMoveTimel"
      "inePoint\022\022\n\nuniqueMark\030\001 \001(\005\022#\n\010location"
      "\030\002 \001(\0132\021.Gamedata.FVector\022#\n\007rotator\030\003 \001"
      "(\0132\022.Gamedata.FRotator\022 \n\005scale\030\005 \001(\0132\021."
      "Gamedata.FVector\"\237\003\n\022EntityMoveTimeline\022"
      "\014\n\004name\030\001 \001(\t\022<\n\010pointMap\030\002 \003(\0132*.Gameda"
      "ta.EntityMoveTimeline.PointMapEntry\022J\n\033E"
      "ntityMoveTimelineEndOfPlay\030\005 \001(\0162%.Gamed"
      "ata.EntityMoveTimelineEndOfPlay\022\024\n\014isRef"
      "lection\030\006 \001(\010\022\014\n\004size\030\007 \001(\002\022\016\n\006lenght\030\010 "
      "\001(\005\022\022\n\nplayLenght\030\t \001(\002\022\016\n\006isMove\030\n \001(\010\022"
      "\017\n\007moveYaw\030\013 \001(\010\022\033\n\023scenesTimelineIndex\030"
      "\014 \001(\005\022\027\n\017entityListIndex\030\r \001(\005\032R\n\rPointM"
      "apEntry\022\013\n\003key\030\001 \001(\005\0220\n\005value\030\002 \001(\0132!.Ga"
      "medata.EntityMoveTimelinePoint:\0028\001\"L\n\020En"
      "tityPythonInfo\022,\n\003err\030\001 \001(\0162\037.Gamedata.E"
      "ntityPythonErrorType\022\n\n\002py\030\002 \001(\t\"\023\n\021Enti"
      "tyCommandAuto\"R\n\024EntityCommandCommand\022\024\n"
      "\014command_name\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\002\022"
      "\020\n\010end_time\030\004 \001(\002\"l\n\030EntityCommandIntera"
      "ctive\022\031\n\021is_fixed_position\030\001 \001(\010\022\017\n\007is_o"
      "pen\030\002 \001(\010\022\022\n\nstart_time\030\003 \001(\002\022\020\n\010end_tim"
      "e\030\004 \001(\002\"M\n\024EntityCommandTrigger\022\017\n\007is_op"
      "en\030\001 \001(\010\022\022\n\nstart_time\030\002 \001(\002\022\020\n\010end_time"
      "\030\003 \001(\002\"\336\001\n\021EntityCommandInfo\022)\n\004type\030\001 \001"
      "(\0162\033.Gamedata.EntityCommandType\0224\n\014comma"
      "nd_list\030\002 \003(\0132\036.Gamedata.EntityCommandCo"
      "mmand\0227\n\013interactive\030\003 \001(\0132\".Gamedata.En"
      "tityCommandInteractive\022/\n\007trigger\030\004 \001(\0132"
      "\036.Gamedata.EntityCommandTrigger\"\236\001\n\034Enti"
      "tyTransformTimelinePoint\022\022\n\nuniqueMark\030\001"
      " \001(\005\022#\n\010location\030\002 \001(\0132\021.Gamedata.FVecto"
      "r\022#\n\007rotator\030\003 \001(\0132\022.Gamedata.FRotator\022 "
      "\n\005color\030\004 \001(\0132\021.Gamedata.FVector\"\310\002\n\027Ent"
      "ityTransformTimeline\022B\n\tpoint_map\030\001 \003(\0132"
      "/.Gamedata.EntityTransformTimeline.Point"
      "MapEntry\022\017\n\007is_loop\030\002 \001(\010\022\017\n\007version\030\003 \001"
      "(\005\022;\n\022timeline_highlight\030\004 \001(\0162\037.Gamedat"
      "a.TimelineHighlightType\022\031\n\021location_tele"
      "port\030\005 \001(\010\022\026\n\016color_teleport\030\006 \001(\010\032W\n\rPo"
      "intMapEntry\022\013\n\003key\030\001 \001(\005\0225\n\005value\030\002 \001(\0132"
      "&.Gamedata.EntityTransformTimelinePoint:"
      "\0028\001\"\215\001\n\017EntityChildInfo\022\'\n\ttransform\030\002 \001"
      "(\0132\024.Gamedata.FTransform\022\'\n\004mesh\030\003 \001(\0132\031"
      ".Gamedata.EntityMMeshInfo\022(\n\005image\030\004 \001(\013"
      "2\031.Gamedata.EntityImageInfo\"k\n\017EntityMMe"
      "shInfo\022\016\n\006xls_id\030\001 \001(\005\022\023\n\013material_id\030\002 "
      "\001(\005\022\021\n\thighlight\030\003 \001(\010\022 \n\005color\030\004 \001(\0132\021."
      "Gamedata.FVector\"\036\n\017EntityImageInfo\022\013\n\003u"
      "rl\030\010 \001(\t\"\324\003\n\nEntityInfo\022\020\n\010entityId\030\001 \001("
      "\005\022\020\n\010playerId\030\002 \001(\005\022\'\n\ttransform\030\003 \001(\0132\024"
      ".Gamedata.FTransform\0225\n\016collision_type\030\004"
      " \001(\0162\035.Gamedata.EntityCollisionType\022-\n\nc"
      "hild_list\030\005 \003(\0132\031.Gamedata.EntityChildIn"
      "fo\022+\n\006spline\030\006 \001(\0132\033.Gamedata.EntitySpli"
      "neAlone\022/\n\013python_info\030\007 \001(\0132\032.Gamedata."
      "EntityPythonInfo\022=\n\022transform_timeline\030\010"
      " \001(\0132!.Gamedata.EntityTransformTimeline\022"
      ",\n\007command\030\t \001(\0132\033.Gamedata.EntityComman"
      "dInfo\022\024\n\014lockPlayerId\030\n \001(\005\0222\n\020entity_sy"
      "nc_type\030\013 \001(\0162\030.Gamedata.EntitySyncType\""
      "\?\n\017EntityEnterView\022,\n\016entityInfoList\030\001 \003"
      "(\0132\024.Gamedata.EntityInfo\"@\n\020EntityUpdate"
      "View\022,\n\016entityInfoList\030\001 \003(\0132\024.Gamedata."
      "EntityInfo\"\'\n\017EntityLeaveView\022\024\n\014entityI"
      "dList\030\001 \003(\005\"R\n\020EntityAddRequest\022,\n\016entit"
      "yInfoList\030\001 \003(\0132\024.Gamedata.EntityInfo\022\020\n"
      "\010playerId\030\002 \001(\005\"=\n\023EntityRemoveRequest\022\024"
      "\n\014entityIdList\030\001 \003(\005\022\020\n\010playerId\030\002 \001(\005\"U"
      "\n\023EntityUpdateRequest\022,\n\016entityInfoList\030"
      "\001 \003(\0132\024.Gamedata.EntityInfo\022\020\n\010playerId\030"
      "\002 \001(\005\"\'\n\025EntityOperationValue1\022\016\n\006isPlay"
      "\030\001 \001(\010\"\'\n\025EntityOperationValue2\022\016\n\006isPla"
      "y\030\001 \001(\010\"\314\001\n\024EntityOperationAlone\022.\n\007theT"
      "ype\030\001 \001(\0162\035.Gamedata.EntityOperationType"
      "\022\020\n\010playerId\030\002 \001(\005\022\020\n\010entityId\030\003 \001(\005\022/\n\006"
      "value1\030\004 \003(\0132\037.Gamedata.EntityOperationV"
      "alue1\022/\n\006value2\030\005 \003(\0132\037.Gamedata.EntityO"
      "perationValue2\"D\n\024EntityOperationTotal\022,"
      "\n\004node\030\001 \003(\0132\036.Gamedata.EntityOperationA"
      "lone\"\200\001\n\027OverallSituationSkyInfo\022\014\n\004time"
      "\030\001 \001(\005\022\017\n\007weather\030\002 \001(\005\022\035\n\025cloud_coverag"
      "eoverall\030\003 \001(\005\022\023\n\013cloud_speed\030\004 \001(\005\022\022\n\nm"
      "oon_color\030\005 \001(\005\"a\n\023EntityMeshChildInfo\022\r"
      "\n\005xlsId\030\004 \001(\005\022\022\n\nmaterialId\030\005 \001(\005\022\'\n\ttra"
      "nsform\030\007 \001(\0132\024.Gamedata.FTransform\"\203\001\n\024E"
      "ntityMeshMasterInfo\022\016\n\006xls_id\030\003 \001(\005\022\021\n\tp"
      "layer_id\030\002 \001(\005\022\014\n\004name\030\004 \001(\t\022\014\n\004type\030\005 \001"
      "(\t\022,\n\005child\030\007 \003(\0132\035.Gamedata.EntityMeshC"
      "hildInfo\"\340\001\n\024OverallSituationData\022A\n\nact"
      "or_list\030\001 \003(\0132-.Gamedata.OverallSituatio"
      "nData.ActorListEntry\0223\n\010sky_info\030\002 \001(\0132!"
      ".Gamedata.OverallSituationSkyInfo\032P\n\016Act"
      "orListEntry\022\013\n\003key\030\001 \001(\005\022-\n\005value\030\002 \001(\0132"
      "\036.Gamedata.EntityMeshMasterInfo:\0028\001\"\203\003\n\033"
      "OverallSituationDataRequest\022\021\n\tplayer_id"
      "\030\001 \001(\005\0224\n\010set_type\030\002 \001(\0162\".Gamedata.Over"
      "allSituationDataType\0223\n\010sky_info\030\004 \001(\0132!"
      ".Gamedata.OverallSituationSkyInfo\0221\n\tact"
      "or_add\030\005 \001(\0132\036.Gamedata.EntityMeshMaster"
      "Info\0221\n\023actor_add_transform\030\006 \001(\0132\024.Game"
      "data.FTransform\0224\n\014actor_update\030\007 \001(\0132\036."
      "Gamedata.EntityMeshMasterInfo\0224\n\026actor_u"
      "pdate_transform\030\010 \001(\0132\024.Gamedata.FTransf"
      "orm\022\024\n\014actor_delete\030\t \001(\005\"\274\004\n\034OverallSit"
      "uationDataResponse\0224\n\010set_type\030\001 \001(\0162\".G"
      "amedata.OverallSituationDataType\022,\n\004data"
      "\030\002 \001(\0132\036.Gamedata.OverallSituationData\0223"
      "\n\010sky_info\030\004 \001(\0132!.Gamedata.OverallSitua"
      "tionSkyInfo\022I\n\nactor_list\030\005 \003(\01325.Gameda"
      "ta.OverallSituationDataResponse.ActorLis"
      "tEntry\0221\n\tactor_add\030\006 \001(\0132\036.Gamedata.Ent"
      "ityMeshMasterInfo\0221\n\023actor_add_transform"
      "\030\007 \001(\0132\024.Gamedata.FTransform\0224\n\014actor_up"
      "date\030\010 \001(\0132\036.Gamedata.EntityMeshMasterIn"
      "fo\0224\n\026actor_update_transform\030\t \001(\0132\024.Gam"
      "edata.FTransform\022\024\n\014actor_delete\030\n \001(\005\032P"
      "\n\016ActorListEntry\022\013\n\003key\030\001 \001(\005\022-\n\005value\030\002"
      " \001(\0132\036.Gamedata.EntityMeshMasterInfo:\0028\001"
      "\"8\n\020EventCommandInfo\022\017\n\007command\030\001 \001(\t\022\023\n"
      "\013entity_list\030\002 \003(\005\"\331\001\n\tEventInfo\022\021\n\tplay"
      "er_id\030\001 \001(\005\022\'\n\nevent_type\030\002 \001(\0162\023.Gameda"
      "ta.EventType\022\?\n\024broadcast_range_type\030\003 \001"
      "(\0162!.Gamedata.EventBroadcastRangeType\022\035\n"
      "\025broadcast_player_list\030\004 \003(\005\0220\n\014command_"
      "info\030\005 \001(\0132\032.Gamedata.EventCommandInfo\"\205"
      "\001\n\035TimelineOneFrameOneEntityData\0223\n\023coll"
      "ision_transform\030\001 \001(\0132\026.Gamedata.FTransf"
      "orm_s\022/\n\017child_transform\030\002 \003(\0132\026.Gamedat"
      "a.FTransform_s\"\344\001\n\036TimelineOnewFrameAllE"
      "ntityData\022^\n\024entity_transform_map\030\002 \003(\0132"
      "@.Gamedata.TimelineOnewFrameAllEntityDat"
      "a.EntityTransformMapEntry\032b\n\027EntityTrans"
      "formMapEntry\022\013\n\003key\030\001 \001(\005\0226\n\005value\030\002 \001(\013"
      "2\'.Gamedata.TimelineOneFrameOneEntityDat"
      "a:\0028\001\"k\n\035TimelineOneSecondAllFrameData\022\014"
      "\n\004time\030\001 \001(\005\022<\n\nframe_list\030\002 \003(\0132(.Gamed"
      "ata.TimelineOnewFrameAllEntityData*\244\001\n\025G"
      "ameMainOperationMode\022\036\n\032GameMainOperatio"
      "nMode_None\020\000\022#\n\037GameMainOperationMode_Ch"
      "aracter\020\001\022 \n\034GameMainOperationMode_Racin"
      "g\020\002\022$\n GameMainOperationMode_edit_etity\020"
      "\003*\330\001\n\031CharacterMovementModeType\022\"\n\036Chara"
      "cterMovementModeType_None\020\000\022\"\n\036Character"
      "MovementModeType_Walk\020\001\022%\n!CharacterMove"
      "mentModeType_Falling\020\002\022&\n\"CharacterMovem"
      "entModeType_Swimming\020\003\022$\n CharacterMovem"
      "entModeType_Flying\020\004*S\n\023CharacterActionT"
      "ype\022\034\n\030CharacterActionType_None\020\000\022\036\n\032Cha"
      "racterActionType_Attack\020\001*F\n\016EntityTimeT"
      "ype\022\033\n\027EntityTimeType_MoveNode\020\000\022\027\n\023Enti"
      "tyTimeType_Spin\020\001*\226\001\n\033EntityMoveTimeline"
      "EndOfPlay\022%\n!EntityMoveTimelineEndOfPlay"
      "_Cycle\020\000\022(\n$EntityMoveTimelineEndOfPlay_"
      "ShutDown\020\001\022&\n\"EntityMoveTimelineEndOfPla"
      "y_Return\020\002*|\n\025EntityPythonErrorType\022\036\n\032E"
      "ntityPythonErrorType_none\020\000\022$\n EntityPyt"
      "honErrorType_code_error\020\001\022\035\n\031EntityPytho"
      "nErrorType_lag\020\002*\220\001\n\021EntityCommandType\022\032"
      "\n\026EntityCommandType_auto\020\000\022\035\n\031EntityComm"
      "andType_command\020\001\022!\n\035EntityCommandType_i"
      "nteractive\020\002\022\035\n\031EntityCommandType_trigge"
      "r\020\003*}\n\025TimelineHighlightType\022\035\n\031Timeline"
      "HighlightType_off\020\000\022\037\n\033TimelineHighlight"
      "Type_color\020\001\022$\n TimelineHighlightType_hi"
      "ghtlight\020\002*{\n\023EntityCollisionType\022\034\n\030Ent"
      "ityCollisionType_None\020\000\022\035\n\031EntityCollisi"
      "onType_Query\020\001\022\'\n#EntityCollisionType_Qu"
      "eryAndPhysics\020\002*X\n\016EntitySyncType\022\027\n\023Ent"
      "itySyncType_near\020\000\022\025\n\021EntitySyncType_in\020"
      "\001\022\026\n\022EntitySyncType_far\020\002*t\n\023EntityOpera"
      "tionType\022\034\n\030EntityOperationType_None\020\000\022\037"
      "\n\032EntityOperationType_IsPlay\020\210\'\022\036\n\031Entit"
      "yOperationType_Image\020\211\'*\307\002\n\030OverallSitua"
      "tionDataType\022%\n!OverallSituationDataType"
      "_push_all\020\000\022$\n OverallSituationDataType_"
      "req_sky\020\001\022$\n OverallSituationDataType_rs"
      "p_sky\020\002\022.\n*OverallSituationDataType_req_"
      "get_all_actor\020\003\022*\n&OverallSituationDataT"
      "ype_req_add_actor\020\004\022-\n)OverallSituationD"
      "ataType_req_update_actor\020\005\022-\n)OverallSit"
      "uationDataType_req_remove_actor\020\006*6\n\tEve"
      "ntType\022\022\n\016EventType_none\020\000\022\025\n\021EventType_"
      "command\020\001*b\n\027EventBroadcastRangeType\022\"\n\036"
      "EventBroadcastRangeType_online\020\000\022#\n\037Even"
      "tBroadcastRangeType_specify\020\001B\022\n\020zc.test"
      ".Protobufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9857);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  ::protobuf_the_5fpublic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_game_2eproto
namespace Gamedata {
const ::google::protobuf::EnumDescriptor* GameMainOperationMode_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[0];
}
bool GameMainOperationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterMovementModeType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[1];
}
bool CharacterMovementModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterActionType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[2];
}
bool CharacterActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityTimeType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[3];
}
bool EntityTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityMoveTimelineEndOfPlay_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[4];
}
bool EntityMoveTimelineEndOfPlay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityPythonErrorType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[5];
}
bool EntityPythonErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityCommandType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[6];
}
bool EntityCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimelineHighlightType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[7];
}
bool TimelineHighlightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityCollisionType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[8];
}
bool EntityCollisionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntitySyncType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[9];
}
bool EntitySyncType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityOperationType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[10];
}
bool EntityOperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 5000:
    case 5001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OverallSituationDataType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[11];
}
bool OverallSituationDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[12];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventBroadcastRangeType_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[13];
}
bool EventBroadcastRangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlayerRacingInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRacingInfo::kSteeringInputFieldNumber;
const int PlayerRacingInfo::kThrottleInputFieldNumber;
const int PlayerRacingInfo::kBrakeInputFieldNumber;
const int PlayerRacingInfo::kHandbrakeInputFieldNumber;
const int PlayerRacingInfo::kCurrentGearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRacingInfo::PlayerRacingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerRacingInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerRacingInfo)
}
PlayerRacingInfo::PlayerRacingInfo(const PlayerRacingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steering_input_, &from.steering_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_gear_) -
    reinterpret_cast<char*>(&steering_input_)) + sizeof(current_gear_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerRacingInfo)
}

void PlayerRacingInfo::SharedCtor() {
  ::memset(&steering_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_gear_) -
      reinterpret_cast<char*>(&steering_input_)) + sizeof(current_gear_));
  _cached_size_ = 0;
}

PlayerRacingInfo::~PlayerRacingInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerRacingInfo)
  SharedDtor();
}

void PlayerRacingInfo::SharedDtor() {
}

void PlayerRacingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRacingInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRacingInfo& PlayerRacingInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerRacingInfo();
  return *internal_default_instance();
}

PlayerRacingInfo* PlayerRacingInfo::New(::google::protobuf::Arena* arena) const {
  PlayerRacingInfo* n = new PlayerRacingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRacingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerRacingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&steering_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_gear_) -
      reinterpret_cast<char*>(&steering_input_)) + sizeof(current_gear_));
  _internal_metadata_.Clear();
}

bool PlayerRacingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerRacingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float steering_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float throttle_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brake_input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float handbrake_input = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &handbrake_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_gear = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerRacingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerRacingInfo)
  return false;
#undef DO_
}

void PlayerRacingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerRacingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steering_input = 1;
  if (this->steering_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->steering_input(), output);
  }

  // float throttle_input = 2;
  if (this->throttle_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->throttle_input(), output);
  }

  // float brake_input = 3;
  if (this->brake_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->brake_input(), output);
  }

  // float handbrake_input = 4;
  if (this->handbrake_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->handbrake_input(), output);
  }

  // int32 current_gear = 5;
  if (this->current_gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_gear(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerRacingInfo)
}

::google::protobuf::uint8* PlayerRacingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerRacingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steering_input = 1;
  if (this->steering_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->steering_input(), target);
  }

  // float throttle_input = 2;
  if (this->throttle_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->throttle_input(), target);
  }

  // float brake_input = 3;
  if (this->brake_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->brake_input(), target);
  }

  // float handbrake_input = 4;
  if (this->handbrake_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->handbrake_input(), target);
  }

  // int32 current_gear = 5;
  if (this->current_gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_gear(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerRacingInfo)
  return target;
}

size_t PlayerRacingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerRacingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float steering_input = 1;
  if (this->steering_input() != 0) {
    total_size += 1 + 4;
  }

  // float throttle_input = 2;
  if (this->throttle_input() != 0) {
    total_size += 1 + 4;
  }

  // float brake_input = 3;
  if (this->brake_input() != 0) {
    total_size += 1 + 4;
  }

  // float handbrake_input = 4;
  if (this->handbrake_input() != 0) {
    total_size += 1 + 4;
  }

  // int32 current_gear = 5;
  if (this->current_gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_gear());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRacingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerRacingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRacingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRacingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerRacingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerRacingInfo)
    MergeFrom(*source);
  }
}

void PlayerRacingInfo::MergeFrom(const PlayerRacingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerRacingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.steering_input() != 0) {
    set_steering_input(from.steering_input());
  }
  if (from.throttle_input() != 0) {
    set_throttle_input(from.throttle_input());
  }
  if (from.brake_input() != 0) {
    set_brake_input(from.brake_input());
  }
  if (from.handbrake_input() != 0) {
    set_handbrake_input(from.handbrake_input());
  }
  if (from.current_gear() != 0) {
    set_current_gear(from.current_gear());
  }
}

void PlayerRacingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerRacingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRacingInfo::CopyFrom(const PlayerRacingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerRacingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRacingInfo::IsInitialized() const {
  return true;
}

void PlayerRacingInfo::Swap(PlayerRacingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRacingInfo::InternalSwap(PlayerRacingInfo* other) {
  using std::swap;
  swap(steering_input_, other->steering_input_);
  swap(throttle_input_, other->throttle_input_);
  swap(brake_input_, other->brake_input_);
  swap(handbrake_input_, other->handbrake_input_);
  swap(current_gear_, other->current_gear_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRacingInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerButtonKeyInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerButtonKeyInfo::kCommandListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerButtonKeyInfo::PlayerButtonKeyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerButtonKeyInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerButtonKeyInfo)
}
PlayerButtonKeyInfo::PlayerButtonKeyInfo(const PlayerButtonKeyInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      command_list_(from.command_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerButtonKeyInfo)
}

void PlayerButtonKeyInfo::SharedCtor() {
  _cached_size_ = 0;
}

PlayerButtonKeyInfo::~PlayerButtonKeyInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerButtonKeyInfo)
  SharedDtor();
}

void PlayerButtonKeyInfo::SharedDtor() {
}

void PlayerButtonKeyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerButtonKeyInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerButtonKeyInfo& PlayerButtonKeyInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerButtonKeyInfo();
  return *internal_default_instance();
}

PlayerButtonKeyInfo* PlayerButtonKeyInfo::New(::google::protobuf::Arena* arena) const {
  PlayerButtonKeyInfo* n = new PlayerButtonKeyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerButtonKeyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerButtonKeyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_list_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerButtonKeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerButtonKeyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string command_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command_list(this->command_list_size() - 1).data(),
            static_cast<int>(this->command_list(this->command_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.PlayerButtonKeyInfo.command_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerButtonKeyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerButtonKeyInfo)
  return false;
#undef DO_
}

void PlayerButtonKeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerButtonKeyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_list = 1;
  for (int i = 0, n = this->command_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command_list(i).data(), static_cast<int>(this->command_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerButtonKeyInfo.command_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerButtonKeyInfo)
}

::google::protobuf::uint8* PlayerButtonKeyInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerButtonKeyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_list = 1;
  for (int i = 0, n = this->command_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command_list(i).data(), static_cast<int>(this->command_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerButtonKeyInfo.command_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->command_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerButtonKeyInfo)
  return target;
}

size_t PlayerButtonKeyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerButtonKeyInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string command_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->command_list_size());
  for (int i = 0, n = this->command_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command_list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerButtonKeyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerButtonKeyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerButtonKeyInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerButtonKeyInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerButtonKeyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerButtonKeyInfo)
    MergeFrom(*source);
  }
}

void PlayerButtonKeyInfo::MergeFrom(const PlayerButtonKeyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerButtonKeyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_list_.MergeFrom(from.command_list_);
}

void PlayerButtonKeyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerButtonKeyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerButtonKeyInfo::CopyFrom(const PlayerButtonKeyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerButtonKeyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerButtonKeyInfo::IsInitialized() const {
  return true;
}

void PlayerButtonKeyInfo::Swap(PlayerButtonKeyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerButtonKeyInfo::InternalSwap(PlayerButtonKeyInfo* other) {
  using std::swap;
  command_list_.InternalSwap(&other->command_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerButtonKeyInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEntityButtonInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntityButtonInfo::kKeyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntityButtonInfo::PlayerEntityButtonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerEntityButtonInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerEntityButtonInfo)
}
PlayerEntityButtonInfo::PlayerEntityButtonInfo(const PlayerEntityButtonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_list_(from.key_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerEntityButtonInfo)
}

void PlayerEntityButtonInfo::SharedCtor() {
  _cached_size_ = 0;
}

PlayerEntityButtonInfo::~PlayerEntityButtonInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerEntityButtonInfo)
  SharedDtor();
}

void PlayerEntityButtonInfo::SharedDtor() {
}

void PlayerEntityButtonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntityButtonInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEntityButtonInfo& PlayerEntityButtonInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerEntityButtonInfo();
  return *internal_default_instance();
}

PlayerEntityButtonInfo* PlayerEntityButtonInfo::New(::google::protobuf::Arena* arena) const {
  PlayerEntityButtonInfo* n = new PlayerEntityButtonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEntityButtonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerEntityButtonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_list_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerEntityButtonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerEntityButtonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.PlayerButtonKeyInfo key_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_key_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerEntityButtonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerEntityButtonInfo)
  return false;
#undef DO_
}

void PlayerEntityButtonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerEntityButtonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerButtonKeyInfo key_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerEntityButtonInfo)
}

::google::protobuf::uint8* PlayerEntityButtonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerEntityButtonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerButtonKeyInfo key_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->key_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerEntityButtonInfo)
  return target;
}

size_t PlayerEntityButtonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerEntityButtonInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.PlayerButtonKeyInfo key_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->key_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntityButtonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerEntityButtonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntityButtonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntityButtonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerEntityButtonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerEntityButtonInfo)
    MergeFrom(*source);
  }
}

void PlayerEntityButtonInfo::MergeFrom(const PlayerEntityButtonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerEntityButtonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_list_.MergeFrom(from.key_list_);
}

void PlayerEntityButtonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerEntityButtonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntityButtonInfo::CopyFrom(const PlayerEntityButtonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerEntityButtonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntityButtonInfo::IsInitialized() const {
  return true;
}

void PlayerEntityButtonInfo::Swap(PlayerEntityButtonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntityButtonInfo::InternalSwap(PlayerEntityButtonInfo* other) {
  using std::swap;
  key_list_.InternalSwap(&other->key_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEntityButtonInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerLocaionInfo::InitAsDefaultInstance() {
  ::Gamedata::_PlayerLocaionInfo_default_instance_._instance.get_mutable()->transform_s_ = const_cast< ::Gamedata::FTransform_s*>(
      ::Gamedata::FTransform_s::internal_default_instance());
  ::Gamedata::_PlayerLocaionInfo_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
  ::Gamedata::_PlayerLocaionInfo_default_instance_._instance.get_mutable()->player_racing_info_ = const_cast< ::Gamedata::PlayerRacingInfo*>(
      ::Gamedata::PlayerRacingInfo::internal_default_instance());
}
void PlayerLocaionInfo::clear_transform_s() {
  if (GetArenaNoVirtual() == NULL && transform_s_ != NULL) {
    delete transform_s_;
  }
  transform_s_ = NULL;
}
void PlayerLocaionInfo::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLocaionInfo::kTransformSFieldNumber;
const int PlayerLocaionInfo::kVelocityFieldNumber;
const int PlayerLocaionInfo::kCharacterMovementModeTypeFieldNumber;
const int PlayerLocaionInfo::kCharacterActionTypeFieldNumber;
const int PlayerLocaionInfo::kIsRacingFieldNumber;
const int PlayerLocaionInfo::kPlayerRacingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLocaionInfo::PlayerLocaionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerLocaionInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerLocaionInfo)
}
PlayerLocaionInfo::PlayerLocaionInfo(const PlayerLocaionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform_s()) {
    transform_s_ = new ::Gamedata::FTransform_s(*from.transform_s_);
  } else {
    transform_s_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::Gamedata::FVector(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_player_racing_info()) {
    player_racing_info_ = new ::Gamedata::PlayerRacingInfo(*from.player_racing_info_);
  } else {
    player_racing_info_ = NULL;
  }
  ::memcpy(&charactermovementmodetype_, &from.charactermovementmodetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&isracing_) -
    reinterpret_cast<char*>(&charactermovementmodetype_)) + sizeof(isracing_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerLocaionInfo)
}

void PlayerLocaionInfo::SharedCtor() {
  ::memset(&transform_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isracing_) -
      reinterpret_cast<char*>(&transform_s_)) + sizeof(isracing_));
  _cached_size_ = 0;
}

PlayerLocaionInfo::~PlayerLocaionInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerLocaionInfo)
  SharedDtor();
}

void PlayerLocaionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete transform_s_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete player_racing_info_;
}

void PlayerLocaionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLocaionInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLocaionInfo& PlayerLocaionInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerLocaionInfo();
  return *internal_default_instance();
}

PlayerLocaionInfo* PlayerLocaionInfo::New(::google::protobuf::Arena* arena) const {
  PlayerLocaionInfo* n = new PlayerLocaionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLocaionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerLocaionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transform_s_ != NULL) {
    delete transform_s_;
  }
  transform_s_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_racing_info_ != NULL) {
    delete player_racing_info_;
  }
  player_racing_info_ = NULL;
  ::memset(&charactermovementmodetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isracing_) -
      reinterpret_cast<char*>(&charactermovementmodetype_)) + sizeof(isracing_));
  _internal_metadata_.Clear();
}

bool PlayerLocaionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerLocaionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.FTransform_s transform_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.CharacterMovementModeType characterMovementModeType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_charactermovementmodetype(static_cast< ::Gamedata::CharacterMovementModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.CharacterActionType characterActionType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_characteractiontype(static_cast< ::Gamedata::CharacterActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isRacing = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.PlayerRacingInfo player_racing_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_racing_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerLocaionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerLocaionInfo)
  return false;
#undef DO_
}

void PlayerLocaionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerLocaionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform_s transform_s = 1;
  if (this->has_transform_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_s_, output);
  }

  // .Gamedata.FVector velocity = 2;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  // .Gamedata.CharacterMovementModeType characterMovementModeType = 3;
  if (this->charactermovementmodetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->charactermovementmodetype(), output);
  }

  // .Gamedata.CharacterActionType characterActionType = 4;
  if (this->characteractiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->characteractiontype(), output);
  }

  // bool isRacing = 5;
  if (this->isracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isracing(), output);
  }

  // .Gamedata.PlayerRacingInfo player_racing_info = 6;
  if (this->has_player_racing_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->player_racing_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerLocaionInfo)
}

::google::protobuf::uint8* PlayerLocaionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerLocaionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform_s transform_s = 1;
  if (this->has_transform_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->transform_s_, deterministic, target);
  }

  // .Gamedata.FVector velocity = 2;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->velocity_, deterministic, target);
  }

  // .Gamedata.CharacterMovementModeType characterMovementModeType = 3;
  if (this->charactermovementmodetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->charactermovementmodetype(), target);
  }

  // .Gamedata.CharacterActionType characterActionType = 4;
  if (this->characteractiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->characteractiontype(), target);
  }

  // bool isRacing = 5;
  if (this->isracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isracing(), target);
  }

  // .Gamedata.PlayerRacingInfo player_racing_info = 6;
  if (this->has_player_racing_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->player_racing_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerLocaionInfo)
  return target;
}

size_t PlayerLocaionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerLocaionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FTransform_s transform_s = 1;
  if (this->has_transform_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transform_s_);
  }

  // .Gamedata.FVector velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->velocity_);
  }

  // .Gamedata.PlayerRacingInfo player_racing_info = 6;
  if (this->has_player_racing_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->player_racing_info_);
  }

  // .Gamedata.CharacterMovementModeType characterMovementModeType = 3;
  if (this->charactermovementmodetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->charactermovementmodetype());
  }

  // .Gamedata.CharacterActionType characterActionType = 4;
  if (this->characteractiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->characteractiontype());
  }

  // bool isRacing = 5;
  if (this->isracing() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLocaionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerLocaionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLocaionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLocaionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerLocaionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerLocaionInfo)
    MergeFrom(*source);
  }
}

void PlayerLocaionInfo::MergeFrom(const PlayerLocaionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerLocaionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform_s()) {
    mutable_transform_s()->::Gamedata::FTransform_s::MergeFrom(from.transform_s());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::Gamedata::FVector::MergeFrom(from.velocity());
  }
  if (from.has_player_racing_info()) {
    mutable_player_racing_info()->::Gamedata::PlayerRacingInfo::MergeFrom(from.player_racing_info());
  }
  if (from.charactermovementmodetype() != 0) {
    set_charactermovementmodetype(from.charactermovementmodetype());
  }
  if (from.characteractiontype() != 0) {
    set_characteractiontype(from.characteractiontype());
  }
  if (from.isracing() != 0) {
    set_isracing(from.isracing());
  }
}

void PlayerLocaionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerLocaionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLocaionInfo::CopyFrom(const PlayerLocaionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerLocaionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLocaionInfo::IsInitialized() const {
  return true;
}

void PlayerLocaionInfo::Swap(PlayerLocaionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLocaionInfo::InternalSwap(PlayerLocaionInfo* other) {
  using std::swap;
  swap(transform_s_, other->transform_s_);
  swap(velocity_, other->velocity_);
  swap(player_racing_info_, other->player_racing_info_);
  swap(charactermovementmodetype_, other->charactermovementmodetype_);
  swap(characteractiontype_, other->characteractiontype_);
  swap(isracing_, other->isracing_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLocaionInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerStorageEntity::InitAsDefaultInstance() {
  ::Gamedata::_PlayerStorageEntity_default_instance_._instance.get_mutable()->entity_info_ = const_cast< ::Gamedata::EntityInfo*>(
      ::Gamedata::EntityInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerStorageEntity::kEntityInfoFieldNumber;
const int PlayerStorageEntity::kEntityNameFieldNumber;
const int PlayerStorageEntity::kUniqueMarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStorageEntity::PlayerStorageEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerStorageEntity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerStorageEntity)
}
PlayerStorageEntity::PlayerStorageEntity(const PlayerStorageEntity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity_name().size() > 0) {
    entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
  }
  if (from.has_entity_info()) {
    entity_info_ = new ::Gamedata::EntityInfo(*from.entity_info_);
  } else {
    entity_info_ = NULL;
  }
  unique_mark_ = from.unique_mark_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerStorageEntity)
}

void PlayerStorageEntity::SharedCtor() {
  entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entity_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_mark_) -
      reinterpret_cast<char*>(&entity_info_)) + sizeof(unique_mark_));
  _cached_size_ = 0;
}

PlayerStorageEntity::~PlayerStorageEntity() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerStorageEntity)
  SharedDtor();
}

void PlayerStorageEntity::SharedDtor() {
  entity_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entity_info_;
}

void PlayerStorageEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStorageEntity::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerStorageEntity& PlayerStorageEntity::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerStorageEntity();
  return *internal_default_instance();
}

PlayerStorageEntity* PlayerStorageEntity::New(::google::protobuf::Arena* arena) const {
  PlayerStorageEntity* n = new PlayerStorageEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerStorageEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerStorageEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && entity_info_ != NULL) {
    delete entity_info_;
  }
  entity_info_ = NULL;
  unique_mark_ = 0;
  _internal_metadata_.Clear();
}

bool PlayerStorageEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerStorageEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.EntityInfo entity_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entity_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity_name().data(), static_cast<int>(this->entity_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.PlayerStorageEntity.entity_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 unique_mark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerStorageEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerStorageEntity)
  return false;
#undef DO_
}

void PlayerStorageEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerStorageEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityInfo entity_info = 1;
  if (this->has_entity_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->entity_info_, output);
  }

  // string entity_name = 2;
  if (this->entity_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_name().data(), static_cast<int>(this->entity_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerStorageEntity.entity_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_name(), output);
  }

  // int32 unique_mark = 3;
  if (this->unique_mark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unique_mark(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerStorageEntity)
}

::google::protobuf::uint8* PlayerStorageEntity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerStorageEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityInfo entity_info = 1;
  if (this->has_entity_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->entity_info_, deterministic, target);
  }

  // string entity_name = 2;
  if (this->entity_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_name().data(), static_cast<int>(this->entity_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerStorageEntity.entity_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_name(), target);
  }

  // int32 unique_mark = 3;
  if (this->unique_mark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unique_mark(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerStorageEntity)
  return target;
}

size_t PlayerStorageEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerStorageEntity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string entity_name = 2;
  if (this->entity_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_name());
  }

  // .Gamedata.EntityInfo entity_info = 1;
  if (this->has_entity_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->entity_info_);
  }

  // int32 unique_mark = 3;
  if (this->unique_mark() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unique_mark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStorageEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerStorageEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStorageEntity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerStorageEntity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerStorageEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerStorageEntity)
    MergeFrom(*source);
  }
}

void PlayerStorageEntity::MergeFrom(const PlayerStorageEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerStorageEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_name().size() > 0) {

    entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_name_);
  }
  if (from.has_entity_info()) {
    mutable_entity_info()->::Gamedata::EntityInfo::MergeFrom(from.entity_info());
  }
  if (from.unique_mark() != 0) {
    set_unique_mark(from.unique_mark());
  }
}

void PlayerStorageEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerStorageEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStorageEntity::CopyFrom(const PlayerStorageEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerStorageEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStorageEntity::IsInitialized() const {
  return true;
}

void PlayerStorageEntity::Swap(PlayerStorageEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStorageEntity::InternalSwap(PlayerStorageEntity* other) {
  using std::swap;
  entity_name_.Swap(&other->entity_name_);
  swap(entity_info_, other->entity_info_);
  swap(unique_mark_, other->unique_mark_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerStorageEntity::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEntityStorageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntityStorageInfo::kStorageEntityListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntityStorageInfo::PlayerEntityStorageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerEntityStorageInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerEntityStorageInfo)
}
PlayerEntityStorageInfo::PlayerEntityStorageInfo(const PlayerEntityStorageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      storage_entity_list_(from.storage_entity_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerEntityStorageInfo)
}

void PlayerEntityStorageInfo::SharedCtor() {
  _cached_size_ = 0;
}

PlayerEntityStorageInfo::~PlayerEntityStorageInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerEntityStorageInfo)
  SharedDtor();
}

void PlayerEntityStorageInfo::SharedDtor() {
}

void PlayerEntityStorageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntityStorageInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEntityStorageInfo& PlayerEntityStorageInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerEntityStorageInfo();
  return *internal_default_instance();
}

PlayerEntityStorageInfo* PlayerEntityStorageInfo::New(::google::protobuf::Arena* arena) const {
  PlayerEntityStorageInfo* n = new PlayerEntityStorageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEntityStorageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerEntityStorageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storage_entity_list_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerEntityStorageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerEntityStorageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.PlayerStorageEntity storage_entity_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_storage_entity_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerEntityStorageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerEntityStorageInfo)
  return false;
#undef DO_
}

void PlayerEntityStorageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerEntityStorageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerStorageEntity storage_entity_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->storage_entity_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->storage_entity_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerEntityStorageInfo)
}

::google::protobuf::uint8* PlayerEntityStorageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerEntityStorageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerStorageEntity storage_entity_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->storage_entity_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->storage_entity_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerEntityStorageInfo)
  return target;
}

size_t PlayerEntityStorageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerEntityStorageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.PlayerStorageEntity storage_entity_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->storage_entity_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->storage_entity_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntityStorageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerEntityStorageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntityStorageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntityStorageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerEntityStorageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerEntityStorageInfo)
    MergeFrom(*source);
  }
}

void PlayerEntityStorageInfo::MergeFrom(const PlayerEntityStorageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerEntityStorageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  storage_entity_list_.MergeFrom(from.storage_entity_list_);
}

void PlayerEntityStorageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerEntityStorageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntityStorageInfo::CopyFrom(const PlayerEntityStorageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerEntityStorageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntityStorageInfo::IsInitialized() const {
  return true;
}

void PlayerEntityStorageInfo::Swap(PlayerEntityStorageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntityStorageInfo::InternalSwap(PlayerEntityStorageInfo* other) {
  using std::swap;
  storage_entity_list_.InternalSwap(&other->storage_entity_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEntityStorageInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
  ::Gamedata::_PlayerInfo_default_instance_._instance.get_mutable()->playerlocaioninfo_ = const_cast< ::Gamedata::PlayerLocaionInfo*>(
      ::Gamedata::PlayerLocaionInfo::internal_default_instance());
  ::Gamedata::_PlayerInfo_default_instance_._instance.get_mutable()->entity_button_info_ = const_cast< ::Gamedata::PlayerEntityButtonInfo*>(
      ::Gamedata::PlayerEntityButtonInfo::internal_default_instance());
  ::Gamedata::_PlayerInfo_default_instance_._instance.get_mutable()->entity_storage_ = const_cast< ::Gamedata::PlayerEntityStorageInfo*>(
      ::Gamedata::PlayerEntityStorageInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kPlayerIdFieldNumber;
const int PlayerInfo::kCharacterPawnTypeFieldNumber;
const int PlayerInfo::kPlayerLocaionInfoFieldNumber;
const int PlayerInfo::kEntityButtonInfoFieldNumber;
const int PlayerInfo::kEntityStorageFieldNumber;
const int PlayerInfo::kSkyLevelIndexFieldNumber;
const int PlayerInfo::kCharacterIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_playerlocaioninfo()) {
    playerlocaioninfo_ = new ::Gamedata::PlayerLocaionInfo(*from.playerlocaioninfo_);
  } else {
    playerlocaioninfo_ = NULL;
  }
  if (from.has_entity_button_info()) {
    entity_button_info_ = new ::Gamedata::PlayerEntityButtonInfo(*from.entity_button_info_);
  } else {
    entity_button_info_ = NULL;
  }
  if (from.has_entity_storage()) {
    entity_storage_ = new ::Gamedata::PlayerEntityStorageInfo(*from.entity_storage_);
  } else {
    entity_storage_ = NULL;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_index_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(character_index_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::memset(&playerlocaioninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_index_) -
      reinterpret_cast<char*>(&playerlocaioninfo_)) + sizeof(character_index_));
  _cached_size_ = 0;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete playerlocaioninfo_;
  if (this != internal_default_instance()) delete entity_button_info_;
  if (this != internal_default_instance()) delete entity_storage_;
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInfo& PlayerInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerInfo();
  return *internal_default_instance();
}

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && playerlocaioninfo_ != NULL) {
    delete playerlocaioninfo_;
  }
  playerlocaioninfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_button_info_ != NULL) {
    delete entity_button_info_;
  }
  entity_button_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_storage_ != NULL) {
    delete entity_storage_;
  }
  entity_storage_ = NULL;
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_index_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(character_index_));
  _internal_metadata_.Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.GameMainOperationMode character_pawn_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_character_pawn_type(static_cast< ::Gamedata::GameMainOperationMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerlocaioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.PlayerEntityButtonInfo entity_button_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_button_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.PlayerEntityStorageInfo entity_storage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sky_level_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sky_level_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 character_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // .Gamedata.GameMainOperationMode character_pawn_type = 2;
  if (this->character_pawn_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_pawn_type(), output);
  }

  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 4;
  if (this->has_playerlocaioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->playerlocaioninfo_, output);
  }

  // .Gamedata.PlayerEntityButtonInfo entity_button_info = 5;
  if (this->has_entity_button_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->entity_button_info_, output);
  }

  // .Gamedata.PlayerEntityStorageInfo entity_storage = 6;
  if (this->has_entity_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->entity_storage_, output);
  }

  // int32 sky_level_index = 7;
  if (this->sky_level_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sky_level_index(), output);
  }

  // int32 character_index = 8;
  if (this->character_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->character_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // .Gamedata.GameMainOperationMode character_pawn_type = 2;
  if (this->character_pawn_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_pawn_type(), target);
  }

  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 4;
  if (this->has_playerlocaioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->playerlocaioninfo_, deterministic, target);
  }

  // .Gamedata.PlayerEntityButtonInfo entity_button_info = 5;
  if (this->has_entity_button_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->entity_button_info_, deterministic, target);
  }

  // .Gamedata.PlayerEntityStorageInfo entity_storage = 6;
  if (this->has_entity_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->entity_storage_, deterministic, target);
  }

  // int32 sky_level_index = 7;
  if (this->sky_level_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sky_level_index(), target);
  }

  // int32 character_index = 8;
  if (this->character_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->character_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 4;
  if (this->has_playerlocaioninfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->playerlocaioninfo_);
  }

  // .Gamedata.PlayerEntityButtonInfo entity_button_info = 5;
  if (this->has_entity_button_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->entity_button_info_);
  }

  // .Gamedata.PlayerEntityStorageInfo entity_storage = 6;
  if (this->has_entity_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->entity_storage_);
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  // .Gamedata.GameMainOperationMode character_pawn_type = 2;
  if (this->character_pawn_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_pawn_type());
  }

  // int32 sky_level_index = 7;
  if (this->sky_level_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sky_level_index());
  }

  // int32 character_index = 8;
  if (this->character_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->character_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerlocaioninfo()) {
    mutable_playerlocaioninfo()->::Gamedata::PlayerLocaionInfo::MergeFrom(from.playerlocaioninfo());
  }
  if (from.has_entity_button_info()) {
    mutable_entity_button_info()->::Gamedata::PlayerEntityButtonInfo::MergeFrom(from.entity_button_info());
  }
  if (from.has_entity_storage()) {
    mutable_entity_storage()->::Gamedata::PlayerEntityStorageInfo::MergeFrom(from.entity_storage());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.character_pawn_type() != 0) {
    set_character_pawn_type(from.character_pawn_type());
  }
  if (from.sky_level_index() != 0) {
    set_sky_level_index(from.sky_level_index());
  }
  if (from.character_index() != 0) {
    set_character_index(from.character_index());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  swap(playerlocaioninfo_, other->playerlocaioninfo_);
  swap(entity_button_info_, other->entity_button_info_);
  swap(entity_storage_, other->entity_storage_);
  swap(playerid_, other->playerid_);
  swap(character_pawn_type_, other->character_pawn_type_);
  swap(sky_level_index_, other->sky_level_index_);
  swap(character_index_, other->character_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEnterView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEnterView::kPlayerInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterView::PlayerEnterView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerEnterView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerEnterView)
}
PlayerEnterView::PlayerEnterView(const PlayerEnterView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      playerinfolist_(from.playerinfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerEnterView)
}

void PlayerEnterView::SharedCtor() {
  _cached_size_ = 0;
}

PlayerEnterView::~PlayerEnterView() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerEnterView)
  SharedDtor();
}

void PlayerEnterView::SharedDtor() {
}

void PlayerEnterView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterView::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEnterView& PlayerEnterView::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerEnterView();
  return *internal_default_instance();
}

PlayerEnterView* PlayerEnterView::New(::google::protobuf::Arena* arena) const {
  PlayerEnterView* n = new PlayerEnterView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerEnterView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerinfolist_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerEnterView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerEnterView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.PlayerInfo playerInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_playerinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerEnterView)
  return false;
#undef DO_
}

void PlayerEnterView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerEnterView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerInfo playerInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfolist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerEnterView)
}

::google::protobuf::uint8* PlayerEnterView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerEnterView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerInfo playerInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->playerinfolist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerEnterView)
  return target;
}

size_t PlayerEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerEnterView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.PlayerInfo playerInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->playerinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playerinfolist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEnterView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerEnterView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerEnterView)
    MergeFrom(*source);
  }
}

void PlayerEnterView::MergeFrom(const PlayerEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerinfolist_.MergeFrom(from.playerinfolist_);
}

void PlayerEnterView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterView::CopyFrom(const PlayerEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterView::IsInitialized() const {
  return true;
}

void PlayerEnterView::Swap(PlayerEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterView::InternalSwap(PlayerEnterView* other) {
  using std::swap;
  playerinfolist_.InternalSwap(&other->playerinfolist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEnterView::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerLeaveView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLeaveView::kPlayerIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLeaveView::PlayerLeaveView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerLeaveView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerLeaveView)
}
PlayerLeaveView::PlayerLeaveView(const PlayerLeaveView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      playeridlist_(from.playeridlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerLeaveView)
}

void PlayerLeaveView::SharedCtor() {
  _cached_size_ = 0;
}

PlayerLeaveView::~PlayerLeaveView() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerLeaveView)
  SharedDtor();
}

void PlayerLeaveView::SharedDtor() {
}

void PlayerLeaveView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveView::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLeaveView& PlayerLeaveView::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerLeaveView();
  return *internal_default_instance();
}

PlayerLeaveView* PlayerLeaveView::New(::google::protobuf::Arena* arena) const {
  PlayerLeaveView* n = new PlayerLeaveView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLeaveView::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerLeaveView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playeridlist_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerLeaveView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerLeaveView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 playerIdList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playeridlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_playeridlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerLeaveView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerLeaveView)
  return false;
#undef DO_
}

void PlayerLeaveView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerLeaveView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 playerIdList = 1;
  if (this->playeridlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _playeridlist_cached_byte_size_));
  }
  for (int i = 0, n = this->playeridlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->playeridlist(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerLeaveView)
}

::google::protobuf::uint8* PlayerLeaveView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerLeaveView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 playerIdList = 1;
  if (this->playeridlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _playeridlist_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->playeridlist_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerLeaveView)
  return target;
}

size_t PlayerLeaveView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerLeaveView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 playerIdList = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->playeridlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _playeridlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerLeaveView)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLeaveView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLeaveView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerLeaveView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerLeaveView)
    MergeFrom(*source);
  }
}

void PlayerLeaveView::MergeFrom(const PlayerLeaveView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerLeaveView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playeridlist_.MergeFrom(from.playeridlist_);
}

void PlayerLeaveView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerLeaveView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeaveView::CopyFrom(const PlayerLeaveView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerLeaveView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeaveView::IsInitialized() const {
  return true;
}

void PlayerLeaveView::Swap(PlayerLeaveView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLeaveView::InternalSwap(PlayerLeaveView* other) {
  using std::swap;
  playeridlist_.InternalSwap(&other->playeridlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLeaveView::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerUpdateView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerUpdateView::kPlayerInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUpdateView::PlayerUpdateView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerUpdateView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerUpdateView)
}
PlayerUpdateView::PlayerUpdateView(const PlayerUpdateView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      playerinfolist_(from.playerinfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerUpdateView)
}

void PlayerUpdateView::SharedCtor() {
  _cached_size_ = 0;
}

PlayerUpdateView::~PlayerUpdateView() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerUpdateView)
  SharedDtor();
}

void PlayerUpdateView::SharedDtor() {
}

void PlayerUpdateView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUpdateView::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerUpdateView& PlayerUpdateView::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerUpdateView();
  return *internal_default_instance();
}

PlayerUpdateView* PlayerUpdateView::New(::google::protobuf::Arena* arena) const {
  PlayerUpdateView* n = new PlayerUpdateView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerUpdateView::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerUpdateView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerinfolist_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerUpdateView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerUpdateView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.PlayerInfo playerInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_playerinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerUpdateView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerUpdateView)
  return false;
#undef DO_
}

void PlayerUpdateView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerUpdateView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerInfo playerInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfolist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerUpdateView)
}

::google::protobuf::uint8* PlayerUpdateView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerUpdateView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.PlayerInfo playerInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->playerinfolist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerUpdateView)
  return target;
}

size_t PlayerUpdateView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerUpdateView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.PlayerInfo playerInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->playerinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playerinfolist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUpdateView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerUpdateView)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUpdateView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerUpdateView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerUpdateView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerUpdateView)
    MergeFrom(*source);
  }
}

void PlayerUpdateView::MergeFrom(const PlayerUpdateView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerUpdateView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerinfolist_.MergeFrom(from.playerinfolist_);
}

void PlayerUpdateView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerUpdateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUpdateView::CopyFrom(const PlayerUpdateView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerUpdateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpdateView::IsInitialized() const {
  return true;
}

void PlayerUpdateView::Swap(PlayerUpdateView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUpdateView::InternalSwap(PlayerUpdateView* other) {
  using std::swap;
  playerinfolist_.InternalSwap(&other->playerinfolist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerUpdateView::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerUpdateLocation::InitAsDefaultInstance() {
  ::Gamedata::_PlayerUpdateLocation_default_instance_._instance.get_mutable()->playerlocaioninfo_ = const_cast< ::Gamedata::PlayerLocaionInfo*>(
      ::Gamedata::PlayerLocaionInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerUpdateLocation::kPlayerIdFieldNumber;
const int PlayerUpdateLocation::kPlayerLocaionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUpdateLocation::PlayerUpdateLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPlayerUpdateLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerUpdateLocation)
}
PlayerUpdateLocation::PlayerUpdateLocation(const PlayerUpdateLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_playerlocaioninfo()) {
    playerlocaioninfo_ = new ::Gamedata::PlayerLocaionInfo(*from.playerlocaioninfo_);
  } else {
    playerlocaioninfo_ = NULL;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerUpdateLocation)
}

void PlayerUpdateLocation::SharedCtor() {
  ::memset(&playerlocaioninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&playerlocaioninfo_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

PlayerUpdateLocation::~PlayerUpdateLocation() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerUpdateLocation)
  SharedDtor();
}

void PlayerUpdateLocation::SharedDtor() {
  if (this != internal_default_instance()) delete playerlocaioninfo_;
}

void PlayerUpdateLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUpdateLocation::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerUpdateLocation& PlayerUpdateLocation::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPlayerUpdateLocation();
  return *internal_default_instance();
}

PlayerUpdateLocation* PlayerUpdateLocation::New(::google::protobuf::Arena* arena) const {
  PlayerUpdateLocation* n = new PlayerUpdateLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerUpdateLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerUpdateLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && playerlocaioninfo_ != NULL) {
    delete playerlocaioninfo_;
  }
  playerlocaioninfo_ = NULL;
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool PlayerUpdateLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerUpdateLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerlocaioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerUpdateLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerUpdateLocation)
  return false;
#undef DO_
}

void PlayerUpdateLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerUpdateLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
  if (this->has_playerlocaioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerlocaioninfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerUpdateLocation)
}

::google::protobuf::uint8* PlayerUpdateLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerUpdateLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
  if (this->has_playerlocaioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->playerlocaioninfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerUpdateLocation)
  return target;
}

size_t PlayerUpdateLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerUpdateLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
  if (this->has_playerlocaioninfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->playerlocaioninfo_);
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUpdateLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerUpdateLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUpdateLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerUpdateLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerUpdateLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerUpdateLocation)
    MergeFrom(*source);
  }
}

void PlayerUpdateLocation::MergeFrom(const PlayerUpdateLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerUpdateLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerlocaioninfo()) {
    mutable_playerlocaioninfo()->::Gamedata::PlayerLocaionInfo::MergeFrom(from.playerlocaioninfo());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void PlayerUpdateLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerUpdateLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUpdateLocation::CopyFrom(const PlayerUpdateLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerUpdateLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpdateLocation::IsInitialized() const {
  return true;
}

void PlayerUpdateLocation::Swap(PlayerUpdateLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUpdateLocation::InternalSwap(PlayerUpdateLocation* other) {
  using std::swap;
  swap(playerlocaioninfo_, other->playerlocaioninfo_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerUpdateLocation::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdatePlayerDataRequest::InitAsDefaultInstance() {
  ::Gamedata::_UpdatePlayerDataRequest_default_instance_._instance.get_mutable()->playerinfo_ = const_cast< ::Gamedata::PlayerInfo*>(
      ::Gamedata::PlayerInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePlayerDataRequest::kPlayerInfoFieldNumber;
const int UpdatePlayerDataRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePlayerDataRequest::UpdatePlayerDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsUpdatePlayerDataRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.UpdatePlayerDataRequest)
}
UpdatePlayerDataRequest::UpdatePlayerDataRequest(const UpdatePlayerDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_playerinfo()) {
    playerinfo_ = new ::Gamedata::PlayerInfo(*from.playerinfo_);
  } else {
    playerinfo_ = NULL;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.UpdatePlayerDataRequest)
}

void UpdatePlayerDataRequest::SharedCtor() {
  ::memset(&playerinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&playerinfo_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

UpdatePlayerDataRequest::~UpdatePlayerDataRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.UpdatePlayerDataRequest)
  SharedDtor();
}

void UpdatePlayerDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete playerinfo_;
}

void UpdatePlayerDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerDataRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdatePlayerDataRequest& UpdatePlayerDataRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsUpdatePlayerDataRequest();
  return *internal_default_instance();
}

UpdatePlayerDataRequest* UpdatePlayerDataRequest::New(::google::protobuf::Arena* arena) const {
  UpdatePlayerDataRequest* n = new UpdatePlayerDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdatePlayerDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.UpdatePlayerDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) {
    delete playerinfo_;
  }
  playerinfo_ = NULL;
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool UpdatePlayerDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.UpdatePlayerDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.PlayerInfo playerInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.UpdatePlayerDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.UpdatePlayerDataRequest)
  return false;
#undef DO_
}

void UpdatePlayerDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.UpdatePlayerDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.PlayerInfo playerInfo = 1;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playerinfo_, output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.UpdatePlayerDataRequest)
}

::google::protobuf::uint8* UpdatePlayerDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.UpdatePlayerDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.PlayerInfo playerInfo = 1;
  if (this->has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->playerinfo_, deterministic, target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.UpdatePlayerDataRequest)
  return target;
}

size_t UpdatePlayerDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.UpdatePlayerDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.PlayerInfo playerInfo = 1;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->playerinfo_);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.UpdatePlayerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdatePlayerDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.UpdatePlayerDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.UpdatePlayerDataRequest)
    MergeFrom(*source);
  }
}

void UpdatePlayerDataRequest::MergeFrom(const UpdatePlayerDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.UpdatePlayerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerinfo()) {
    mutable_playerinfo()->::Gamedata::PlayerInfo::MergeFrom(from.playerinfo());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void UpdatePlayerDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.UpdatePlayerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerDataRequest::CopyFrom(const UpdatePlayerDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.UpdatePlayerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerDataRequest::IsInitialized() const {
  return true;
}

void UpdatePlayerDataRequest::Swap(UpdatePlayerDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePlayerDataRequest::InternalSwap(UpdatePlayerDataRequest* other) {
  using std::swap;
  swap(playerinfo_, other->playerinfo_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePlayerDataRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateLocationRequest::InitAsDefaultInstance() {
  ::Gamedata::_UpdateLocationRequest_default_instance_._instance.get_mutable()->playerlocaioninfo_ = const_cast< ::Gamedata::PlayerLocaionInfo*>(
      ::Gamedata::PlayerLocaionInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateLocationRequest::kPlayerIdFieldNumber;
const int UpdateLocationRequest::kPlayerLocaionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateLocationRequest::UpdateLocationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsUpdateLocationRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.UpdateLocationRequest)
}
UpdateLocationRequest::UpdateLocationRequest(const UpdateLocationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_playerlocaioninfo()) {
    playerlocaioninfo_ = new ::Gamedata::PlayerLocaionInfo(*from.playerlocaioninfo_);
  } else {
    playerlocaioninfo_ = NULL;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.UpdateLocationRequest)
}

void UpdateLocationRequest::SharedCtor() {
  ::memset(&playerlocaioninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&playerlocaioninfo_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

UpdateLocationRequest::~UpdateLocationRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.UpdateLocationRequest)
  SharedDtor();
}

void UpdateLocationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete playerlocaioninfo_;
}

void UpdateLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateLocationRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateLocationRequest& UpdateLocationRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsUpdateLocationRequest();
  return *internal_default_instance();
}

UpdateLocationRequest* UpdateLocationRequest::New(::google::protobuf::Arena* arena) const {
  UpdateLocationRequest* n = new UpdateLocationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.UpdateLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && playerlocaioninfo_ != NULL) {
    delete playerlocaioninfo_;
  }
  playerlocaioninfo_ = NULL;
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool UpdateLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.UpdateLocationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerlocaioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.UpdateLocationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.UpdateLocationRequest)
  return false;
#undef DO_
}

void UpdateLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.UpdateLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
  if (this->has_playerlocaioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerlocaioninfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.UpdateLocationRequest)
}

::google::protobuf::uint8* UpdateLocationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.UpdateLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
  if (this->has_playerlocaioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->playerlocaioninfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.UpdateLocationRequest)
  return target;
}

size_t UpdateLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.UpdateLocationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.PlayerLocaionInfo playerLocaionInfo = 2;
  if (this->has_playerlocaioninfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->playerlocaioninfo_);
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.UpdateLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLocationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateLocationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.UpdateLocationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.UpdateLocationRequest)
    MergeFrom(*source);
  }
}

void UpdateLocationRequest::MergeFrom(const UpdateLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.UpdateLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerlocaioninfo()) {
    mutable_playerlocaioninfo()->::Gamedata::PlayerLocaionInfo::MergeFrom(from.playerlocaioninfo());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void UpdateLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.UpdateLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLocationRequest::CopyFrom(const UpdateLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.UpdateLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLocationRequest::IsInitialized() const {
  return true;
}

void UpdateLocationRequest::Swap(UpdateLocationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateLocationRequest::InternalSwap(UpdateLocationRequest* other) {
  using std::swap;
  swap(playerlocaioninfo_, other->playerlocaioninfo_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateLocationRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeJiugonggeRequest::InitAsDefaultInstance() {
  ::Gamedata::_ChangeJiugonggeRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
}
void ChangeJiugonggeRequest::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeJiugonggeRequest::kPlayerIdFieldNumber;
const int ChangeJiugonggeRequest::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeJiugonggeRequest::ChangeJiugonggeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsChangeJiugonggeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.ChangeJiugonggeRequest)
}
ChangeJiugonggeRequest::ChangeJiugonggeRequest(const ChangeJiugonggeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gamedata::FVector(*from.location_);
  } else {
    location_ = NULL;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.ChangeJiugonggeRequest)
}

void ChangeJiugonggeRequest::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&location_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

ChangeJiugonggeRequest::~ChangeJiugonggeRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.ChangeJiugonggeRequest)
  SharedDtor();
}

void ChangeJiugonggeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void ChangeJiugonggeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeJiugonggeRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeJiugonggeRequest& ChangeJiugonggeRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsChangeJiugonggeRequest();
  return *internal_default_instance();
}

ChangeJiugonggeRequest* ChangeJiugonggeRequest::New(::google::protobuf::Arena* arena) const {
  ChangeJiugonggeRequest* n = new ChangeJiugonggeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeJiugonggeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.ChangeJiugonggeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool ChangeJiugonggeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.ChangeJiugonggeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.ChangeJiugonggeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.ChangeJiugonggeRequest)
  return false;
#undef DO_
}

void ChangeJiugonggeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.ChangeJiugonggeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.ChangeJiugonggeRequest)
}

::google::protobuf::uint8* ChangeJiugonggeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.ChangeJiugonggeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.ChangeJiugonggeRequest)
  return target;
}

size_t ChangeJiugonggeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.ChangeJiugonggeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeJiugonggeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.ChangeJiugonggeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeJiugonggeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeJiugonggeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.ChangeJiugonggeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.ChangeJiugonggeRequest)
    MergeFrom(*source);
  }
}

void ChangeJiugonggeRequest::MergeFrom(const ChangeJiugonggeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.ChangeJiugonggeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gamedata::FVector::MergeFrom(from.location());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void ChangeJiugonggeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.ChangeJiugonggeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeJiugonggeRequest::CopyFrom(const ChangeJiugonggeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.ChangeJiugonggeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeJiugonggeRequest::IsInitialized() const {
  return true;
}

void ChangeJiugonggeRequest::Swap(ChangeJiugonggeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeJiugonggeRequest::InternalSwap(ChangeJiugonggeRequest* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeJiugonggeRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntitySplineAlone::InitAsDefaultInstance() {
  ::Gamedata::_EntitySplineAlone_default_instance_._instance.get_mutable()->transform_s_ = const_cast< ::Gamedata::FTransform_s*>(
      ::Gamedata::FTransform_s::internal_default_instance());
}
void EntitySplineAlone::clear_transform_s() {
  if (GetArenaNoVirtual() == NULL && transform_s_ != NULL) {
    delete transform_s_;
  }
  transform_s_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntitySplineAlone::kTransformSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntitySplineAlone::EntitySplineAlone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntitySplineAlone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntitySplineAlone)
}
EntitySplineAlone::EntitySplineAlone(const EntitySplineAlone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform_s()) {
    transform_s_ = new ::Gamedata::FTransform_s(*from.transform_s_);
  } else {
    transform_s_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntitySplineAlone)
}

void EntitySplineAlone::SharedCtor() {
  transform_s_ = NULL;
  _cached_size_ = 0;
}

EntitySplineAlone::~EntitySplineAlone() {
  // @@protoc_insertion_point(destructor:Gamedata.EntitySplineAlone)
  SharedDtor();
}

void EntitySplineAlone::SharedDtor() {
  if (this != internal_default_instance()) delete transform_s_;
}

void EntitySplineAlone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitySplineAlone::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntitySplineAlone& EntitySplineAlone::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntitySplineAlone();
  return *internal_default_instance();
}

EntitySplineAlone* EntitySplineAlone::New(::google::protobuf::Arena* arena) const {
  EntitySplineAlone* n = new EntitySplineAlone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntitySplineAlone::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntitySplineAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transform_s_ != NULL) {
    delete transform_s_;
  }
  transform_s_ = NULL;
  _internal_metadata_.Clear();
}

bool EntitySplineAlone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntitySplineAlone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.FTransform_s transform_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntitySplineAlone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntitySplineAlone)
  return false;
#undef DO_
}

void EntitySplineAlone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntitySplineAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform_s transform_s = 1;
  if (this->has_transform_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_s_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntitySplineAlone)
}

::google::protobuf::uint8* EntitySplineAlone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntitySplineAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform_s transform_s = 1;
  if (this->has_transform_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->transform_s_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntitySplineAlone)
  return target;
}

size_t EntitySplineAlone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntitySplineAlone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FTransform_s transform_s = 1;
  if (this->has_transform_s()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transform_s_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySplineAlone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntitySplineAlone)
  GOOGLE_DCHECK_NE(&from, this);
  const EntitySplineAlone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntitySplineAlone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntitySplineAlone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntitySplineAlone)
    MergeFrom(*source);
  }
}

void EntitySplineAlone::MergeFrom(const EntitySplineAlone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntitySplineAlone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform_s()) {
    mutable_transform_s()->::Gamedata::FTransform_s::MergeFrom(from.transform_s());
  }
}

void EntitySplineAlone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntitySplineAlone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySplineAlone::CopyFrom(const EntitySplineAlone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntitySplineAlone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySplineAlone::IsInitialized() const {
  return true;
}

void EntitySplineAlone::Swap(EntitySplineAlone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntitySplineAlone::InternalSwap(EntitySplineAlone* other) {
  using std::swap;
  swap(transform_s_, other->transform_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntitySplineAlone::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityLaser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityLaser::EntityLaser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityLaser();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityLaser)
}
EntityLaser::EntityLaser(const EntityLaser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityLaser)
}

void EntityLaser::SharedCtor() {
  _cached_size_ = 0;
}

EntityLaser::~EntityLaser() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityLaser)
  SharedDtor();
}

void EntityLaser::SharedDtor() {
}

void EntityLaser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityLaser::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityLaser& EntityLaser::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityLaser();
  return *internal_default_instance();
}

EntityLaser* EntityLaser::New(::google::protobuf::Arena* arena) const {
  EntityLaser* n = new EntityLaser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityLaser::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EntityLaser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityLaser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityLaser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityLaser)
  return false;
#undef DO_
}

void EntityLaser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityLaser)
}

::google::protobuf::uint8* EntityLaser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityLaser)
  return target;
}

size_t EntityLaser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityLaser)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityLaser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityLaser)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityLaser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityLaser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityLaser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityLaser)
    MergeFrom(*source);
  }
}

void EntityLaser::MergeFrom(const EntityLaser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityLaser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EntityLaser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityLaser::CopyFrom(const EntityLaser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityLaser::IsInitialized() const {
  return true;
}

void EntityLaser::Swap(EntityLaser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityLaser::InternalSwap(EntityLaser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityLaser::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityMusic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMusic::EntityMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityMusic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityMusic)
}
EntityMusic::EntityMusic(const EntityMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityMusic)
}

void EntityMusic::SharedCtor() {
  _cached_size_ = 0;
}

EntityMusic::~EntityMusic() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityMusic)
  SharedDtor();
}

void EntityMusic::SharedDtor() {
}

void EntityMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMusic::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMusic& EntityMusic::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityMusic();
  return *internal_default_instance();
}

EntityMusic* EntityMusic::New(::google::protobuf::Arena* arena) const {
  EntityMusic* n = new EntityMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EntityMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityMusic)
  return false;
#undef DO_
}

void EntityMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityMusic)
}

::google::protobuf::uint8* EntityMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityMusic)
  return target;
}

size_t EntityMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityMusic)
    MergeFrom(*source);
  }
}

void EntityMusic::MergeFrom(const EntityMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EntityMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMusic::CopyFrom(const EntityMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMusic::IsInitialized() const {
  return true;
}

void EntityMusic::Swap(EntityMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMusic::InternalSwap(EntityMusic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMusic::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityScenesTimelineGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityScenesTimelineGroup::kGroupIdFieldNumber;
const int EntityScenesTimelineGroup::kGroupNameFieldNumber;
const int EntityScenesTimelineGroup::kEntityIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityScenesTimelineGroup::EntityScenesTimelineGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityScenesTimelineGroup)
}
EntityScenesTimelineGroup::EntityScenesTimelineGroup(const EntityScenesTimelineGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityidlist_(from.entityidlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.groupname().size() > 0) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityScenesTimelineGroup)
}

void EntityScenesTimelineGroup::SharedCtor() {
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
  _cached_size_ = 0;
}

EntityScenesTimelineGroup::~EntityScenesTimelineGroup() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityScenesTimelineGroup)
  SharedDtor();
}

void EntityScenesTimelineGroup::SharedDtor() {
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityScenesTimelineGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityScenesTimelineGroup::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityScenesTimelineGroup& EntityScenesTimelineGroup::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineGroup();
  return *internal_default_instance();
}

EntityScenesTimelineGroup* EntityScenesTimelineGroup::New(::google::protobuf::Arena* arena) const {
  EntityScenesTimelineGroup* n = new EntityScenesTimelineGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityScenesTimelineGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityScenesTimelineGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityidlist_.Clear();
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
  _internal_metadata_.Clear();
}

bool EntityScenesTimelineGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityScenesTimelineGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 groupId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityScenesTimelineGroup.groupName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 entityIdList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entityidlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_entityidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityScenesTimelineGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityScenesTimelineGroup)
  return false;
#undef DO_
}

void EntityScenesTimelineGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityScenesTimelineGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupId = 1;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // string groupName = 2;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityScenesTimelineGroup.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // repeated int32 entityIdList = 3;
  if (this->entityidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _entityidlist_cached_byte_size_));
  }
  for (int i = 0, n = this->entityidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->entityidlist(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityScenesTimelineGroup)
}

::google::protobuf::uint8* EntityScenesTimelineGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityScenesTimelineGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupId = 1;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // string groupName = 2;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityScenesTimelineGroup.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated int32 entityIdList = 3;
  if (this->entityidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _entityidlist_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->entityidlist_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityScenesTimelineGroup)
  return target;
}

size_t EntityScenesTimelineGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityScenesTimelineGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 entityIdList = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->entityidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entityidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string groupName = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  // int32 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityScenesTimelineGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityScenesTimelineGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityScenesTimelineGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityScenesTimelineGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityScenesTimelineGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityScenesTimelineGroup)
    MergeFrom(*source);
  }
}

void EntityScenesTimelineGroup::MergeFrom(const EntityScenesTimelineGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityScenesTimelineGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityidlist_.MergeFrom(from.entityidlist_);
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void EntityScenesTimelineGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityScenesTimelineGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityScenesTimelineGroup::CopyFrom(const EntityScenesTimelineGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityScenesTimelineGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityScenesTimelineGroup::IsInitialized() const {
  return true;
}

void EntityScenesTimelineGroup::Swap(EntityScenesTimelineGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityScenesTimelineGroup::InternalSwap(EntityScenesTimelineGroup* other) {
  using std::swap;
  entityidlist_.InternalSwap(&other->entityidlist_);
  groupname_.Swap(&other->groupname_);
  swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityScenesTimelineGroup::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityScenesTimelineNode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityScenesTimelineNode::kEntityIdFieldNumber;
const int EntityScenesTimelineNode::kGroupIdFieldNumber;
const int EntityScenesTimelineNode::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityScenesTimelineNode::EntityScenesTimelineNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityScenesTimelineNode)
}
EntityScenesTimelineNode::EntityScenesTimelineNode(const EntityScenesTimelineNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entityid_, &from.entityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&entityid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityScenesTimelineNode)
}

void EntityScenesTimelineNode::SharedCtor() {
  ::memset(&entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&entityid_)) + sizeof(type_));
  _cached_size_ = 0;
}

EntityScenesTimelineNode::~EntityScenesTimelineNode() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityScenesTimelineNode)
  SharedDtor();
}

void EntityScenesTimelineNode::SharedDtor() {
}

void EntityScenesTimelineNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityScenesTimelineNode::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityScenesTimelineNode& EntityScenesTimelineNode::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineNode();
  return *internal_default_instance();
}

EntityScenesTimelineNode* EntityScenesTimelineNode::New(::google::protobuf::Arena* arena) const {
  EntityScenesTimelineNode* n = new EntityScenesTimelineNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityScenesTimelineNode::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityScenesTimelineNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&entityid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool EntityScenesTimelineNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityScenesTimelineNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 entityId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityScenesTimelineNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityScenesTimelineNode)
  return false;
#undef DO_
}

void EntityScenesTimelineNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityScenesTimelineNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 entityId = 1;
  if (this->entityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  // int32 groupId = 2;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityScenesTimelineNode)
}

::google::protobuf::uint8* EntityScenesTimelineNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityScenesTimelineNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 entityId = 1;
  if (this->entityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  // int32 groupId = 2;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityScenesTimelineNode)
  return target;
}

size_t EntityScenesTimelineNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityScenesTimelineNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 entityId = 1;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entityid());
  }

  // int32 groupId = 2;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityScenesTimelineNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityScenesTimelineNode)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityScenesTimelineNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityScenesTimelineNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityScenesTimelineNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityScenesTimelineNode)
    MergeFrom(*source);
  }
}

void EntityScenesTimelineNode::MergeFrom(const EntityScenesTimelineNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityScenesTimelineNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entityid() != 0) {
    set_entityid(from.entityid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EntityScenesTimelineNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityScenesTimelineNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityScenesTimelineNode::CopyFrom(const EntityScenesTimelineNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityScenesTimelineNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityScenesTimelineNode::IsInitialized() const {
  return true;
}

void EntityScenesTimelineNode::Swap(EntityScenesTimelineNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityScenesTimelineNode::InternalSwap(EntityScenesTimelineNode* other) {
  using std::swap;
  swap(entityid_, other->entityid_);
  swap(groupid_, other->groupid_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityScenesTimelineNode::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse() {}
EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::EntityScenesTimelineAlone_EntityMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::MergeFrom(const EntityScenesTimelineAlone_EntityMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[19];
}
void EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EntityScenesTimelineAlone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityScenesTimelineAlone::kTimelineNameFieldNumber;
const int EntityScenesTimelineAlone::kEntityMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityScenesTimelineAlone::EntityScenesTimelineAlone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineAlone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityScenesTimelineAlone)
}
EntityScenesTimelineAlone::EntityScenesTimelineAlone(const EntityScenesTimelineAlone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entitymap_.MergeFrom(from.entitymap_);
  timelinename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timelinename().size() > 0) {
    timelinename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timelinename_);
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityScenesTimelineAlone)
}

void EntityScenesTimelineAlone::SharedCtor() {
  timelinename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EntityScenesTimelineAlone::~EntityScenesTimelineAlone() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityScenesTimelineAlone)
  SharedDtor();
}

void EntityScenesTimelineAlone::SharedDtor() {
  timelinename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityScenesTimelineAlone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityScenesTimelineAlone::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityScenesTimelineAlone& EntityScenesTimelineAlone::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineAlone();
  return *internal_default_instance();
}

EntityScenesTimelineAlone* EntityScenesTimelineAlone::New(::google::protobuf::Arena* arena) const {
  EntityScenesTimelineAlone* n = new EntityScenesTimelineAlone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityScenesTimelineAlone::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityScenesTimelineAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entitymap_.Clear();
  timelinename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EntityScenesTimelineAlone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityScenesTimelineAlone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string timelineName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timelinename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timelinename().data(), static_cast<int>(this->timelinename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityScenesTimelineAlone.timelineName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .Gamedata.EntityScenesTimelineNode> entityMap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          EntityScenesTimelineAlone_EntityMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EntityScenesTimelineAlone_EntityMapEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode > > parser(&entitymap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityScenesTimelineAlone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityScenesTimelineAlone)
  return false;
#undef DO_
}

void EntityScenesTimelineAlone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityScenesTimelineAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timelineName = 2;
  if (this->timelinename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timelinename().data(), static_cast<int>(this->timelinename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityScenesTimelineAlone.timelineName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timelinename(), output);
  }

  // map<int32, .Gamedata.EntityScenesTimelineNode> entityMap = 3;
  if (!this->entitymap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->entitymap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->entitymap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_iterator
          it = this->entitymap().begin();
          it != this->entitymap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityScenesTimelineAlone_EntityMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entitymap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityScenesTimelineAlone_EntityMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_iterator
          it = this->entitymap().begin();
          it != this->entitymap().end(); ++it) {
        entry.reset(entitymap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityScenesTimelineAlone)
}

::google::protobuf::uint8* EntityScenesTimelineAlone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityScenesTimelineAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timelineName = 2;
  if (this->timelinename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timelinename().data(), static_cast<int>(this->timelinename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityScenesTimelineAlone.timelineName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timelinename(), target);
  }

  // map<int32, .Gamedata.EntityScenesTimelineNode> entityMap = 3;
  if (!this->entitymap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->entitymap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->entitymap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_iterator
          it = this->entitymap().begin();
          it != this->entitymap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityScenesTimelineAlone_EntityMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entitymap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityScenesTimelineAlone_EntityMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_iterator
          it = this->entitymap().begin();
          it != this->entitymap().end(); ++it) {
        entry.reset(entitymap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityScenesTimelineAlone)
  return target;
}

size_t EntityScenesTimelineAlone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityScenesTimelineAlone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.EntityScenesTimelineNode> entityMap = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entitymap_size());
  {
    ::google::protobuf::scoped_ptr<EntityScenesTimelineAlone_EntityMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineNode >::const_iterator
        it = this->entitymap().begin();
        it != this->entitymap().end(); ++it) {
      entry.reset(entitymap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string timelineName = 2;
  if (this->timelinename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timelinename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityScenesTimelineAlone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityScenesTimelineAlone)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityScenesTimelineAlone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityScenesTimelineAlone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityScenesTimelineAlone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityScenesTimelineAlone)
    MergeFrom(*source);
  }
}

void EntityScenesTimelineAlone::MergeFrom(const EntityScenesTimelineAlone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityScenesTimelineAlone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entitymap_.MergeFrom(from.entitymap_);
  if (from.timelinename().size() > 0) {

    timelinename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timelinename_);
  }
}

void EntityScenesTimelineAlone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityScenesTimelineAlone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityScenesTimelineAlone::CopyFrom(const EntityScenesTimelineAlone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityScenesTimelineAlone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityScenesTimelineAlone::IsInitialized() const {
  return true;
}

void EntityScenesTimelineAlone::Swap(EntityScenesTimelineAlone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityScenesTimelineAlone::InternalSwap(EntityScenesTimelineAlone* other) {
  using std::swap;
  entitymap_.Swap(&other->entitymap_);
  timelinename_.Swap(&other->timelinename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityScenesTimelineAlone::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse() {}
EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::EntityScenesTimelineTotal_GroupMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::MergeFrom(const EntityScenesTimelineTotal_GroupMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[21];
}
void EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EntityScenesTimelineTotal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityScenesTimelineTotal::kIsPlayFieldNumber;
const int EntityScenesTimelineTotal::kPlayTimeFieldNumber;
const int EntityScenesTimelineTotal::kGroupMapFieldNumber;
const int EntityScenesTimelineTotal::kAloneFieldNumber;
const int EntityScenesTimelineTotal::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityScenesTimelineTotal::EntityScenesTimelineTotal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineTotal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityScenesTimelineTotal)
}
EntityScenesTimelineTotal::EntityScenesTimelineTotal(const EntityScenesTimelineTotal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alone_(from.alone_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupmap_.MergeFrom(from.groupmap_);
  ::memcpy(&isplay_, &from.isplay_,
    static_cast<size_t>(reinterpret_cast<char*>(&totaltime_) -
    reinterpret_cast<char*>(&isplay_)) + sizeof(totaltime_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityScenesTimelineTotal)
}

void EntityScenesTimelineTotal::SharedCtor() {
  ::memset(&isplay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totaltime_) -
      reinterpret_cast<char*>(&isplay_)) + sizeof(totaltime_));
  _cached_size_ = 0;
}

EntityScenesTimelineTotal::~EntityScenesTimelineTotal() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityScenesTimelineTotal)
  SharedDtor();
}

void EntityScenesTimelineTotal::SharedDtor() {
}

void EntityScenesTimelineTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityScenesTimelineTotal::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityScenesTimelineTotal& EntityScenesTimelineTotal::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityScenesTimelineTotal();
  return *internal_default_instance();
}

EntityScenesTimelineTotal* EntityScenesTimelineTotal::New(::google::protobuf::Arena* arena) const {
  EntityScenesTimelineTotal* n = new EntityScenesTimelineTotal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityScenesTimelineTotal::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityScenesTimelineTotal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupmap_.Clear();
  alone_.Clear();
  ::memset(&isplay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totaltime_) -
      reinterpret_cast<char*>(&isplay_)) + sizeof(totaltime_));
  _internal_metadata_.Clear();
}

bool EntityScenesTimelineTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityScenesTimelineTotal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isPlay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float playTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .Gamedata.EntityScenesTimelineGroup> groupMap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          EntityScenesTimelineTotal_GroupMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EntityScenesTimelineTotal_GroupMapEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup > > parser(&groupmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.EntityScenesTimelineAlone alone = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_alone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float totalTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityScenesTimelineTotal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityScenesTimelineTotal)
  return false;
#undef DO_
}

void EntityScenesTimelineTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityScenesTimelineTotal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isplay(), output);
  }

  // float playTime = 2;
  if (this->playtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->playtime(), output);
  }

  // map<int32, .Gamedata.EntityScenesTimelineGroup> groupMap = 3;
  if (!this->groupmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->groupmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->groupmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_iterator
          it = this->groupmap().begin();
          it != this->groupmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityScenesTimelineTotal_GroupMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(groupmap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityScenesTimelineTotal_GroupMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_iterator
          it = this->groupmap().begin();
          it != this->groupmap().end(); ++it) {
        entry.reset(groupmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // repeated .Gamedata.EntityScenesTimelineAlone alone = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alone_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alone(static_cast<int>(i)), output);
  }

  // float totalTime = 5;
  if (this->totaltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->totaltime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityScenesTimelineTotal)
}

::google::protobuf::uint8* EntityScenesTimelineTotal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityScenesTimelineTotal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isplay(), target);
  }

  // float playTime = 2;
  if (this->playtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->playtime(), target);
  }

  // map<int32, .Gamedata.EntityScenesTimelineGroup> groupMap = 3;
  if (!this->groupmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->groupmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->groupmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_iterator
          it = this->groupmap().begin();
          it != this->groupmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityScenesTimelineTotal_GroupMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(groupmap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityScenesTimelineTotal_GroupMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_iterator
          it = this->groupmap().begin();
          it != this->groupmap().end(); ++it) {
        entry.reset(groupmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .Gamedata.EntityScenesTimelineAlone alone = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alone_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->alone(static_cast<int>(i)), deterministic, target);
  }

  // float totalTime = 5;
  if (this->totaltime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->totaltime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityScenesTimelineTotal)
  return target;
}

size_t EntityScenesTimelineTotal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityScenesTimelineTotal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.EntityScenesTimelineGroup> groupMap = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->groupmap_size());
  {
    ::google::protobuf::scoped_ptr<EntityScenesTimelineTotal_GroupMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityScenesTimelineGroup >::const_iterator
        it = this->groupmap().begin();
        it != this->groupmap().end(); ++it) {
      entry.reset(groupmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .Gamedata.EntityScenesTimelineAlone alone = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->alone_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alone(static_cast<int>(i)));
    }
  }

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    total_size += 1 + 1;
  }

  // float playTime = 2;
  if (this->playtime() != 0) {
    total_size += 1 + 4;
  }

  // float totalTime = 5;
  if (this->totaltime() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityScenesTimelineTotal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityScenesTimelineTotal)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityScenesTimelineTotal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityScenesTimelineTotal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityScenesTimelineTotal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityScenesTimelineTotal)
    MergeFrom(*source);
  }
}

void EntityScenesTimelineTotal::MergeFrom(const EntityScenesTimelineTotal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityScenesTimelineTotal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupmap_.MergeFrom(from.groupmap_);
  alone_.MergeFrom(from.alone_);
  if (from.isplay() != 0) {
    set_isplay(from.isplay());
  }
  if (from.playtime() != 0) {
    set_playtime(from.playtime());
  }
  if (from.totaltime() != 0) {
    set_totaltime(from.totaltime());
  }
}

void EntityScenesTimelineTotal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityScenesTimelineTotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityScenesTimelineTotal::CopyFrom(const EntityScenesTimelineTotal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityScenesTimelineTotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityScenesTimelineTotal::IsInitialized() const {
  return true;
}

void EntityScenesTimelineTotal::Swap(EntityScenesTimelineTotal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityScenesTimelineTotal::InternalSwap(EntityScenesTimelineTotal* other) {
  using std::swap;
  groupmap_.Swap(&other->groupmap_);
  alone_.InternalSwap(&other->alone_);
  swap(isplay_, other->isplay_);
  swap(playtime_, other->playtime_);
  swap(totaltime_, other->totaltime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityScenesTimelineTotal::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityMoveTimelinePoint::InitAsDefaultInstance() {
  ::Gamedata::_EntityMoveTimelinePoint_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
  ::Gamedata::_EntityMoveTimelinePoint_default_instance_._instance.get_mutable()->rotator_ = const_cast< ::Gamedata::FRotator*>(
      ::Gamedata::FRotator::internal_default_instance());
  ::Gamedata::_EntityMoveTimelinePoint_default_instance_._instance.get_mutable()->scale_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
}
void EntityMoveTimelinePoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
void EntityMoveTimelinePoint::clear_rotator() {
  if (GetArenaNoVirtual() == NULL && rotator_ != NULL) {
    delete rotator_;
  }
  rotator_ = NULL;
}
void EntityMoveTimelinePoint::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMoveTimelinePoint::kUniqueMarkFieldNumber;
const int EntityMoveTimelinePoint::kLocationFieldNumber;
const int EntityMoveTimelinePoint::kRotatorFieldNumber;
const int EntityMoveTimelinePoint::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMoveTimelinePoint::EntityMoveTimelinePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityMoveTimelinePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityMoveTimelinePoint)
}
EntityMoveTimelinePoint::EntityMoveTimelinePoint(const EntityMoveTimelinePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gamedata::FVector(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_rotator()) {
    rotator_ = new ::Gamedata::FRotator(*from.rotator_);
  } else {
    rotator_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::Gamedata::FVector(*from.scale_);
  } else {
    scale_ = NULL;
  }
  uniquemark_ = from.uniquemark_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityMoveTimelinePoint)
}

void EntityMoveTimelinePoint::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniquemark_) -
      reinterpret_cast<char*>(&location_)) + sizeof(uniquemark_));
  _cached_size_ = 0;
}

EntityMoveTimelinePoint::~EntityMoveTimelinePoint() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityMoveTimelinePoint)
  SharedDtor();
}

void EntityMoveTimelinePoint::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotator_;
  if (this != internal_default_instance()) delete scale_;
}

void EntityMoveTimelinePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMoveTimelinePoint::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMoveTimelinePoint& EntityMoveTimelinePoint::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityMoveTimelinePoint();
  return *internal_default_instance();
}

EntityMoveTimelinePoint* EntityMoveTimelinePoint::New(::google::protobuf::Arena* arena) const {
  EntityMoveTimelinePoint* n = new EntityMoveTimelinePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMoveTimelinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityMoveTimelinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotator_ != NULL) {
    delete rotator_;
  }
  rotator_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  uniquemark_ = 0;
  _internal_metadata_.Clear();
}

bool EntityMoveTimelinePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityMoveTimelinePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uniqueMark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniquemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FRotator rotator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityMoveTimelinePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityMoveTimelinePoint)
  return false;
#undef DO_
}

void EntityMoveTimelinePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityMoveTimelinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uniqueMark = 1;
  if (this->uniquemark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniquemark(), output);
  }

  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // .Gamedata.FRotator rotator = 3;
  if (this->has_rotator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotator_, output);
  }

  // .Gamedata.FVector scale = 5;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->scale_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityMoveTimelinePoint)
}

::google::protobuf::uint8* EntityMoveTimelinePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityMoveTimelinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uniqueMark = 1;
  if (this->uniquemark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uniquemark(), target);
  }

  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->location_, deterministic, target);
  }

  // .Gamedata.FRotator rotator = 3;
  if (this->has_rotator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->rotator_, deterministic, target);
  }

  // .Gamedata.FVector scale = 5;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->scale_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityMoveTimelinePoint)
  return target;
}

size_t EntityMoveTimelinePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityMoveTimelinePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .Gamedata.FRotator rotator = 3;
  if (this->has_rotator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotator_);
  }

  // .Gamedata.FVector scale = 5;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scale_);
  }

  // int32 uniqueMark = 1;
  if (this->uniquemark() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uniquemark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMoveTimelinePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityMoveTimelinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMoveTimelinePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMoveTimelinePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityMoveTimelinePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityMoveTimelinePoint)
    MergeFrom(*source);
  }
}

void EntityMoveTimelinePoint::MergeFrom(const EntityMoveTimelinePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityMoveTimelinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gamedata::FVector::MergeFrom(from.location());
  }
  if (from.has_rotator()) {
    mutable_rotator()->::Gamedata::FRotator::MergeFrom(from.rotator());
  }
  if (from.has_scale()) {
    mutable_scale()->::Gamedata::FVector::MergeFrom(from.scale());
  }
  if (from.uniquemark() != 0) {
    set_uniquemark(from.uniquemark());
  }
}

void EntityMoveTimelinePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityMoveTimelinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMoveTimelinePoint::CopyFrom(const EntityMoveTimelinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityMoveTimelinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMoveTimelinePoint::IsInitialized() const {
  return true;
}

void EntityMoveTimelinePoint::Swap(EntityMoveTimelinePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMoveTimelinePoint::InternalSwap(EntityMoveTimelinePoint* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(rotator_, other->rotator_);
  swap(scale_, other->scale_);
  swap(uniquemark_, other->uniquemark_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMoveTimelinePoint::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EntityMoveTimeline_PointMapEntry_DoNotUse::EntityMoveTimeline_PointMapEntry_DoNotUse() {}
EntityMoveTimeline_PointMapEntry_DoNotUse::EntityMoveTimeline_PointMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EntityMoveTimeline_PointMapEntry_DoNotUse::MergeFrom(const EntityMoveTimeline_PointMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EntityMoveTimeline_PointMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[24];
}
void EntityMoveTimeline_PointMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EntityMoveTimeline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMoveTimeline::kNameFieldNumber;
const int EntityMoveTimeline::kPointMapFieldNumber;
const int EntityMoveTimeline::kEntityMoveTimelineEndOfPlayFieldNumber;
const int EntityMoveTimeline::kIsReflectionFieldNumber;
const int EntityMoveTimeline::kSizeFieldNumber;
const int EntityMoveTimeline::kLenghtFieldNumber;
const int EntityMoveTimeline::kPlayLenghtFieldNumber;
const int EntityMoveTimeline::kIsMoveFieldNumber;
const int EntityMoveTimeline::kMoveYawFieldNumber;
const int EntityMoveTimeline::kScenesTimelineIndexFieldNumber;
const int EntityMoveTimeline::kEntityListIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMoveTimeline::EntityMoveTimeline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityMoveTimeline();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityMoveTimeline)
}
EntityMoveTimeline::EntityMoveTimeline(const EntityMoveTimeline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pointmap_.MergeFrom(from.pointmap_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&entitymovetimelineendofplay_, &from.entitymovetimelineendofplay_,
    static_cast<size_t>(reinterpret_cast<char*>(&entitylistindex_) -
    reinterpret_cast<char*>(&entitymovetimelineendofplay_)) + sizeof(entitylistindex_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityMoveTimeline)
}

void EntityMoveTimeline::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entitymovetimelineendofplay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entitylistindex_) -
      reinterpret_cast<char*>(&entitymovetimelineendofplay_)) + sizeof(entitylistindex_));
  _cached_size_ = 0;
}

EntityMoveTimeline::~EntityMoveTimeline() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityMoveTimeline)
  SharedDtor();
}

void EntityMoveTimeline::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityMoveTimeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMoveTimeline::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMoveTimeline& EntityMoveTimeline::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityMoveTimeline();
  return *internal_default_instance();
}

EntityMoveTimeline* EntityMoveTimeline::New(::google::protobuf::Arena* arena) const {
  EntityMoveTimeline* n = new EntityMoveTimeline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMoveTimeline::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityMoveTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pointmap_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entitymovetimelineendofplay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entitylistindex_) -
      reinterpret_cast<char*>(&entitymovetimelineendofplay_)) + sizeof(entitylistindex_));
  _internal_metadata_.Clear();
}

bool EntityMoveTimeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityMoveTimeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityMoveTimeline.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .Gamedata.EntityMoveTimelinePoint> pointMap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          EntityMoveTimeline_PointMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EntityMoveTimeline_PointMapEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint > > parser(&pointmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityMoveTimelineEndOfPlay EntityMoveTimelineEndOfPlay = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entitymovetimelineendofplay(static_cast< ::Gamedata::EntityMoveTimelineEndOfPlay >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isReflection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreflection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lenght = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenght_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float playLenght = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playlenght_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMove = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool moveYaw = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moveyaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scenesTimelineIndex = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scenestimelineindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 entityListIndex = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entitylistindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityMoveTimeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityMoveTimeline)
  return false;
#undef DO_
}

void EntityMoveTimeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityMoveTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityMoveTimeline.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<int32, .Gamedata.EntityMoveTimelinePoint> pointMap = 2;
  if (!this->pointmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->pointmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->pointmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_iterator
          it = this->pointmap().begin();
          it != this->pointmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityMoveTimeline_PointMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(pointmap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityMoveTimeline_PointMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_iterator
          it = this->pointmap().begin();
          it != this->pointmap().end(); ++it) {
        entry.reset(pointmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // .Gamedata.EntityMoveTimelineEndOfPlay EntityMoveTimelineEndOfPlay = 5;
  if (this->entitymovetimelineendofplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->entitymovetimelineendofplay(), output);
  }

  // bool isReflection = 6;
  if (this->isreflection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isreflection(), output);
  }

  // float size = 7;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->size(), output);
  }

  // int32 lenght = 8;
  if (this->lenght() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lenght(), output);
  }

  // float playLenght = 9;
  if (this->playlenght() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->playlenght(), output);
  }

  // bool isMove = 10;
  if (this->ismove() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ismove(), output);
  }

  // bool moveYaw = 11;
  if (this->moveyaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->moveyaw(), output);
  }

  // int32 scenesTimelineIndex = 12;
  if (this->scenestimelineindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->scenestimelineindex(), output);
  }

  // int32 entityListIndex = 13;
  if (this->entitylistindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->entitylistindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityMoveTimeline)
}

::google::protobuf::uint8* EntityMoveTimeline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityMoveTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityMoveTimeline.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<int32, .Gamedata.EntityMoveTimelinePoint> pointMap = 2;
  if (!this->pointmap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->pointmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->pointmap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_iterator
          it = this->pointmap().begin();
          it != this->pointmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityMoveTimeline_PointMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(pointmap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityMoveTimeline_PointMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_iterator
          it = this->pointmap().begin();
          it != this->pointmap().end(); ++it) {
        entry.reset(pointmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // .Gamedata.EntityMoveTimelineEndOfPlay EntityMoveTimelineEndOfPlay = 5;
  if (this->entitymovetimelineendofplay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->entitymovetimelineendofplay(), target);
  }

  // bool isReflection = 6;
  if (this->isreflection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isreflection(), target);
  }

  // float size = 7;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->size(), target);
  }

  // int32 lenght = 8;
  if (this->lenght() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lenght(), target);
  }

  // float playLenght = 9;
  if (this->playlenght() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->playlenght(), target);
  }

  // bool isMove = 10;
  if (this->ismove() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ismove(), target);
  }

  // bool moveYaw = 11;
  if (this->moveyaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->moveyaw(), target);
  }

  // int32 scenesTimelineIndex = 12;
  if (this->scenestimelineindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->scenestimelineindex(), target);
  }

  // int32 entityListIndex = 13;
  if (this->entitylistindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->entitylistindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityMoveTimeline)
  return target;
}

size_t EntityMoveTimeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityMoveTimeline)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.EntityMoveTimelinePoint> pointMap = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pointmap_size());
  {
    ::google::protobuf::scoped_ptr<EntityMoveTimeline_PointMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMoveTimelinePoint >::const_iterator
        it = this->pointmap().begin();
        it != this->pointmap().end(); ++it) {
      entry.reset(pointmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Gamedata.EntityMoveTimelineEndOfPlay EntityMoveTimelineEndOfPlay = 5;
  if (this->entitymovetimelineendofplay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entitymovetimelineendofplay());
  }

  // float size = 7;
  if (this->size() != 0) {
    total_size += 1 + 4;
  }

  // int32 lenght = 8;
  if (this->lenght() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lenght());
  }

  // float playLenght = 9;
  if (this->playlenght() != 0) {
    total_size += 1 + 4;
  }

  // bool isReflection = 6;
  if (this->isreflection() != 0) {
    total_size += 1 + 1;
  }

  // bool isMove = 10;
  if (this->ismove() != 0) {
    total_size += 1 + 1;
  }

  // bool moveYaw = 11;
  if (this->moveyaw() != 0) {
    total_size += 1 + 1;
  }

  // int32 scenesTimelineIndex = 12;
  if (this->scenestimelineindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scenestimelineindex());
  }

  // int32 entityListIndex = 13;
  if (this->entitylistindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entitylistindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMoveTimeline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityMoveTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMoveTimeline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMoveTimeline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityMoveTimeline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityMoveTimeline)
    MergeFrom(*source);
  }
}

void EntityMoveTimeline::MergeFrom(const EntityMoveTimeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityMoveTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pointmap_.MergeFrom(from.pointmap_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.entitymovetimelineendofplay() != 0) {
    set_entitymovetimelineendofplay(from.entitymovetimelineendofplay());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.lenght() != 0) {
    set_lenght(from.lenght());
  }
  if (from.playlenght() != 0) {
    set_playlenght(from.playlenght());
  }
  if (from.isreflection() != 0) {
    set_isreflection(from.isreflection());
  }
  if (from.ismove() != 0) {
    set_ismove(from.ismove());
  }
  if (from.moveyaw() != 0) {
    set_moveyaw(from.moveyaw());
  }
  if (from.scenestimelineindex() != 0) {
    set_scenestimelineindex(from.scenestimelineindex());
  }
  if (from.entitylistindex() != 0) {
    set_entitylistindex(from.entitylistindex());
  }
}

void EntityMoveTimeline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityMoveTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMoveTimeline::CopyFrom(const EntityMoveTimeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityMoveTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMoveTimeline::IsInitialized() const {
  return true;
}

void EntityMoveTimeline::Swap(EntityMoveTimeline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMoveTimeline::InternalSwap(EntityMoveTimeline* other) {
  using std::swap;
  pointmap_.Swap(&other->pointmap_);
  name_.Swap(&other->name_);
  swap(entitymovetimelineendofplay_, other->entitymovetimelineendofplay_);
  swap(size_, other->size_);
  swap(lenght_, other->lenght_);
  swap(playlenght_, other->playlenght_);
  swap(isreflection_, other->isreflection_);
  swap(ismove_, other->ismove_);
  swap(moveyaw_, other->moveyaw_);
  swap(scenestimelineindex_, other->scenestimelineindex_);
  swap(entitylistindex_, other->entitylistindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMoveTimeline::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityPythonInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityPythonInfo::kErrFieldNumber;
const int EntityPythonInfo::kPyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityPythonInfo::EntityPythonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityPythonInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityPythonInfo)
}
EntityPythonInfo::EntityPythonInfo(const EntityPythonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  py_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.py().size() > 0) {
    py_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.py_);
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityPythonInfo)
}

void EntityPythonInfo::SharedCtor() {
  py_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = 0;
  _cached_size_ = 0;
}

EntityPythonInfo::~EntityPythonInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityPythonInfo)
  SharedDtor();
}

void EntityPythonInfo::SharedDtor() {
  py_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityPythonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityPythonInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityPythonInfo& EntityPythonInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityPythonInfo();
  return *internal_default_instance();
}

EntityPythonInfo* EntityPythonInfo::New(::google::protobuf::Arena* arena) const {
  EntityPythonInfo* n = new EntityPythonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityPythonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityPythonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  py_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = 0;
  _internal_metadata_.Clear();
}

bool EntityPythonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityPythonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.EntityPythonErrorType err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_err(static_cast< ::Gamedata::EntityPythonErrorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string py = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_py()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->py().data(), static_cast<int>(this->py().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityPythonInfo.py"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityPythonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityPythonInfo)
  return false;
#undef DO_
}

void EntityPythonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityPythonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityPythonErrorType err = 1;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err(), output);
  }

  // string py = 2;
  if (this->py().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->py().data(), static_cast<int>(this->py().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityPythonInfo.py");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->py(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityPythonInfo)
}

::google::protobuf::uint8* EntityPythonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityPythonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityPythonErrorType err = 1;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err(), target);
  }

  // string py = 2;
  if (this->py().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->py().data(), static_cast<int>(this->py().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityPythonInfo.py");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->py(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityPythonInfo)
  return target;
}

size_t EntityPythonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityPythonInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string py = 2;
  if (this->py().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->py());
  }

  // .Gamedata.EntityPythonErrorType err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityPythonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityPythonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityPythonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityPythonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityPythonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityPythonInfo)
    MergeFrom(*source);
  }
}

void EntityPythonInfo::MergeFrom(const EntityPythonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityPythonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.py().size() > 0) {

    py_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.py_);
  }
  if (from.err() != 0) {
    set_err(from.err());
  }
}

void EntityPythonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityPythonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityPythonInfo::CopyFrom(const EntityPythonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityPythonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityPythonInfo::IsInitialized() const {
  return true;
}

void EntityPythonInfo::Swap(EntityPythonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityPythonInfo::InternalSwap(EntityPythonInfo* other) {
  using std::swap;
  py_.Swap(&other->py_);
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityPythonInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityCommandAuto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityCommandAuto::EntityCommandAuto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityCommandAuto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityCommandAuto)
}
EntityCommandAuto::EntityCommandAuto(const EntityCommandAuto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityCommandAuto)
}

void EntityCommandAuto::SharedCtor() {
  _cached_size_ = 0;
}

EntityCommandAuto::~EntityCommandAuto() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityCommandAuto)
  SharedDtor();
}

void EntityCommandAuto::SharedDtor() {
}

void EntityCommandAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityCommandAuto::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityCommandAuto& EntityCommandAuto::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityCommandAuto();
  return *internal_default_instance();
}

EntityCommandAuto* EntityCommandAuto::New(::google::protobuf::Arena* arena) const {
  EntityCommandAuto* n = new EntityCommandAuto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityCommandAuto::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityCommandAuto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EntityCommandAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityCommandAuto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityCommandAuto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityCommandAuto)
  return false;
#undef DO_
}

void EntityCommandAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityCommandAuto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityCommandAuto)
}

::google::protobuf::uint8* EntityCommandAuto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityCommandAuto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityCommandAuto)
  return target;
}

size_t EntityCommandAuto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityCommandAuto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityCommandAuto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityCommandAuto)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityCommandAuto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityCommandAuto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityCommandAuto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityCommandAuto)
    MergeFrom(*source);
  }
}

void EntityCommandAuto::MergeFrom(const EntityCommandAuto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityCommandAuto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EntityCommandAuto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityCommandAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityCommandAuto::CopyFrom(const EntityCommandAuto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityCommandAuto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCommandAuto::IsInitialized() const {
  return true;
}

void EntityCommandAuto::Swap(EntityCommandAuto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityCommandAuto::InternalSwap(EntityCommandAuto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityCommandAuto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityCommandCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityCommandCommand::kCommandNameFieldNumber;
const int EntityCommandCommand::kStartTimeFieldNumber;
const int EntityCommandCommand::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityCommandCommand::EntityCommandCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityCommandCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityCommandCommand)
}
EntityCommandCommand::EntityCommandCommand(const EntityCommandCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.command_name().size() > 0) {
    command_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_name_);
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityCommandCommand)
}

void EntityCommandCommand::SharedCtor() {
  command_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

EntityCommandCommand::~EntityCommandCommand() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityCommandCommand)
  SharedDtor();
}

void EntityCommandCommand::SharedDtor() {
  command_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityCommandCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityCommandCommand::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityCommandCommand& EntityCommandCommand::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityCommandCommand();
  return *internal_default_instance();
}

EntityCommandCommand* EntityCommandCommand::New(::google::protobuf::Arena* arena) const {
  EntityCommandCommand* n = new EntityCommandCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityCommandCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityCommandCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool EntityCommandCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityCommandCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string command_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command_name().data(), static_cast<int>(this->command_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityCommandCommand.command_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityCommandCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityCommandCommand)
  return false;
#undef DO_
}

void EntityCommandCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityCommandCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command_name = 2;
  if (this->command_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command_name().data(), static_cast<int>(this->command_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityCommandCommand.command_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->command_name(), output);
  }

  // float start_time = 3;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_time(), output);
  }

  // float end_time = 4;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityCommandCommand)
}

::google::protobuf::uint8* EntityCommandCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityCommandCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command_name = 2;
  if (this->command_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command_name().data(), static_cast<int>(this->command_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityCommandCommand.command_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_name(), target);
  }

  // float start_time = 3;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start_time(), target);
  }

  // float end_time = 4;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityCommandCommand)
  return target;
}

size_t EntityCommandCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityCommandCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string command_name = 2;
  if (this->command_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command_name());
  }

  // float start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 + 4;
  }

  // float end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityCommandCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityCommandCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityCommandCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityCommandCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityCommandCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityCommandCommand)
    MergeFrom(*source);
  }
}

void EntityCommandCommand::MergeFrom(const EntityCommandCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityCommandCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_name().size() > 0) {

    command_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_name_);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void EntityCommandCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityCommandCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityCommandCommand::CopyFrom(const EntityCommandCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityCommandCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCommandCommand::IsInitialized() const {
  return true;
}

void EntityCommandCommand::Swap(EntityCommandCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityCommandCommand::InternalSwap(EntityCommandCommand* other) {
  using std::swap;
  command_name_.Swap(&other->command_name_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityCommandCommand::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityCommandInteractive::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityCommandInteractive::kIsFixedPositionFieldNumber;
const int EntityCommandInteractive::kIsOpenFieldNumber;
const int EntityCommandInteractive::kStartTimeFieldNumber;
const int EntityCommandInteractive::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityCommandInteractive::EntityCommandInteractive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityCommandInteractive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityCommandInteractive)
}
EntityCommandInteractive::EntityCommandInteractive(const EntityCommandInteractive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_fixed_position_, &from.is_fixed_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&is_fixed_position_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityCommandInteractive)
}

void EntityCommandInteractive::SharedCtor() {
  ::memset(&is_fixed_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&is_fixed_position_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

EntityCommandInteractive::~EntityCommandInteractive() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityCommandInteractive)
  SharedDtor();
}

void EntityCommandInteractive::SharedDtor() {
}

void EntityCommandInteractive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityCommandInteractive::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityCommandInteractive& EntityCommandInteractive::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityCommandInteractive();
  return *internal_default_instance();
}

EntityCommandInteractive* EntityCommandInteractive::New(::google::protobuf::Arena* arena) const {
  EntityCommandInteractive* n = new EntityCommandInteractive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityCommandInteractive::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityCommandInteractive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_fixed_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&is_fixed_position_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool EntityCommandInteractive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityCommandInteractive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_fixed_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fixed_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityCommandInteractive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityCommandInteractive)
  return false;
#undef DO_
}

void EntityCommandInteractive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityCommandInteractive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_fixed_position = 1;
  if (this->is_fixed_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_fixed_position(), output);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  // float start_time = 3;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_time(), output);
  }

  // float end_time = 4;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityCommandInteractive)
}

::google::protobuf::uint8* EntityCommandInteractive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityCommandInteractive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_fixed_position = 1;
  if (this->is_fixed_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_fixed_position(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  // float start_time = 3;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start_time(), target);
  }

  // float end_time = 4;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityCommandInteractive)
  return target;
}

size_t EntityCommandInteractive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityCommandInteractive)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_fixed_position = 1;
  if (this->is_fixed_position() != 0) {
    total_size += 1 + 1;
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // float start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 + 4;
  }

  // float end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityCommandInteractive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityCommandInteractive)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityCommandInteractive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityCommandInteractive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityCommandInteractive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityCommandInteractive)
    MergeFrom(*source);
  }
}

void EntityCommandInteractive::MergeFrom(const EntityCommandInteractive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityCommandInteractive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_fixed_position() != 0) {
    set_is_fixed_position(from.is_fixed_position());
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void EntityCommandInteractive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityCommandInteractive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityCommandInteractive::CopyFrom(const EntityCommandInteractive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityCommandInteractive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCommandInteractive::IsInitialized() const {
  return true;
}

void EntityCommandInteractive::Swap(EntityCommandInteractive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityCommandInteractive::InternalSwap(EntityCommandInteractive* other) {
  using std::swap;
  swap(is_fixed_position_, other->is_fixed_position_);
  swap(is_open_, other->is_open_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityCommandInteractive::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityCommandTrigger::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityCommandTrigger::kIsOpenFieldNumber;
const int EntityCommandTrigger::kStartTimeFieldNumber;
const int EntityCommandTrigger::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityCommandTrigger::EntityCommandTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityCommandTrigger();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityCommandTrigger)
}
EntityCommandTrigger::EntityCommandTrigger(const EntityCommandTrigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_open_, &from.is_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&is_open_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityCommandTrigger)
}

void EntityCommandTrigger::SharedCtor() {
  ::memset(&is_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

EntityCommandTrigger::~EntityCommandTrigger() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityCommandTrigger)
  SharedDtor();
}

void EntityCommandTrigger::SharedDtor() {
}

void EntityCommandTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityCommandTrigger::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityCommandTrigger& EntityCommandTrigger::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityCommandTrigger();
  return *internal_default_instance();
}

EntityCommandTrigger* EntityCommandTrigger::New(::google::protobuf::Arena* arena) const {
  EntityCommandTrigger* n = new EntityCommandTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityCommandTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityCommandTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool EntityCommandTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityCommandTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityCommandTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityCommandTrigger)
  return false;
#undef DO_
}

void EntityCommandTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityCommandTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_open(), output);
  }

  // float start_time = 2;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_time(), output);
  }

  // float end_time = 3;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityCommandTrigger)
}

::google::protobuf::uint8* EntityCommandTrigger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityCommandTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_open(), target);
  }

  // float start_time = 2;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start_time(), target);
  }

  // float end_time = 3;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityCommandTrigger)
  return target;
}

size_t EntityCommandTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityCommandTrigger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // float start_time = 2;
  if (this->start_time() != 0) {
    total_size += 1 + 4;
  }

  // float end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityCommandTrigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityCommandTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityCommandTrigger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityCommandTrigger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityCommandTrigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityCommandTrigger)
    MergeFrom(*source);
  }
}

void EntityCommandTrigger::MergeFrom(const EntityCommandTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityCommandTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void EntityCommandTrigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityCommandTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityCommandTrigger::CopyFrom(const EntityCommandTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityCommandTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCommandTrigger::IsInitialized() const {
  return true;
}

void EntityCommandTrigger::Swap(EntityCommandTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityCommandTrigger::InternalSwap(EntityCommandTrigger* other) {
  using std::swap;
  swap(is_open_, other->is_open_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityCommandTrigger::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityCommandInfo::InitAsDefaultInstance() {
  ::Gamedata::_EntityCommandInfo_default_instance_._instance.get_mutable()->interactive_ = const_cast< ::Gamedata::EntityCommandInteractive*>(
      ::Gamedata::EntityCommandInteractive::internal_default_instance());
  ::Gamedata::_EntityCommandInfo_default_instance_._instance.get_mutable()->trigger_ = const_cast< ::Gamedata::EntityCommandTrigger*>(
      ::Gamedata::EntityCommandTrigger::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityCommandInfo::kTypeFieldNumber;
const int EntityCommandInfo::kCommandListFieldNumber;
const int EntityCommandInfo::kInteractiveFieldNumber;
const int EntityCommandInfo::kTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityCommandInfo::EntityCommandInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityCommandInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityCommandInfo)
}
EntityCommandInfo::EntityCommandInfo(const EntityCommandInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      command_list_(from.command_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interactive()) {
    interactive_ = new ::Gamedata::EntityCommandInteractive(*from.interactive_);
  } else {
    interactive_ = NULL;
  }
  if (from.has_trigger()) {
    trigger_ = new ::Gamedata::EntityCommandTrigger(*from.trigger_);
  } else {
    trigger_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityCommandInfo)
}

void EntityCommandInfo::SharedCtor() {
  ::memset(&interactive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&interactive_)) + sizeof(type_));
  _cached_size_ = 0;
}

EntityCommandInfo::~EntityCommandInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityCommandInfo)
  SharedDtor();
}

void EntityCommandInfo::SharedDtor() {
  if (this != internal_default_instance()) delete interactive_;
  if (this != internal_default_instance()) delete trigger_;
}

void EntityCommandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityCommandInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityCommandInfo& EntityCommandInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityCommandInfo();
  return *internal_default_instance();
}

EntityCommandInfo* EntityCommandInfo::New(::google::protobuf::Arena* arena) const {
  EntityCommandInfo* n = new EntityCommandInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityCommandInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityCommandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_list_.Clear();
  if (GetArenaNoVirtual() == NULL && interactive_ != NULL) {
    delete interactive_;
  }
  interactive_ = NULL;
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool EntityCommandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityCommandInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.EntityCommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Gamedata::EntityCommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.EntityCommandCommand command_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_command_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityCommandInteractive interactive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interactive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityCommandTrigger trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityCommandInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityCommandInfo)
  return false;
#undef DO_
}

void EntityCommandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityCommandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityCommandType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Gamedata.EntityCommandCommand command_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->command_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command_list(static_cast<int>(i)), output);
  }

  // .Gamedata.EntityCommandInteractive interactive = 3;
  if (this->has_interactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interactive_, output);
  }

  // .Gamedata.EntityCommandTrigger trigger = 4;
  if (this->has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->trigger_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityCommandInfo)
}

::google::protobuf::uint8* EntityCommandInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityCommandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityCommandType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Gamedata.EntityCommandCommand command_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->command_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->command_list(static_cast<int>(i)), deterministic, target);
  }

  // .Gamedata.EntityCommandInteractive interactive = 3;
  if (this->has_interactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->interactive_, deterministic, target);
  }

  // .Gamedata.EntityCommandTrigger trigger = 4;
  if (this->has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->trigger_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityCommandInfo)
  return target;
}

size_t EntityCommandInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityCommandInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityCommandCommand command_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->command_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->command_list(static_cast<int>(i)));
    }
  }

  // .Gamedata.EntityCommandInteractive interactive = 3;
  if (this->has_interactive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interactive_);
  }

  // .Gamedata.EntityCommandTrigger trigger = 4;
  if (this->has_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trigger_);
  }

  // .Gamedata.EntityCommandType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityCommandInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityCommandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityCommandInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityCommandInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityCommandInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityCommandInfo)
    MergeFrom(*source);
  }
}

void EntityCommandInfo::MergeFrom(const EntityCommandInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityCommandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_list_.MergeFrom(from.command_list_);
  if (from.has_interactive()) {
    mutable_interactive()->::Gamedata::EntityCommandInteractive::MergeFrom(from.interactive());
  }
  if (from.has_trigger()) {
    mutable_trigger()->::Gamedata::EntityCommandTrigger::MergeFrom(from.trigger());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EntityCommandInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityCommandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityCommandInfo::CopyFrom(const EntityCommandInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityCommandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCommandInfo::IsInitialized() const {
  return true;
}

void EntityCommandInfo::Swap(EntityCommandInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityCommandInfo::InternalSwap(EntityCommandInfo* other) {
  using std::swap;
  command_list_.InternalSwap(&other->command_list_);
  swap(interactive_, other->interactive_);
  swap(trigger_, other->trigger_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityCommandInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityTransformTimelinePoint::InitAsDefaultInstance() {
  ::Gamedata::_EntityTransformTimelinePoint_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
  ::Gamedata::_EntityTransformTimelinePoint_default_instance_._instance.get_mutable()->rotator_ = const_cast< ::Gamedata::FRotator*>(
      ::Gamedata::FRotator::internal_default_instance());
  ::Gamedata::_EntityTransformTimelinePoint_default_instance_._instance.get_mutable()->color_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
}
void EntityTransformTimelinePoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
void EntityTransformTimelinePoint::clear_rotator() {
  if (GetArenaNoVirtual() == NULL && rotator_ != NULL) {
    delete rotator_;
  }
  rotator_ = NULL;
}
void EntityTransformTimelinePoint::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityTransformTimelinePoint::kUniqueMarkFieldNumber;
const int EntityTransformTimelinePoint::kLocationFieldNumber;
const int EntityTransformTimelinePoint::kRotatorFieldNumber;
const int EntityTransformTimelinePoint::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityTransformTimelinePoint::EntityTransformTimelinePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityTransformTimelinePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityTransformTimelinePoint)
}
EntityTransformTimelinePoint::EntityTransformTimelinePoint(const EntityTransformTimelinePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gamedata::FVector(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_rotator()) {
    rotator_ = new ::Gamedata::FRotator(*from.rotator_);
  } else {
    rotator_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::Gamedata::FVector(*from.color_);
  } else {
    color_ = NULL;
  }
  uniquemark_ = from.uniquemark_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityTransformTimelinePoint)
}

void EntityTransformTimelinePoint::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniquemark_) -
      reinterpret_cast<char*>(&location_)) + sizeof(uniquemark_));
  _cached_size_ = 0;
}

EntityTransformTimelinePoint::~EntityTransformTimelinePoint() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityTransformTimelinePoint)
  SharedDtor();
}

void EntityTransformTimelinePoint::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotator_;
  if (this != internal_default_instance()) delete color_;
}

void EntityTransformTimelinePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityTransformTimelinePoint::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityTransformTimelinePoint& EntityTransformTimelinePoint::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityTransformTimelinePoint();
  return *internal_default_instance();
}

EntityTransformTimelinePoint* EntityTransformTimelinePoint::New(::google::protobuf::Arena* arena) const {
  EntityTransformTimelinePoint* n = new EntityTransformTimelinePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityTransformTimelinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityTransformTimelinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotator_ != NULL) {
    delete rotator_;
  }
  rotator_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  uniquemark_ = 0;
  _internal_metadata_.Clear();
}

bool EntityTransformTimelinePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityTransformTimelinePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uniqueMark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniquemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FRotator rotator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityTransformTimelinePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityTransformTimelinePoint)
  return false;
#undef DO_
}

void EntityTransformTimelinePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityTransformTimelinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uniqueMark = 1;
  if (this->uniquemark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniquemark(), output);
  }

  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // .Gamedata.FRotator rotator = 3;
  if (this->has_rotator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotator_, output);
  }

  // .Gamedata.FVector color = 4;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->color_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityTransformTimelinePoint)
}

::google::protobuf::uint8* EntityTransformTimelinePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityTransformTimelinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uniqueMark = 1;
  if (this->uniquemark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uniquemark(), target);
  }

  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->location_, deterministic, target);
  }

  // .Gamedata.FRotator rotator = 3;
  if (this->has_rotator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->rotator_, deterministic, target);
  }

  // .Gamedata.FVector color = 4;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->color_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityTransformTimelinePoint)
  return target;
}

size_t EntityTransformTimelinePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityTransformTimelinePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FVector location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .Gamedata.FRotator rotator = 3;
  if (this->has_rotator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotator_);
  }

  // .Gamedata.FVector color = 4;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);
  }

  // int32 uniqueMark = 1;
  if (this->uniquemark() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uniquemark());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityTransformTimelinePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityTransformTimelinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityTransformTimelinePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityTransformTimelinePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityTransformTimelinePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityTransformTimelinePoint)
    MergeFrom(*source);
  }
}

void EntityTransformTimelinePoint::MergeFrom(const EntityTransformTimelinePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityTransformTimelinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gamedata::FVector::MergeFrom(from.location());
  }
  if (from.has_rotator()) {
    mutable_rotator()->::Gamedata::FRotator::MergeFrom(from.rotator());
  }
  if (from.has_color()) {
    mutable_color()->::Gamedata::FVector::MergeFrom(from.color());
  }
  if (from.uniquemark() != 0) {
    set_uniquemark(from.uniquemark());
  }
}

void EntityTransformTimelinePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityTransformTimelinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityTransformTimelinePoint::CopyFrom(const EntityTransformTimelinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityTransformTimelinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityTransformTimelinePoint::IsInitialized() const {
  return true;
}

void EntityTransformTimelinePoint::Swap(EntityTransformTimelinePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityTransformTimelinePoint::InternalSwap(EntityTransformTimelinePoint* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(rotator_, other->rotator_);
  swap(color_, other->color_);
  swap(uniquemark_, other->uniquemark_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityTransformTimelinePoint::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EntityTransformTimeline_PointMapEntry_DoNotUse::EntityTransformTimeline_PointMapEntry_DoNotUse() {}
EntityTransformTimeline_PointMapEntry_DoNotUse::EntityTransformTimeline_PointMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EntityTransformTimeline_PointMapEntry_DoNotUse::MergeFrom(const EntityTransformTimeline_PointMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EntityTransformTimeline_PointMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[33];
}
void EntityTransformTimeline_PointMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EntityTransformTimeline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityTransformTimeline::kPointMapFieldNumber;
const int EntityTransformTimeline::kIsLoopFieldNumber;
const int EntityTransformTimeline::kVersionFieldNumber;
const int EntityTransformTimeline::kTimelineHighlightFieldNumber;
const int EntityTransformTimeline::kLocationTeleportFieldNumber;
const int EntityTransformTimeline::kColorTeleportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityTransformTimeline::EntityTransformTimeline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityTransformTimeline();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityTransformTimeline)
}
EntityTransformTimeline::EntityTransformTimeline(const EntityTransformTimeline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  point_map_.MergeFrom(from.point_map_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_teleport_) -
    reinterpret_cast<char*>(&version_)) + sizeof(color_teleport_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityTransformTimeline)
}

void EntityTransformTimeline::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_teleport_) -
      reinterpret_cast<char*>(&version_)) + sizeof(color_teleport_));
  _cached_size_ = 0;
}

EntityTransformTimeline::~EntityTransformTimeline() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityTransformTimeline)
  SharedDtor();
}

void EntityTransformTimeline::SharedDtor() {
}

void EntityTransformTimeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityTransformTimeline::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityTransformTimeline& EntityTransformTimeline::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityTransformTimeline();
  return *internal_default_instance();
}

EntityTransformTimeline* EntityTransformTimeline::New(::google::protobuf::Arena* arena) const {
  EntityTransformTimeline* n = new EntityTransformTimeline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityTransformTimeline::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityTransformTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_map_.Clear();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_teleport_) -
      reinterpret_cast<char*>(&version_)) + sizeof(color_teleport_));
  _internal_metadata_.Clear();
}

bool EntityTransformTimeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityTransformTimeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .Gamedata.EntityTransformTimelinePoint> point_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          EntityTransformTimeline_PointMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EntityTransformTimeline_PointMapEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint > > parser(&point_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_loop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_loop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.TimelineHighlightType timeline_highlight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeline_highlight(static_cast< ::Gamedata::TimelineHighlightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool location_teleport = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &location_teleport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool color_teleport = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &color_teleport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityTransformTimeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityTransformTimeline)
  return false;
#undef DO_
}

void EntityTransformTimeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityTransformTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .Gamedata.EntityTransformTimelinePoint> point_map = 1;
  if (!this->point_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->point_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->point_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_iterator
          it = this->point_map().begin();
          it != this->point_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityTransformTimeline_PointMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(point_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityTransformTimeline_PointMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_iterator
          it = this->point_map().begin();
          it != this->point_map().end(); ++it) {
        entry.reset(point_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // bool is_loop = 2;
  if (this->is_loop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_loop(), output);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // .Gamedata.TimelineHighlightType timeline_highlight = 4;
  if (this->timeline_highlight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->timeline_highlight(), output);
  }

  // bool location_teleport = 5;
  if (this->location_teleport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->location_teleport(), output);
  }

  // bool color_teleport = 6;
  if (this->color_teleport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->color_teleport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityTransformTimeline)
}

::google::protobuf::uint8* EntityTransformTimeline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityTransformTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .Gamedata.EntityTransformTimelinePoint> point_map = 1;
  if (!this->point_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->point_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->point_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_iterator
          it = this->point_map().begin();
          it != this->point_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EntityTransformTimeline_PointMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(point_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<EntityTransformTimeline_PointMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_iterator
          it = this->point_map().begin();
          it != this->point_map().end(); ++it) {
        entry.reset(point_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // bool is_loop = 2;
  if (this->is_loop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_loop(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // .Gamedata.TimelineHighlightType timeline_highlight = 4;
  if (this->timeline_highlight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->timeline_highlight(), target);
  }

  // bool location_teleport = 5;
  if (this->location_teleport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->location_teleport(), target);
  }

  // bool color_teleport = 6;
  if (this->color_teleport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->color_teleport(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityTransformTimeline)
  return target;
}

size_t EntityTransformTimeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityTransformTimeline)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.EntityTransformTimelinePoint> point_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->point_map_size());
  {
    ::google::protobuf::scoped_ptr<EntityTransformTimeline_PointMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityTransformTimelinePoint >::const_iterator
        it = this->point_map().begin();
        it != this->point_map().end(); ++it) {
      entry.reset(point_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // .Gamedata.TimelineHighlightType timeline_highlight = 4;
  if (this->timeline_highlight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeline_highlight());
  }

  // bool is_loop = 2;
  if (this->is_loop() != 0) {
    total_size += 1 + 1;
  }

  // bool location_teleport = 5;
  if (this->location_teleport() != 0) {
    total_size += 1 + 1;
  }

  // bool color_teleport = 6;
  if (this->color_teleport() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityTransformTimeline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityTransformTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityTransformTimeline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityTransformTimeline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityTransformTimeline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityTransformTimeline)
    MergeFrom(*source);
  }
}

void EntityTransformTimeline::MergeFrom(const EntityTransformTimeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityTransformTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_map_.MergeFrom(from.point_map_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.timeline_highlight() != 0) {
    set_timeline_highlight(from.timeline_highlight());
  }
  if (from.is_loop() != 0) {
    set_is_loop(from.is_loop());
  }
  if (from.location_teleport() != 0) {
    set_location_teleport(from.location_teleport());
  }
  if (from.color_teleport() != 0) {
    set_color_teleport(from.color_teleport());
  }
}

void EntityTransformTimeline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityTransformTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityTransformTimeline::CopyFrom(const EntityTransformTimeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityTransformTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityTransformTimeline::IsInitialized() const {
  return true;
}

void EntityTransformTimeline::Swap(EntityTransformTimeline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityTransformTimeline::InternalSwap(EntityTransformTimeline* other) {
  using std::swap;
  point_map_.Swap(&other->point_map_);
  swap(version_, other->version_);
  swap(timeline_highlight_, other->timeline_highlight_);
  swap(is_loop_, other->is_loop_);
  swap(location_teleport_, other->location_teleport_);
  swap(color_teleport_, other->color_teleport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityTransformTimeline::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityChildInfo::InitAsDefaultInstance() {
  ::Gamedata::_EntityChildInfo_default_instance_._instance.get_mutable()->transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
  ::Gamedata::_EntityChildInfo_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::Gamedata::EntityMMeshInfo*>(
      ::Gamedata::EntityMMeshInfo::internal_default_instance());
  ::Gamedata::_EntityChildInfo_default_instance_._instance.get_mutable()->image_ = const_cast< ::Gamedata::EntityImageInfo*>(
      ::Gamedata::EntityImageInfo::internal_default_instance());
}
void EntityChildInfo::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityChildInfo::kTransformFieldNumber;
const int EntityChildInfo::kMeshFieldNumber;
const int EntityChildInfo::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityChildInfo::EntityChildInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityChildInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityChildInfo)
}
EntityChildInfo::EntityChildInfo(const EntityChildInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::Gamedata::FTransform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  if (from.has_mesh()) {
    mesh_ = new ::Gamedata::EntityMMeshInfo(*from.mesh_);
  } else {
    mesh_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::Gamedata::EntityImageInfo(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityChildInfo)
}

void EntityChildInfo::SharedCtor() {
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(image_));
  _cached_size_ = 0;
}

EntityChildInfo::~EntityChildInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityChildInfo)
  SharedDtor();
}

void EntityChildInfo::SharedDtor() {
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete mesh_;
  if (this != internal_default_instance()) delete image_;
}

void EntityChildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityChildInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityChildInfo& EntityChildInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityChildInfo();
  return *internal_default_instance();
}

EntityChildInfo* EntityChildInfo::New(::google::protobuf::Arena* arena) const {
  EntityChildInfo* n = new EntityChildInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityChildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityChildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) {
    delete mesh_;
  }
  mesh_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  _internal_metadata_.Clear();
}

bool EntityChildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityChildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.FTransform transform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityMMeshInfo mesh = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mesh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityImageInfo image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityChildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityChildInfo)
  return false;
#undef DO_
}

void EntityChildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityChildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform transform = 2;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transform_, output);
  }

  // .Gamedata.EntityMMeshInfo mesh = 3;
  if (this->has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mesh_, output);
  }

  // .Gamedata.EntityImageInfo image = 4;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->image_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityChildInfo)
}

::google::protobuf::uint8* EntityChildInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityChildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform transform = 2;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->transform_, deterministic, target);
  }

  // .Gamedata.EntityMMeshInfo mesh = 3;
  if (this->has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mesh_, deterministic, target);
  }

  // .Gamedata.EntityImageInfo image = 4;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->image_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityChildInfo)
  return target;
}

size_t EntityChildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityChildInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FTransform transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transform_);
  }

  // .Gamedata.EntityMMeshInfo mesh = 3;
  if (this->has_mesh()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mesh_);
  }

  // .Gamedata.EntityImageInfo image = 4;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityChildInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityChildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityChildInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityChildInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityChildInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityChildInfo)
    MergeFrom(*source);
  }
}

void EntityChildInfo::MergeFrom(const EntityChildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityChildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::Gamedata::FTransform::MergeFrom(from.transform());
  }
  if (from.has_mesh()) {
    mutable_mesh()->::Gamedata::EntityMMeshInfo::MergeFrom(from.mesh());
  }
  if (from.has_image()) {
    mutable_image()->::Gamedata::EntityImageInfo::MergeFrom(from.image());
  }
}

void EntityChildInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityChildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityChildInfo::CopyFrom(const EntityChildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityChildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityChildInfo::IsInitialized() const {
  return true;
}

void EntityChildInfo::Swap(EntityChildInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityChildInfo::InternalSwap(EntityChildInfo* other) {
  using std::swap;
  swap(transform_, other->transform_);
  swap(mesh_, other->mesh_);
  swap(image_, other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityChildInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityMMeshInfo::InitAsDefaultInstance() {
  ::Gamedata::_EntityMMeshInfo_default_instance_._instance.get_mutable()->color_ = const_cast< ::Gamedata::FVector*>(
      ::Gamedata::FVector::internal_default_instance());
}
void EntityMMeshInfo::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMMeshInfo::kXlsIdFieldNumber;
const int EntityMMeshInfo::kMaterialIdFieldNumber;
const int EntityMMeshInfo::kHighlightFieldNumber;
const int EntityMMeshInfo::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMMeshInfo::EntityMMeshInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityMMeshInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityMMeshInfo)
}
EntityMMeshInfo::EntityMMeshInfo(const EntityMMeshInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::Gamedata::FVector(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&xls_id_, &from.xls_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlight_) -
    reinterpret_cast<char*>(&xls_id_)) + sizeof(highlight_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityMMeshInfo)
}

void EntityMMeshInfo::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_) -
      reinterpret_cast<char*>(&color_)) + sizeof(highlight_));
  _cached_size_ = 0;
}

EntityMMeshInfo::~EntityMMeshInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityMMeshInfo)
  SharedDtor();
}

void EntityMMeshInfo::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void EntityMMeshInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMMeshInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMMeshInfo& EntityMMeshInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityMMeshInfo();
  return *internal_default_instance();
}

EntityMMeshInfo* EntityMMeshInfo::New(::google::protobuf::Arena* arena) const {
  EntityMMeshInfo* n = new EntityMMeshInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMMeshInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityMMeshInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  ::memset(&xls_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_) -
      reinterpret_cast<char*>(&xls_id_)) + sizeof(highlight_));
  _internal_metadata_.Clear();
}

bool EntityMMeshInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityMMeshInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 xls_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xls_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 material_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool highlight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FVector color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityMMeshInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityMMeshInfo)
  return false;
#undef DO_
}

void EntityMMeshInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityMMeshInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xls_id = 1;
  if (this->xls_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xls_id(), output);
  }

  // int32 material_id = 2;
  if (this->material_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->material_id(), output);
  }

  // bool highlight = 3;
  if (this->highlight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->highlight(), output);
  }

  // .Gamedata.FVector color = 4;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->color_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityMMeshInfo)
}

::google::protobuf::uint8* EntityMMeshInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityMMeshInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xls_id = 1;
  if (this->xls_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xls_id(), target);
  }

  // int32 material_id = 2;
  if (this->material_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->material_id(), target);
  }

  // bool highlight = 3;
  if (this->highlight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->highlight(), target);
  }

  // .Gamedata.FVector color = 4;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->color_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityMMeshInfo)
  return target;
}

size_t EntityMMeshInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityMMeshInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FVector color = 4;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);
  }

  // int32 xls_id = 1;
  if (this->xls_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xls_id());
  }

  // int32 material_id = 2;
  if (this->material_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->material_id());
  }

  // bool highlight = 3;
  if (this->highlight() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMMeshInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityMMeshInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMMeshInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMMeshInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityMMeshInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityMMeshInfo)
    MergeFrom(*source);
  }
}

void EntityMMeshInfo::MergeFrom(const EntityMMeshInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityMMeshInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    mutable_color()->::Gamedata::FVector::MergeFrom(from.color());
  }
  if (from.xls_id() != 0) {
    set_xls_id(from.xls_id());
  }
  if (from.material_id() != 0) {
    set_material_id(from.material_id());
  }
  if (from.highlight() != 0) {
    set_highlight(from.highlight());
  }
}

void EntityMMeshInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityMMeshInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMMeshInfo::CopyFrom(const EntityMMeshInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityMMeshInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMMeshInfo::IsInitialized() const {
  return true;
}

void EntityMMeshInfo::Swap(EntityMMeshInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMMeshInfo::InternalSwap(EntityMMeshInfo* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(xls_id_, other->xls_id_);
  swap(material_id_, other->material_id_);
  swap(highlight_, other->highlight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMMeshInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityImageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityImageInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityImageInfo::EntityImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityImageInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityImageInfo)
}
EntityImageInfo::EntityImageInfo(const EntityImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityImageInfo)
}

void EntityImageInfo::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EntityImageInfo::~EntityImageInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityImageInfo)
  SharedDtor();
}

void EntityImageInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityImageInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityImageInfo& EntityImageInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityImageInfo();
  return *internal_default_instance();
}

EntityImageInfo* EntityImageInfo::New(::google::protobuf::Arena* arena) const {
  EntityImageInfo* n = new EntityImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EntityImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityImageInfo.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityImageInfo)
  return false;
#undef DO_
}

void EntityImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 8;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityImageInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityImageInfo)
}

::google::protobuf::uint8* EntityImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 8;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityImageInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityImageInfo)
  return target;
}

size_t EntityImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityImageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 8;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityImageInfo)
    MergeFrom(*source);
  }
}

void EntityImageInfo::MergeFrom(const EntityImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void EntityImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityImageInfo::CopyFrom(const EntityImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityImageInfo::IsInitialized() const {
  return true;
}

void EntityImageInfo::Swap(EntityImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityImageInfo::InternalSwap(EntityImageInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityImageInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityInfo::InitAsDefaultInstance() {
  ::Gamedata::_EntityInfo_default_instance_._instance.get_mutable()->transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
  ::Gamedata::_EntityInfo_default_instance_._instance.get_mutable()->spline_ = const_cast< ::Gamedata::EntitySplineAlone*>(
      ::Gamedata::EntitySplineAlone::internal_default_instance());
  ::Gamedata::_EntityInfo_default_instance_._instance.get_mutable()->python_info_ = const_cast< ::Gamedata::EntityPythonInfo*>(
      ::Gamedata::EntityPythonInfo::internal_default_instance());
  ::Gamedata::_EntityInfo_default_instance_._instance.get_mutable()->transform_timeline_ = const_cast< ::Gamedata::EntityTransformTimeline*>(
      ::Gamedata::EntityTransformTimeline::internal_default_instance());
  ::Gamedata::_EntityInfo_default_instance_._instance.get_mutable()->command_ = const_cast< ::Gamedata::EntityCommandInfo*>(
      ::Gamedata::EntityCommandInfo::internal_default_instance());
}
void EntityInfo::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityInfo::kEntityIdFieldNumber;
const int EntityInfo::kPlayerIdFieldNumber;
const int EntityInfo::kTransformFieldNumber;
const int EntityInfo::kCollisionTypeFieldNumber;
const int EntityInfo::kChildListFieldNumber;
const int EntityInfo::kSplineFieldNumber;
const int EntityInfo::kPythonInfoFieldNumber;
const int EntityInfo::kTransformTimelineFieldNumber;
const int EntityInfo::kCommandFieldNumber;
const int EntityInfo::kLockPlayerIdFieldNumber;
const int EntityInfo::kEntitySyncTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityInfo::EntityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityInfo)
}
EntityInfo::EntityInfo(const EntityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_list_(from.child_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::Gamedata::FTransform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  if (from.has_spline()) {
    spline_ = new ::Gamedata::EntitySplineAlone(*from.spline_);
  } else {
    spline_ = NULL;
  }
  if (from.has_python_info()) {
    python_info_ = new ::Gamedata::EntityPythonInfo(*from.python_info_);
  } else {
    python_info_ = NULL;
  }
  if (from.has_transform_timeline()) {
    transform_timeline_ = new ::Gamedata::EntityTransformTimeline(*from.transform_timeline_);
  } else {
    transform_timeline_ = NULL;
  }
  if (from.has_command()) {
    command_ = new ::Gamedata::EntityCommandInfo(*from.command_);
  } else {
    command_ = NULL;
  }
  ::memcpy(&entityid_, &from.entityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_sync_type_) -
    reinterpret_cast<char*>(&entityid_)) + sizeof(entity_sync_type_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityInfo)
}

void EntityInfo::SharedCtor() {
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_sync_type_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(entity_sync_type_));
  _cached_size_ = 0;
}

EntityInfo::~EntityInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityInfo)
  SharedDtor();
}

void EntityInfo::SharedDtor() {
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete spline_;
  if (this != internal_default_instance()) delete python_info_;
  if (this != internal_default_instance()) delete transform_timeline_;
  if (this != internal_default_instance()) delete command_;
}

void EntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityInfo& EntityInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityInfo();
  return *internal_default_instance();
}

EntityInfo* EntityInfo::New(::google::protobuf::Arena* arena) const {
  EntityInfo* n = new EntityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_list_.Clear();
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && spline_ != NULL) {
    delete spline_;
  }
  spline_ = NULL;
  if (GetArenaNoVirtual() == NULL && python_info_ != NULL) {
    delete python_info_;
  }
  python_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && transform_timeline_ != NULL) {
    delete transform_timeline_;
  }
  transform_timeline_ = NULL;
  if (GetArenaNoVirtual() == NULL && command_ != NULL) {
    delete command_;
  }
  command_ = NULL;
  ::memset(&entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_sync_type_) -
      reinterpret_cast<char*>(&entityid_)) + sizeof(entity_sync_type_));
  _internal_metadata_.Clear();
}

bool EntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 entityId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FTransform transform = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityCollisionType collision_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_collision_type(static_cast< ::Gamedata::EntityCollisionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.EntityChildInfo child_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_child_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntitySplineAlone spline = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityPythonInfo python_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_python_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityTransformTimeline transform_timeline = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform_timeline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityCommandInfo command = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lockPlayerId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntitySyncType entity_sync_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_sync_type(static_cast< ::Gamedata::EntitySyncType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityInfo)
  return false;
#undef DO_
}

void EntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 entityId = 1;
  if (this->entityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // .Gamedata.FTransform transform = 3;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transform_, output);
  }

  // .Gamedata.EntityCollisionType collision_type = 4;
  if (this->collision_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->collision_type(), output);
  }

  // repeated .Gamedata.EntityChildInfo child_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->child_list(static_cast<int>(i)), output);
  }

  // .Gamedata.EntitySplineAlone spline = 6;
  if (this->has_spline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->spline_, output);
  }

  // .Gamedata.EntityPythonInfo python_info = 7;
  if (this->has_python_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->python_info_, output);
  }

  // .Gamedata.EntityTransformTimeline transform_timeline = 8;
  if (this->has_transform_timeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->transform_timeline_, output);
  }

  // .Gamedata.EntityCommandInfo command = 9;
  if (this->has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->command_, output);
  }

  // int32 lockPlayerId = 10;
  if (this->lockplayerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lockplayerid(), output);
  }

  // .Gamedata.EntitySyncType entity_sync_type = 11;
  if (this->entity_sync_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->entity_sync_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityInfo)
}

::google::protobuf::uint8* EntityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 entityId = 1;
  if (this->entityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // .Gamedata.FTransform transform = 3;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->transform_, deterministic, target);
  }

  // .Gamedata.EntityCollisionType collision_type = 4;
  if (this->collision_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->collision_type(), target);
  }

  // repeated .Gamedata.EntityChildInfo child_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->child_list(static_cast<int>(i)), deterministic, target);
  }

  // .Gamedata.EntitySplineAlone spline = 6;
  if (this->has_spline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->spline_, deterministic, target);
  }

  // .Gamedata.EntityPythonInfo python_info = 7;
  if (this->has_python_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->python_info_, deterministic, target);
  }

  // .Gamedata.EntityTransformTimeline transform_timeline = 8;
  if (this->has_transform_timeline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->transform_timeline_, deterministic, target);
  }

  // .Gamedata.EntityCommandInfo command = 9;
  if (this->has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->command_, deterministic, target);
  }

  // int32 lockPlayerId = 10;
  if (this->lockplayerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lockplayerid(), target);
  }

  // .Gamedata.EntitySyncType entity_sync_type = 11;
  if (this->entity_sync_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->entity_sync_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityInfo)
  return target;
}

size_t EntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityChildInfo child_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->child_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->child_list(static_cast<int>(i)));
    }
  }

  // .Gamedata.FTransform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transform_);
  }

  // .Gamedata.EntitySplineAlone spline = 6;
  if (this->has_spline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->spline_);
  }

  // .Gamedata.EntityPythonInfo python_info = 7;
  if (this->has_python_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->python_info_);
  }

  // .Gamedata.EntityTransformTimeline transform_timeline = 8;
  if (this->has_transform_timeline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transform_timeline_);
  }

  // .Gamedata.EntityCommandInfo command = 9;
  if (this->has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->command_);
  }

  // int32 entityId = 1;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entityid());
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  // .Gamedata.EntityCollisionType collision_type = 4;
  if (this->collision_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->collision_type());
  }

  // int32 lockPlayerId = 10;
  if (this->lockplayerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lockplayerid());
  }

  // .Gamedata.EntitySyncType entity_sync_type = 11;
  if (this->entity_sync_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_sync_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityInfo)
    MergeFrom(*source);
  }
}

void EntityInfo::MergeFrom(const EntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_list_.MergeFrom(from.child_list_);
  if (from.has_transform()) {
    mutable_transform()->::Gamedata::FTransform::MergeFrom(from.transform());
  }
  if (from.has_spline()) {
    mutable_spline()->::Gamedata::EntitySplineAlone::MergeFrom(from.spline());
  }
  if (from.has_python_info()) {
    mutable_python_info()->::Gamedata::EntityPythonInfo::MergeFrom(from.python_info());
  }
  if (from.has_transform_timeline()) {
    mutable_transform_timeline()->::Gamedata::EntityTransformTimeline::MergeFrom(from.transform_timeline());
  }
  if (from.has_command()) {
    mutable_command()->::Gamedata::EntityCommandInfo::MergeFrom(from.command());
  }
  if (from.entityid() != 0) {
    set_entityid(from.entityid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.collision_type() != 0) {
    set_collision_type(from.collision_type());
  }
  if (from.lockplayerid() != 0) {
    set_lockplayerid(from.lockplayerid());
  }
  if (from.entity_sync_type() != 0) {
    set_entity_sync_type(from.entity_sync_type());
  }
}

void EntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityInfo::CopyFrom(const EntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityInfo::IsInitialized() const {
  return true;
}

void EntityInfo::Swap(EntityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityInfo::InternalSwap(EntityInfo* other) {
  using std::swap;
  child_list_.InternalSwap(&other->child_list_);
  swap(transform_, other->transform_);
  swap(spline_, other->spline_);
  swap(python_info_, other->python_info_);
  swap(transform_timeline_, other->transform_timeline_);
  swap(command_, other->command_);
  swap(entityid_, other->entityid_);
  swap(playerid_, other->playerid_);
  swap(collision_type_, other->collision_type_);
  swap(lockplayerid_, other->lockplayerid_);
  swap(entity_sync_type_, other->entity_sync_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityEnterView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityEnterView::kEntityInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityEnterView::EntityEnterView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityEnterView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityEnterView)
}
EntityEnterView::EntityEnterView(const EntityEnterView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityinfolist_(from.entityinfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityEnterView)
}

void EntityEnterView::SharedCtor() {
  _cached_size_ = 0;
}

EntityEnterView::~EntityEnterView() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityEnterView)
  SharedDtor();
}

void EntityEnterView::SharedDtor() {
}

void EntityEnterView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityEnterView::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityEnterView& EntityEnterView::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityEnterView();
  return *internal_default_instance();
}

EntityEnterView* EntityEnterView::New(::google::protobuf::Arena* arena) const {
  EntityEnterView* n = new EntityEnterView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityEnterView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityinfolist_.Clear();
  _internal_metadata_.Clear();
}

bool EntityEnterView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityEnterView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.EntityInfo entityInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_entityinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityEnterView)
  return false;
#undef DO_
}

void EntityEnterView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityEnterView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entityinfolist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityEnterView)
}

::google::protobuf::uint8* EntityEnterView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityEnterView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entityinfolist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityEnterView)
  return target;
}

size_t EntityEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityEnterView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entityinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entityinfolist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityEnterView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityEnterView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityEnterView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityEnterView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityEnterView)
    MergeFrom(*source);
  }
}

void EntityEnterView::MergeFrom(const EntityEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityinfolist_.MergeFrom(from.entityinfolist_);
}

void EntityEnterView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityEnterView::CopyFrom(const EntityEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityEnterView::IsInitialized() const {
  return true;
}

void EntityEnterView::Swap(EntityEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityEnterView::InternalSwap(EntityEnterView* other) {
  using std::swap;
  entityinfolist_.InternalSwap(&other->entityinfolist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityEnterView::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityUpdateView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityUpdateView::kEntityInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityUpdateView::EntityUpdateView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityUpdateView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityUpdateView)
}
EntityUpdateView::EntityUpdateView(const EntityUpdateView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityinfolist_(from.entityinfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityUpdateView)
}

void EntityUpdateView::SharedCtor() {
  _cached_size_ = 0;
}

EntityUpdateView::~EntityUpdateView() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityUpdateView)
  SharedDtor();
}

void EntityUpdateView::SharedDtor() {
}

void EntityUpdateView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityUpdateView::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityUpdateView& EntityUpdateView::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityUpdateView();
  return *internal_default_instance();
}

EntityUpdateView* EntityUpdateView::New(::google::protobuf::Arena* arena) const {
  EntityUpdateView* n = new EntityUpdateView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityUpdateView::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityUpdateView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityinfolist_.Clear();
  _internal_metadata_.Clear();
}

bool EntityUpdateView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityUpdateView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.EntityInfo entityInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_entityinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityUpdateView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityUpdateView)
  return false;
#undef DO_
}

void EntityUpdateView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityUpdateView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entityinfolist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityUpdateView)
}

::google::protobuf::uint8* EntityUpdateView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityUpdateView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entityinfolist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityUpdateView)
  return target;
}

size_t EntityUpdateView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityUpdateView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entityinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entityinfolist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityUpdateView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityUpdateView)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityUpdateView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityUpdateView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityUpdateView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityUpdateView)
    MergeFrom(*source);
  }
}

void EntityUpdateView::MergeFrom(const EntityUpdateView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityUpdateView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityinfolist_.MergeFrom(from.entityinfolist_);
}

void EntityUpdateView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityUpdateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityUpdateView::CopyFrom(const EntityUpdateView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityUpdateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityUpdateView::IsInitialized() const {
  return true;
}

void EntityUpdateView::Swap(EntityUpdateView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityUpdateView::InternalSwap(EntityUpdateView* other) {
  using std::swap;
  entityinfolist_.InternalSwap(&other->entityinfolist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityUpdateView::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityLeaveView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityLeaveView::kEntityIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityLeaveView::EntityLeaveView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityLeaveView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityLeaveView)
}
EntityLeaveView::EntityLeaveView(const EntityLeaveView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityidlist_(from.entityidlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityLeaveView)
}

void EntityLeaveView::SharedCtor() {
  _cached_size_ = 0;
}

EntityLeaveView::~EntityLeaveView() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityLeaveView)
  SharedDtor();
}

void EntityLeaveView::SharedDtor() {
}

void EntityLeaveView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityLeaveView::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityLeaveView& EntityLeaveView::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityLeaveView();
  return *internal_default_instance();
}

EntityLeaveView* EntityLeaveView::New(::google::protobuf::Arena* arena) const {
  EntityLeaveView* n = new EntityLeaveView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityLeaveView::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityLeaveView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityidlist_.Clear();
  _internal_metadata_.Clear();
}

bool EntityLeaveView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityLeaveView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 entityIdList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entityidlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_entityidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityLeaveView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityLeaveView)
  return false;
#undef DO_
}

void EntityLeaveView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityLeaveView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 entityIdList = 1;
  if (this->entityidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _entityidlist_cached_byte_size_));
  }
  for (int i = 0, n = this->entityidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->entityidlist(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityLeaveView)
}

::google::protobuf::uint8* EntityLeaveView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityLeaveView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 entityIdList = 1;
  if (this->entityidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _entityidlist_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->entityidlist_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityLeaveView)
  return target;
}

size_t EntityLeaveView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityLeaveView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 entityIdList = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->entityidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entityidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityLeaveView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityLeaveView)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityLeaveView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityLeaveView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityLeaveView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityLeaveView)
    MergeFrom(*source);
  }
}

void EntityLeaveView::MergeFrom(const EntityLeaveView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityLeaveView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityidlist_.MergeFrom(from.entityidlist_);
}

void EntityLeaveView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityLeaveView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityLeaveView::CopyFrom(const EntityLeaveView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityLeaveView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityLeaveView::IsInitialized() const {
  return true;
}

void EntityLeaveView::Swap(EntityLeaveView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityLeaveView::InternalSwap(EntityLeaveView* other) {
  using std::swap;
  entityidlist_.InternalSwap(&other->entityidlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityLeaveView::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityAddRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityAddRequest::kEntityInfoListFieldNumber;
const int EntityAddRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityAddRequest::EntityAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityAddRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityAddRequest)
}
EntityAddRequest::EntityAddRequest(const EntityAddRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityinfolist_(from.entityinfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityAddRequest)
}

void EntityAddRequest::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

EntityAddRequest::~EntityAddRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityAddRequest)
  SharedDtor();
}

void EntityAddRequest::SharedDtor() {
}

void EntityAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAddRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityAddRequest& EntityAddRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityAddRequest();
  return *internal_default_instance();
}

EntityAddRequest* EntityAddRequest::New(::google::protobuf::Arena* arena) const {
  EntityAddRequest* n = new EntityAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityAddRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityinfolist_.Clear();
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool EntityAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.EntityInfo entityInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_entityinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityAddRequest)
  return false;
#undef DO_
}

void EntityAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityAddRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entityinfolist(static_cast<int>(i)), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityAddRequest)
}

::google::protobuf::uint8* EntityAddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityAddRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entityinfolist(static_cast<int>(i)), deterministic, target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityAddRequest)
  return target;
}

size_t EntityAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityAddRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entityinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entityinfolist(static_cast<int>(i)));
    }
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityAddRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityAddRequest)
    MergeFrom(*source);
  }
}

void EntityAddRequest::MergeFrom(const EntityAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityinfolist_.MergeFrom(from.entityinfolist_);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void EntityAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAddRequest::CopyFrom(const EntityAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAddRequest::IsInitialized() const {
  return true;
}

void EntityAddRequest::Swap(EntityAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityAddRequest::InternalSwap(EntityAddRequest* other) {
  using std::swap;
  entityinfolist_.InternalSwap(&other->entityinfolist_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityAddRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityRemoveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityRemoveRequest::kEntityIdListFieldNumber;
const int EntityRemoveRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityRemoveRequest::EntityRemoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityRemoveRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityRemoveRequest)
}
EntityRemoveRequest::EntityRemoveRequest(const EntityRemoveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityidlist_(from.entityidlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityRemoveRequest)
}

void EntityRemoveRequest::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

EntityRemoveRequest::~EntityRemoveRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityRemoveRequest)
  SharedDtor();
}

void EntityRemoveRequest::SharedDtor() {
}

void EntityRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityRemoveRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityRemoveRequest& EntityRemoveRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityRemoveRequest();
  return *internal_default_instance();
}

EntityRemoveRequest* EntityRemoveRequest::New(::google::protobuf::Arena* arena) const {
  EntityRemoveRequest* n = new EntityRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityRemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityidlist_.Clear();
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool EntityRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityRemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 entityIdList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entityidlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_entityidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityRemoveRequest)
  return false;
#undef DO_
}

void EntityRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityRemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 entityIdList = 1;
  if (this->entityidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _entityidlist_cached_byte_size_));
  }
  for (int i = 0, n = this->entityidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->entityidlist(i), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityRemoveRequest)
}

::google::protobuf::uint8* EntityRemoveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityRemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 entityIdList = 1;
  if (this->entityidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _entityidlist_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->entityidlist_, target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityRemoveRequest)
  return target;
}

size_t EntityRemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityRemoveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 entityIdList = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->entityidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entityidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityRemoveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityRemoveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityRemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityRemoveRequest)
    MergeFrom(*source);
  }
}

void EntityRemoveRequest::MergeFrom(const EntityRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityidlist_.MergeFrom(from.entityidlist_);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void EntityRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityRemoveRequest::CopyFrom(const EntityRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRemoveRequest::IsInitialized() const {
  return true;
}

void EntityRemoveRequest::Swap(EntityRemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityRemoveRequest::InternalSwap(EntityRemoveRequest* other) {
  using std::swap;
  entityidlist_.InternalSwap(&other->entityidlist_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityRemoveRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityUpdateRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityUpdateRequest::kEntityInfoListFieldNumber;
const int EntityUpdateRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityUpdateRequest::EntityUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityUpdateRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityUpdateRequest)
}
EntityUpdateRequest::EntityUpdateRequest(const EntityUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entityinfolist_(from.entityinfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityUpdateRequest)
}

void EntityUpdateRequest::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

EntityUpdateRequest::~EntityUpdateRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityUpdateRequest)
  SharedDtor();
}

void EntityUpdateRequest::SharedDtor() {
}

void EntityUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityUpdateRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityUpdateRequest& EntityUpdateRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityUpdateRequest();
  return *internal_default_instance();
}

EntityUpdateRequest* EntityUpdateRequest::New(::google::protobuf::Arena* arena) const {
  EntityUpdateRequest* n = new EntityUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entityinfolist_.Clear();
  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool EntityUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.EntityInfo entityInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_entityinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityUpdateRequest)
  return false;
#undef DO_
}

void EntityUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entityinfolist(static_cast<int>(i)), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityUpdateRequest)
}

::google::protobuf::uint8* EntityUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entityinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entityinfolist(static_cast<int>(i)), deterministic, target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityUpdateRequest)
  return target;
}

size_t EntityUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityUpdateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityInfo entityInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entityinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entityinfolist(static_cast<int>(i)));
    }
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityUpdateRequest)
    MergeFrom(*source);
  }
}

void EntityUpdateRequest::MergeFrom(const EntityUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entityinfolist_.MergeFrom(from.entityinfolist_);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void EntityUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityUpdateRequest::CopyFrom(const EntityUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityUpdateRequest::IsInitialized() const {
  return true;
}

void EntityUpdateRequest::Swap(EntityUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityUpdateRequest::InternalSwap(EntityUpdateRequest* other) {
  using std::swap;
  entityinfolist_.InternalSwap(&other->entityinfolist_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityUpdateRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityOperationValue1::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityOperationValue1::kIsPlayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityOperationValue1::EntityOperationValue1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityOperationValue1();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityOperationValue1)
}
EntityOperationValue1::EntityOperationValue1(const EntityOperationValue1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isplay_ = from.isplay_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityOperationValue1)
}

void EntityOperationValue1::SharedCtor() {
  isplay_ = false;
  _cached_size_ = 0;
}

EntityOperationValue1::~EntityOperationValue1() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityOperationValue1)
  SharedDtor();
}

void EntityOperationValue1::SharedDtor() {
}

void EntityOperationValue1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityOperationValue1::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityOperationValue1& EntityOperationValue1::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityOperationValue1();
  return *internal_default_instance();
}

EntityOperationValue1* EntityOperationValue1::New(::google::protobuf::Arena* arena) const {
  EntityOperationValue1* n = new EntityOperationValue1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityOperationValue1::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityOperationValue1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isplay_ = false;
  _internal_metadata_.Clear();
}

bool EntityOperationValue1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityOperationValue1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isPlay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityOperationValue1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityOperationValue1)
  return false;
#undef DO_
}

void EntityOperationValue1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityOperationValue1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isplay(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityOperationValue1)
}

::google::protobuf::uint8* EntityOperationValue1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityOperationValue1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isplay(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityOperationValue1)
  return target;
}

size_t EntityOperationValue1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityOperationValue1)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool isPlay = 1;
  if (this->isplay() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityOperationValue1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityOperationValue1)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityOperationValue1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityOperationValue1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityOperationValue1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityOperationValue1)
    MergeFrom(*source);
  }
}

void EntityOperationValue1::MergeFrom(const EntityOperationValue1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityOperationValue1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isplay() != 0) {
    set_isplay(from.isplay());
  }
}

void EntityOperationValue1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityOperationValue1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityOperationValue1::CopyFrom(const EntityOperationValue1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityOperationValue1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityOperationValue1::IsInitialized() const {
  return true;
}

void EntityOperationValue1::Swap(EntityOperationValue1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityOperationValue1::InternalSwap(EntityOperationValue1* other) {
  using std::swap;
  swap(isplay_, other->isplay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityOperationValue1::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityOperationValue2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityOperationValue2::kIsPlayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityOperationValue2::EntityOperationValue2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityOperationValue2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityOperationValue2)
}
EntityOperationValue2::EntityOperationValue2(const EntityOperationValue2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isplay_ = from.isplay_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityOperationValue2)
}

void EntityOperationValue2::SharedCtor() {
  isplay_ = false;
  _cached_size_ = 0;
}

EntityOperationValue2::~EntityOperationValue2() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityOperationValue2)
  SharedDtor();
}

void EntityOperationValue2::SharedDtor() {
}

void EntityOperationValue2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityOperationValue2::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityOperationValue2& EntityOperationValue2::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityOperationValue2();
  return *internal_default_instance();
}

EntityOperationValue2* EntityOperationValue2::New(::google::protobuf::Arena* arena) const {
  EntityOperationValue2* n = new EntityOperationValue2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityOperationValue2::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityOperationValue2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isplay_ = false;
  _internal_metadata_.Clear();
}

bool EntityOperationValue2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityOperationValue2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isPlay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityOperationValue2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityOperationValue2)
  return false;
#undef DO_
}

void EntityOperationValue2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityOperationValue2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isplay(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityOperationValue2)
}

::google::protobuf::uint8* EntityOperationValue2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityOperationValue2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPlay = 1;
  if (this->isplay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isplay(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityOperationValue2)
  return target;
}

size_t EntityOperationValue2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityOperationValue2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool isPlay = 1;
  if (this->isplay() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityOperationValue2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityOperationValue2)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityOperationValue2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityOperationValue2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityOperationValue2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityOperationValue2)
    MergeFrom(*source);
  }
}

void EntityOperationValue2::MergeFrom(const EntityOperationValue2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityOperationValue2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isplay() != 0) {
    set_isplay(from.isplay());
  }
}

void EntityOperationValue2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityOperationValue2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityOperationValue2::CopyFrom(const EntityOperationValue2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityOperationValue2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityOperationValue2::IsInitialized() const {
  return true;
}

void EntityOperationValue2::Swap(EntityOperationValue2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityOperationValue2::InternalSwap(EntityOperationValue2* other) {
  using std::swap;
  swap(isplay_, other->isplay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityOperationValue2::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityOperationAlone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityOperationAlone::kTheTypeFieldNumber;
const int EntityOperationAlone::kPlayerIdFieldNumber;
const int EntityOperationAlone::kEntityIdFieldNumber;
const int EntityOperationAlone::kValue1FieldNumber;
const int EntityOperationAlone::kValue2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityOperationAlone::EntityOperationAlone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityOperationAlone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityOperationAlone)
}
EntityOperationAlone::EntityOperationAlone(const EntityOperationAlone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value1_(from.value1_),
      value2_(from.value2_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&thetype_, &from.thetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&entityid_) -
    reinterpret_cast<char*>(&thetype_)) + sizeof(entityid_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityOperationAlone)
}

void EntityOperationAlone::SharedCtor() {
  ::memset(&thetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entityid_) -
      reinterpret_cast<char*>(&thetype_)) + sizeof(entityid_));
  _cached_size_ = 0;
}

EntityOperationAlone::~EntityOperationAlone() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityOperationAlone)
  SharedDtor();
}

void EntityOperationAlone::SharedDtor() {
}

void EntityOperationAlone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityOperationAlone::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityOperationAlone& EntityOperationAlone::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityOperationAlone();
  return *internal_default_instance();
}

EntityOperationAlone* EntityOperationAlone::New(::google::protobuf::Arena* arena) const {
  EntityOperationAlone* n = new EntityOperationAlone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityOperationAlone::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityOperationAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value1_.Clear();
  value2_.Clear();
  ::memset(&thetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entityid_) -
      reinterpret_cast<char*>(&thetype_)) + sizeof(entityid_));
  _internal_metadata_.Clear();
}

bool EntityOperationAlone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityOperationAlone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.EntityOperationType theType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_thetype(static_cast< ::Gamedata::EntityOperationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 entityId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.EntityOperationValue1 value1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_value1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.EntityOperationValue2 value2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_value2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityOperationAlone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityOperationAlone)
  return false;
#undef DO_
}

void EntityOperationAlone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityOperationAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityOperationType theType = 1;
  if (this->thetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->thetype(), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // int32 entityId = 3;
  if (this->entityid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entityid(), output);
  }

  // repeated .Gamedata.EntityOperationValue1 value1 = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value1_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value1(static_cast<int>(i)), output);
  }

  // repeated .Gamedata.EntityOperationValue2 value2 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value2_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->value2(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityOperationAlone)
}

::google::protobuf::uint8* EntityOperationAlone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityOperationAlone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.EntityOperationType theType = 1;
  if (this->thetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->thetype(), target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // int32 entityId = 3;
  if (this->entityid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entityid(), target);
  }

  // repeated .Gamedata.EntityOperationValue1 value1 = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value1_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->value1(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Gamedata.EntityOperationValue2 value2 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value2_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->value2(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityOperationAlone)
  return target;
}

size_t EntityOperationAlone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityOperationAlone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityOperationValue1 value1 = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->value1_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value1(static_cast<int>(i)));
    }
  }

  // repeated .Gamedata.EntityOperationValue2 value2 = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->value2_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value2(static_cast<int>(i)));
    }
  }

  // .Gamedata.EntityOperationType theType = 1;
  if (this->thetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->thetype());
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  // int32 entityId = 3;
  if (this->entityid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entityid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityOperationAlone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityOperationAlone)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityOperationAlone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityOperationAlone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityOperationAlone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityOperationAlone)
    MergeFrom(*source);
  }
}

void EntityOperationAlone::MergeFrom(const EntityOperationAlone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityOperationAlone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value1_.MergeFrom(from.value1_);
  value2_.MergeFrom(from.value2_);
  if (from.thetype() != 0) {
    set_thetype(from.thetype());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.entityid() != 0) {
    set_entityid(from.entityid());
  }
}

void EntityOperationAlone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityOperationAlone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityOperationAlone::CopyFrom(const EntityOperationAlone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityOperationAlone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityOperationAlone::IsInitialized() const {
  return true;
}

void EntityOperationAlone::Swap(EntityOperationAlone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityOperationAlone::InternalSwap(EntityOperationAlone* other) {
  using std::swap;
  value1_.InternalSwap(&other->value1_);
  value2_.InternalSwap(&other->value2_);
  swap(thetype_, other->thetype_);
  swap(playerid_, other->playerid_);
  swap(entityid_, other->entityid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityOperationAlone::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityOperationTotal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityOperationTotal::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityOperationTotal::EntityOperationTotal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityOperationTotal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityOperationTotal)
}
EntityOperationTotal::EntityOperationTotal(const EntityOperationTotal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_(from.node_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityOperationTotal)
}

void EntityOperationTotal::SharedCtor() {
  _cached_size_ = 0;
}

EntityOperationTotal::~EntityOperationTotal() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityOperationTotal)
  SharedDtor();
}

void EntityOperationTotal::SharedDtor() {
}

void EntityOperationTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityOperationTotal::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityOperationTotal& EntityOperationTotal::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityOperationTotal();
  return *internal_default_instance();
}

EntityOperationTotal* EntityOperationTotal::New(::google::protobuf::Arena* arena) const {
  EntityOperationTotal* n = new EntityOperationTotal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityOperationTotal::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityOperationTotal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear();
}

bool EntityOperationTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityOperationTotal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gamedata.EntityOperationAlone node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityOperationTotal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityOperationTotal)
  return false;
#undef DO_
}

void EntityOperationTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityOperationTotal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityOperationAlone node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityOperationTotal)
}

::google::protobuf::uint8* EntityOperationTotal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityOperationTotal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gamedata.EntityOperationAlone node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityOperationTotal)
  return target;
}

size_t EntityOperationTotal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityOperationTotal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityOperationAlone node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityOperationTotal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityOperationTotal)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityOperationTotal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityOperationTotal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityOperationTotal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityOperationTotal)
    MergeFrom(*source);
  }
}

void EntityOperationTotal::MergeFrom(const EntityOperationTotal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityOperationTotal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void EntityOperationTotal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityOperationTotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityOperationTotal::CopyFrom(const EntityOperationTotal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityOperationTotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityOperationTotal::IsInitialized() const {
  return true;
}

void EntityOperationTotal::Swap(EntityOperationTotal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityOperationTotal::InternalSwap(EntityOperationTotal* other) {
  using std::swap;
  node_.InternalSwap(&other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityOperationTotal::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OverallSituationSkyInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverallSituationSkyInfo::kTimeFieldNumber;
const int OverallSituationSkyInfo::kWeatherFieldNumber;
const int OverallSituationSkyInfo::kCloudCoverageoverallFieldNumber;
const int OverallSituationSkyInfo::kCloudSpeedFieldNumber;
const int OverallSituationSkyInfo::kMoonColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverallSituationSkyInfo::OverallSituationSkyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsOverallSituationSkyInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.OverallSituationSkyInfo)
}
OverallSituationSkyInfo::OverallSituationSkyInfo(const OverallSituationSkyInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&moon_color_) -
    reinterpret_cast<char*>(&time_)) + sizeof(moon_color_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.OverallSituationSkyInfo)
}

void OverallSituationSkyInfo::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moon_color_) -
      reinterpret_cast<char*>(&time_)) + sizeof(moon_color_));
  _cached_size_ = 0;
}

OverallSituationSkyInfo::~OverallSituationSkyInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.OverallSituationSkyInfo)
  SharedDtor();
}

void OverallSituationSkyInfo::SharedDtor() {
}

void OverallSituationSkyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverallSituationSkyInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OverallSituationSkyInfo& OverallSituationSkyInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsOverallSituationSkyInfo();
  return *internal_default_instance();
}

OverallSituationSkyInfo* OverallSituationSkyInfo::New(::google::protobuf::Arena* arena) const {
  OverallSituationSkyInfo* n = new OverallSituationSkyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OverallSituationSkyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.OverallSituationSkyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moon_color_) -
      reinterpret_cast<char*>(&time_)) + sizeof(moon_color_));
  _internal_metadata_.Clear();
}

bool OverallSituationSkyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.OverallSituationSkyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weather = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cloud_coverageoverall = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_coverageoverall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cloud_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 moon_color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moon_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.OverallSituationSkyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.OverallSituationSkyInfo)
  return false;
#undef DO_
}

void OverallSituationSkyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.OverallSituationSkyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // int32 weather = 2;
  if (this->weather() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weather(), output);
  }

  // int32 cloud_coverageoverall = 3;
  if (this->cloud_coverageoverall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cloud_coverageoverall(), output);
  }

  // int32 cloud_speed = 4;
  if (this->cloud_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cloud_speed(), output);
  }

  // int32 moon_color = 5;
  if (this->moon_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moon_color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.OverallSituationSkyInfo)
}

::google::protobuf::uint8* OverallSituationSkyInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.OverallSituationSkyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // int32 weather = 2;
  if (this->weather() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weather(), target);
  }

  // int32 cloud_coverageoverall = 3;
  if (this->cloud_coverageoverall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cloud_coverageoverall(), target);
  }

  // int32 cloud_speed = 4;
  if (this->cloud_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cloud_speed(), target);
  }

  // int32 moon_color = 5;
  if (this->moon_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moon_color(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.OverallSituationSkyInfo)
  return target;
}

size_t OverallSituationSkyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.OverallSituationSkyInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 weather = 2;
  if (this->weather() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weather());
  }

  // int32 cloud_coverageoverall = 3;
  if (this->cloud_coverageoverall() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cloud_coverageoverall());
  }

  // int32 cloud_speed = 4;
  if (this->cloud_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cloud_speed());
  }

  // int32 moon_color = 5;
  if (this->moon_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->moon_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverallSituationSkyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.OverallSituationSkyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OverallSituationSkyInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OverallSituationSkyInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.OverallSituationSkyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.OverallSituationSkyInfo)
    MergeFrom(*source);
  }
}

void OverallSituationSkyInfo::MergeFrom(const OverallSituationSkyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.OverallSituationSkyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.weather() != 0) {
    set_weather(from.weather());
  }
  if (from.cloud_coverageoverall() != 0) {
    set_cloud_coverageoverall(from.cloud_coverageoverall());
  }
  if (from.cloud_speed() != 0) {
    set_cloud_speed(from.cloud_speed());
  }
  if (from.moon_color() != 0) {
    set_moon_color(from.moon_color());
  }
}

void OverallSituationSkyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.OverallSituationSkyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverallSituationSkyInfo::CopyFrom(const OverallSituationSkyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.OverallSituationSkyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverallSituationSkyInfo::IsInitialized() const {
  return true;
}

void OverallSituationSkyInfo::Swap(OverallSituationSkyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverallSituationSkyInfo::InternalSwap(OverallSituationSkyInfo* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(weather_, other->weather_);
  swap(cloud_coverageoverall_, other->cloud_coverageoverall_);
  swap(cloud_speed_, other->cloud_speed_);
  swap(moon_color_, other->moon_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OverallSituationSkyInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityMeshChildInfo::InitAsDefaultInstance() {
  ::Gamedata::_EntityMeshChildInfo_default_instance_._instance.get_mutable()->transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
}
void EntityMeshChildInfo::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMeshChildInfo::kXlsIdFieldNumber;
const int EntityMeshChildInfo::kMaterialIdFieldNumber;
const int EntityMeshChildInfo::kTransformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMeshChildInfo::EntityMeshChildInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityMeshChildInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityMeshChildInfo)
}
EntityMeshChildInfo::EntityMeshChildInfo(const EntityMeshChildInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::Gamedata::FTransform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  ::memcpy(&xlsid_, &from.xlsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&materialid_) -
    reinterpret_cast<char*>(&xlsid_)) + sizeof(materialid_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityMeshChildInfo)
}

void EntityMeshChildInfo::SharedCtor() {
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&materialid_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(materialid_));
  _cached_size_ = 0;
}

EntityMeshChildInfo::~EntityMeshChildInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityMeshChildInfo)
  SharedDtor();
}

void EntityMeshChildInfo::SharedDtor() {
  if (this != internal_default_instance()) delete transform_;
}

void EntityMeshChildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMeshChildInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMeshChildInfo& EntityMeshChildInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityMeshChildInfo();
  return *internal_default_instance();
}

EntityMeshChildInfo* EntityMeshChildInfo::New(::google::protobuf::Arena* arena) const {
  EntityMeshChildInfo* n = new EntityMeshChildInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMeshChildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityMeshChildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  ::memset(&xlsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&materialid_) -
      reinterpret_cast<char*>(&xlsid_)) + sizeof(materialid_));
  _internal_metadata_.Clear();
}

bool EntityMeshChildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityMeshChildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 xlsId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xlsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 materialId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FTransform transform = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityMeshChildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityMeshChildInfo)
  return false;
#undef DO_
}

void EntityMeshChildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityMeshChildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xlsId = 4;
  if (this->xlsid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xlsid(), output);
  }

  // int32 materialId = 5;
  if (this->materialid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->materialid(), output);
  }

  // .Gamedata.FTransform transform = 7;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transform_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityMeshChildInfo)
}

::google::protobuf::uint8* EntityMeshChildInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityMeshChildInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xlsId = 4;
  if (this->xlsid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->xlsid(), target);
  }

  // int32 materialId = 5;
  if (this->materialid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->materialid(), target);
  }

  // .Gamedata.FTransform transform = 7;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->transform_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityMeshChildInfo)
  return target;
}

size_t EntityMeshChildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityMeshChildInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.FTransform transform = 7;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transform_);
  }

  // int32 xlsId = 4;
  if (this->xlsid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xlsid());
  }

  // int32 materialId = 5;
  if (this->materialid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->materialid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMeshChildInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityMeshChildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMeshChildInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMeshChildInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityMeshChildInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityMeshChildInfo)
    MergeFrom(*source);
  }
}

void EntityMeshChildInfo::MergeFrom(const EntityMeshChildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityMeshChildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::Gamedata::FTransform::MergeFrom(from.transform());
  }
  if (from.xlsid() != 0) {
    set_xlsid(from.xlsid());
  }
  if (from.materialid() != 0) {
    set_materialid(from.materialid());
  }
}

void EntityMeshChildInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityMeshChildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMeshChildInfo::CopyFrom(const EntityMeshChildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityMeshChildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMeshChildInfo::IsInitialized() const {
  return true;
}

void EntityMeshChildInfo::Swap(EntityMeshChildInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMeshChildInfo::InternalSwap(EntityMeshChildInfo* other) {
  using std::swap;
  swap(transform_, other->transform_);
  swap(xlsid_, other->xlsid_);
  swap(materialid_, other->materialid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMeshChildInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityMeshMasterInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMeshMasterInfo::kXlsIdFieldNumber;
const int EntityMeshMasterInfo::kPlayerIdFieldNumber;
const int EntityMeshMasterInfo::kNameFieldNumber;
const int EntityMeshMasterInfo::kTypeFieldNumber;
const int EntityMeshMasterInfo::kChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMeshMasterInfo::EntityMeshMasterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEntityMeshMasterInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EntityMeshMasterInfo)
}
EntityMeshMasterInfo::EntityMeshMasterInfo(const EntityMeshMasterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_(from.child_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&xls_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(xls_id_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EntityMeshMasterInfo)
}

void EntityMeshMasterInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xls_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(xls_id_));
  _cached_size_ = 0;
}

EntityMeshMasterInfo::~EntityMeshMasterInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EntityMeshMasterInfo)
  SharedDtor();
}

void EntityMeshMasterInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EntityMeshMasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMeshMasterInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMeshMasterInfo& EntityMeshMasterInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEntityMeshMasterInfo();
  return *internal_default_instance();
}

EntityMeshMasterInfo* EntityMeshMasterInfo::New(::google::protobuf::Arena* arena) const {
  EntityMeshMasterInfo* n = new EntityMeshMasterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMeshMasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EntityMeshMasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xls_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(xls_id_));
  _internal_metadata_.Clear();
}

bool EntityMeshMasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EntityMeshMasterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 xls_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xls_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityMeshMasterInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EntityMeshMasterInfo.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.EntityMeshChildInfo child = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EntityMeshMasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EntityMeshMasterInfo)
  return false;
#undef DO_
}

void EntityMeshMasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EntityMeshMasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // int32 xls_id = 3;
  if (this->xls_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xls_id(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityMeshMasterInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityMeshMasterInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // repeated .Gamedata.EntityMeshChildInfo child = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->child(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EntityMeshMasterInfo)
}

::google::protobuf::uint8* EntityMeshMasterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EntityMeshMasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // int32 xls_id = 3;
  if (this->xls_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xls_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityMeshMasterInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EntityMeshMasterInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // repeated .Gamedata.EntityMeshChildInfo child = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->child(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EntityMeshMasterInfo)
  return target;
}

size_t EntityMeshMasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EntityMeshMasterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.EntityMeshChildInfo child = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->child_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->child(static_cast<int>(i)));
    }
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // int32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // int32 xls_id = 3;
  if (this->xls_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xls_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMeshMasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EntityMeshMasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMeshMasterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMeshMasterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EntityMeshMasterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EntityMeshMasterInfo)
    MergeFrom(*source);
  }
}

void EntityMeshMasterInfo::MergeFrom(const EntityMeshMasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EntityMeshMasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.xls_id() != 0) {
    set_xls_id(from.xls_id());
  }
}

void EntityMeshMasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EntityMeshMasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMeshMasterInfo::CopyFrom(const EntityMeshMasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EntityMeshMasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMeshMasterInfo::IsInitialized() const {
  return true;
}

void EntityMeshMasterInfo::Swap(EntityMeshMasterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMeshMasterInfo::InternalSwap(EntityMeshMasterInfo* other) {
  using std::swap;
  child_.InternalSwap(&other->child_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  swap(player_id_, other->player_id_);
  swap(xls_id_, other->xls_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMeshMasterInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

OverallSituationData_ActorListEntry_DoNotUse::OverallSituationData_ActorListEntry_DoNotUse() {}
OverallSituationData_ActorListEntry_DoNotUse::OverallSituationData_ActorListEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void OverallSituationData_ActorListEntry_DoNotUse::MergeFrom(const OverallSituationData_ActorListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata OverallSituationData_ActorListEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[52];
}
void OverallSituationData_ActorListEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void OverallSituationData::InitAsDefaultInstance() {
  ::Gamedata::_OverallSituationData_default_instance_._instance.get_mutable()->sky_info_ = const_cast< ::Gamedata::OverallSituationSkyInfo*>(
      ::Gamedata::OverallSituationSkyInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverallSituationData::kActorListFieldNumber;
const int OverallSituationData::kSkyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverallSituationData::OverallSituationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsOverallSituationData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.OverallSituationData)
}
OverallSituationData::OverallSituationData(const OverallSituationData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_list_.MergeFrom(from.actor_list_);
  if (from.has_sky_info()) {
    sky_info_ = new ::Gamedata::OverallSituationSkyInfo(*from.sky_info_);
  } else {
    sky_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.OverallSituationData)
}

void OverallSituationData::SharedCtor() {
  sky_info_ = NULL;
  _cached_size_ = 0;
}

OverallSituationData::~OverallSituationData() {
  // @@protoc_insertion_point(destructor:Gamedata.OverallSituationData)
  SharedDtor();
}

void OverallSituationData::SharedDtor() {
  if (this != internal_default_instance()) delete sky_info_;
}

void OverallSituationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverallSituationData::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OverallSituationData& OverallSituationData::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsOverallSituationData();
  return *internal_default_instance();
}

OverallSituationData* OverallSituationData::New(::google::protobuf::Arena* arena) const {
  OverallSituationData* n = new OverallSituationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OverallSituationData::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.OverallSituationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_list_.Clear();
  if (GetArenaNoVirtual() == NULL && sky_info_ != NULL) {
    delete sky_info_;
  }
  sky_info_ = NULL;
  _internal_metadata_.Clear();
}

bool OverallSituationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.OverallSituationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          OverallSituationData_ActorListEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              OverallSituationData_ActorListEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo > > parser(&actor_list_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.OverallSituationSkyInfo sky_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sky_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.OverallSituationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.OverallSituationData)
  return false;
#undef DO_
}

void OverallSituationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.OverallSituationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 1;
  if (!this->actor_list().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->actor_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->actor_list().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OverallSituationData_ActorListEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(actor_list_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<OverallSituationData_ActorListEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it) {
        entry.reset(actor_list_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 2;
  if (this->has_sky_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sky_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.OverallSituationData)
}

::google::protobuf::uint8* OverallSituationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.OverallSituationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 1;
  if (!this->actor_list().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->actor_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->actor_list().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OverallSituationData_ActorListEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(actor_list_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<OverallSituationData_ActorListEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it) {
        entry.reset(actor_list_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 2;
  if (this->has_sky_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sky_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.OverallSituationData)
  return target;
}

size_t OverallSituationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.OverallSituationData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actor_list_size());
  {
    ::google::protobuf::scoped_ptr<OverallSituationData_ActorListEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
        it = this->actor_list().begin();
        it != this->actor_list().end(); ++it) {
      entry.reset(actor_list_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 2;
  if (this->has_sky_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sky_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverallSituationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.OverallSituationData)
  GOOGLE_DCHECK_NE(&from, this);
  const OverallSituationData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OverallSituationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.OverallSituationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.OverallSituationData)
    MergeFrom(*source);
  }
}

void OverallSituationData::MergeFrom(const OverallSituationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.OverallSituationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actor_list_.MergeFrom(from.actor_list_);
  if (from.has_sky_info()) {
    mutable_sky_info()->::Gamedata::OverallSituationSkyInfo::MergeFrom(from.sky_info());
  }
}

void OverallSituationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.OverallSituationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverallSituationData::CopyFrom(const OverallSituationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.OverallSituationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverallSituationData::IsInitialized() const {
  return true;
}

void OverallSituationData::Swap(OverallSituationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverallSituationData::InternalSwap(OverallSituationData* other) {
  using std::swap;
  actor_list_.Swap(&other->actor_list_);
  swap(sky_info_, other->sky_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OverallSituationData::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OverallSituationDataRequest::InitAsDefaultInstance() {
  ::Gamedata::_OverallSituationDataRequest_default_instance_._instance.get_mutable()->sky_info_ = const_cast< ::Gamedata::OverallSituationSkyInfo*>(
      ::Gamedata::OverallSituationSkyInfo::internal_default_instance());
  ::Gamedata::_OverallSituationDataRequest_default_instance_._instance.get_mutable()->actor_add_ = const_cast< ::Gamedata::EntityMeshMasterInfo*>(
      ::Gamedata::EntityMeshMasterInfo::internal_default_instance());
  ::Gamedata::_OverallSituationDataRequest_default_instance_._instance.get_mutable()->actor_add_transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
  ::Gamedata::_OverallSituationDataRequest_default_instance_._instance.get_mutable()->actor_update_ = const_cast< ::Gamedata::EntityMeshMasterInfo*>(
      ::Gamedata::EntityMeshMasterInfo::internal_default_instance());
  ::Gamedata::_OverallSituationDataRequest_default_instance_._instance.get_mutable()->actor_update_transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
}
void OverallSituationDataRequest::clear_actor_add_transform() {
  if (GetArenaNoVirtual() == NULL && actor_add_transform_ != NULL) {
    delete actor_add_transform_;
  }
  actor_add_transform_ = NULL;
}
void OverallSituationDataRequest::clear_actor_update_transform() {
  if (GetArenaNoVirtual() == NULL && actor_update_transform_ != NULL) {
    delete actor_update_transform_;
  }
  actor_update_transform_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverallSituationDataRequest::kPlayerIdFieldNumber;
const int OverallSituationDataRequest::kSetTypeFieldNumber;
const int OverallSituationDataRequest::kSkyInfoFieldNumber;
const int OverallSituationDataRequest::kActorAddFieldNumber;
const int OverallSituationDataRequest::kActorAddTransformFieldNumber;
const int OverallSituationDataRequest::kActorUpdateFieldNumber;
const int OverallSituationDataRequest::kActorUpdateTransformFieldNumber;
const int OverallSituationDataRequest::kActorDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverallSituationDataRequest::OverallSituationDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsOverallSituationDataRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.OverallSituationDataRequest)
}
OverallSituationDataRequest::OverallSituationDataRequest(const OverallSituationDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sky_info()) {
    sky_info_ = new ::Gamedata::OverallSituationSkyInfo(*from.sky_info_);
  } else {
    sky_info_ = NULL;
  }
  if (from.has_actor_add()) {
    actor_add_ = new ::Gamedata::EntityMeshMasterInfo(*from.actor_add_);
  } else {
    actor_add_ = NULL;
  }
  if (from.has_actor_add_transform()) {
    actor_add_transform_ = new ::Gamedata::FTransform(*from.actor_add_transform_);
  } else {
    actor_add_transform_ = NULL;
  }
  if (from.has_actor_update()) {
    actor_update_ = new ::Gamedata::EntityMeshMasterInfo(*from.actor_update_);
  } else {
    actor_update_ = NULL;
  }
  if (from.has_actor_update_transform()) {
    actor_update_transform_ = new ::Gamedata::FTransform(*from.actor_update_transform_);
  } else {
    actor_update_transform_ = NULL;
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&actor_delete_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(actor_delete_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.OverallSituationDataRequest)
}

void OverallSituationDataRequest::SharedCtor() {
  ::memset(&sky_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_delete_) -
      reinterpret_cast<char*>(&sky_info_)) + sizeof(actor_delete_));
  _cached_size_ = 0;
}

OverallSituationDataRequest::~OverallSituationDataRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.OverallSituationDataRequest)
  SharedDtor();
}

void OverallSituationDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sky_info_;
  if (this != internal_default_instance()) delete actor_add_;
  if (this != internal_default_instance()) delete actor_add_transform_;
  if (this != internal_default_instance()) delete actor_update_;
  if (this != internal_default_instance()) delete actor_update_transform_;
}

void OverallSituationDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverallSituationDataRequest::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OverallSituationDataRequest& OverallSituationDataRequest::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsOverallSituationDataRequest();
  return *internal_default_instance();
}

OverallSituationDataRequest* OverallSituationDataRequest::New(::google::protobuf::Arena* arena) const {
  OverallSituationDataRequest* n = new OverallSituationDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OverallSituationDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.OverallSituationDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sky_info_ != NULL) {
    delete sky_info_;
  }
  sky_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_add_ != NULL) {
    delete actor_add_;
  }
  actor_add_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_add_transform_ != NULL) {
    delete actor_add_transform_;
  }
  actor_add_transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_update_ != NULL) {
    delete actor_update_;
  }
  actor_update_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_update_transform_ != NULL) {
    delete actor_update_transform_;
  }
  actor_update_transform_ = NULL;
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_delete_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(actor_delete_));
  _internal_metadata_.Clear();
}

bool OverallSituationDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.OverallSituationDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.OverallSituationDataType set_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_set_type(static_cast< ::Gamedata::OverallSituationDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.OverallSituationSkyInfo sky_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sky_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityMeshMasterInfo actor_add = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FTransform actor_add_transform = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_add_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityMeshMasterInfo actor_update = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FTransform actor_update_transform = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_update_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actor_delete = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.OverallSituationDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.OverallSituationDataRequest)
  return false;
#undef DO_
}

void OverallSituationDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.OverallSituationDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // .Gamedata.OverallSituationDataType set_type = 2;
  if (this->set_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->set_type(), output);
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 4;
  if (this->has_sky_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sky_info_, output);
  }

  // .Gamedata.EntityMeshMasterInfo actor_add = 5;
  if (this->has_actor_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->actor_add_, output);
  }

  // .Gamedata.FTransform actor_add_transform = 6;
  if (this->has_actor_add_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->actor_add_transform_, output);
  }

  // .Gamedata.EntityMeshMasterInfo actor_update = 7;
  if (this->has_actor_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->actor_update_, output);
  }

  // .Gamedata.FTransform actor_update_transform = 8;
  if (this->has_actor_update_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->actor_update_transform_, output);
  }

  // int32 actor_delete = 9;
  if (this->actor_delete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->actor_delete(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.OverallSituationDataRequest)
}

::google::protobuf::uint8* OverallSituationDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.OverallSituationDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // .Gamedata.OverallSituationDataType set_type = 2;
  if (this->set_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->set_type(), target);
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 4;
  if (this->has_sky_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->sky_info_, deterministic, target);
  }

  // .Gamedata.EntityMeshMasterInfo actor_add = 5;
  if (this->has_actor_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->actor_add_, deterministic, target);
  }

  // .Gamedata.FTransform actor_add_transform = 6;
  if (this->has_actor_add_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->actor_add_transform_, deterministic, target);
  }

  // .Gamedata.EntityMeshMasterInfo actor_update = 7;
  if (this->has_actor_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->actor_update_, deterministic, target);
  }

  // .Gamedata.FTransform actor_update_transform = 8;
  if (this->has_actor_update_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->actor_update_transform_, deterministic, target);
  }

  // int32 actor_delete = 9;
  if (this->actor_delete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->actor_delete(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.OverallSituationDataRequest)
  return target;
}

size_t OverallSituationDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.OverallSituationDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gamedata.OverallSituationSkyInfo sky_info = 4;
  if (this->has_sky_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sky_info_);
  }

  // .Gamedata.EntityMeshMasterInfo actor_add = 5;
  if (this->has_actor_add()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_add_);
  }

  // .Gamedata.FTransform actor_add_transform = 6;
  if (this->has_actor_add_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_add_transform_);
  }

  // .Gamedata.EntityMeshMasterInfo actor_update = 7;
  if (this->has_actor_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_update_);
  }

  // .Gamedata.FTransform actor_update_transform = 8;
  if (this->has_actor_update_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_update_transform_);
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // .Gamedata.OverallSituationDataType set_type = 2;
  if (this->set_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->set_type());
  }

  // int32 actor_delete = 9;
  if (this->actor_delete() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_delete());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverallSituationDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.OverallSituationDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OverallSituationDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OverallSituationDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.OverallSituationDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.OverallSituationDataRequest)
    MergeFrom(*source);
  }
}

void OverallSituationDataRequest::MergeFrom(const OverallSituationDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.OverallSituationDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sky_info()) {
    mutable_sky_info()->::Gamedata::OverallSituationSkyInfo::MergeFrom(from.sky_info());
  }
  if (from.has_actor_add()) {
    mutable_actor_add()->::Gamedata::EntityMeshMasterInfo::MergeFrom(from.actor_add());
  }
  if (from.has_actor_add_transform()) {
    mutable_actor_add_transform()->::Gamedata::FTransform::MergeFrom(from.actor_add_transform());
  }
  if (from.has_actor_update()) {
    mutable_actor_update()->::Gamedata::EntityMeshMasterInfo::MergeFrom(from.actor_update());
  }
  if (from.has_actor_update_transform()) {
    mutable_actor_update_transform()->::Gamedata::FTransform::MergeFrom(from.actor_update_transform());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.set_type() != 0) {
    set_set_type(from.set_type());
  }
  if (from.actor_delete() != 0) {
    set_actor_delete(from.actor_delete());
  }
}

void OverallSituationDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.OverallSituationDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverallSituationDataRequest::CopyFrom(const OverallSituationDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.OverallSituationDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverallSituationDataRequest::IsInitialized() const {
  return true;
}

void OverallSituationDataRequest::Swap(OverallSituationDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverallSituationDataRequest::InternalSwap(OverallSituationDataRequest* other) {
  using std::swap;
  swap(sky_info_, other->sky_info_);
  swap(actor_add_, other->actor_add_);
  swap(actor_add_transform_, other->actor_add_transform_);
  swap(actor_update_, other->actor_update_);
  swap(actor_update_transform_, other->actor_update_transform_);
  swap(player_id_, other->player_id_);
  swap(set_type_, other->set_type_);
  swap(actor_delete_, other->actor_delete_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OverallSituationDataRequest::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

OverallSituationDataResponse_ActorListEntry_DoNotUse::OverallSituationDataResponse_ActorListEntry_DoNotUse() {}
OverallSituationDataResponse_ActorListEntry_DoNotUse::OverallSituationDataResponse_ActorListEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void OverallSituationDataResponse_ActorListEntry_DoNotUse::MergeFrom(const OverallSituationDataResponse_ActorListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata OverallSituationDataResponse_ActorListEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[55];
}
void OverallSituationDataResponse_ActorListEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void OverallSituationDataResponse::InitAsDefaultInstance() {
  ::Gamedata::_OverallSituationDataResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::Gamedata::OverallSituationData*>(
      ::Gamedata::OverallSituationData::internal_default_instance());
  ::Gamedata::_OverallSituationDataResponse_default_instance_._instance.get_mutable()->sky_info_ = const_cast< ::Gamedata::OverallSituationSkyInfo*>(
      ::Gamedata::OverallSituationSkyInfo::internal_default_instance());
  ::Gamedata::_OverallSituationDataResponse_default_instance_._instance.get_mutable()->actor_add_ = const_cast< ::Gamedata::EntityMeshMasterInfo*>(
      ::Gamedata::EntityMeshMasterInfo::internal_default_instance());
  ::Gamedata::_OverallSituationDataResponse_default_instance_._instance.get_mutable()->actor_add_transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
  ::Gamedata::_OverallSituationDataResponse_default_instance_._instance.get_mutable()->actor_update_ = const_cast< ::Gamedata::EntityMeshMasterInfo*>(
      ::Gamedata::EntityMeshMasterInfo::internal_default_instance());
  ::Gamedata::_OverallSituationDataResponse_default_instance_._instance.get_mutable()->actor_update_transform_ = const_cast< ::Gamedata::FTransform*>(
      ::Gamedata::FTransform::internal_default_instance());
}
void OverallSituationDataResponse::clear_actor_add_transform() {
  if (GetArenaNoVirtual() == NULL && actor_add_transform_ != NULL) {
    delete actor_add_transform_;
  }
  actor_add_transform_ = NULL;
}
void OverallSituationDataResponse::clear_actor_update_transform() {
  if (GetArenaNoVirtual() == NULL && actor_update_transform_ != NULL) {
    delete actor_update_transform_;
  }
  actor_update_transform_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverallSituationDataResponse::kSetTypeFieldNumber;
const int OverallSituationDataResponse::kDataFieldNumber;
const int OverallSituationDataResponse::kSkyInfoFieldNumber;
const int OverallSituationDataResponse::kActorListFieldNumber;
const int OverallSituationDataResponse::kActorAddFieldNumber;
const int OverallSituationDataResponse::kActorAddTransformFieldNumber;
const int OverallSituationDataResponse::kActorUpdateFieldNumber;
const int OverallSituationDataResponse::kActorUpdateTransformFieldNumber;
const int OverallSituationDataResponse::kActorDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverallSituationDataResponse::OverallSituationDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsOverallSituationDataResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.OverallSituationDataResponse)
}
OverallSituationDataResponse::OverallSituationDataResponse(const OverallSituationDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_list_.MergeFrom(from.actor_list_);
  if (from.has_data()) {
    data_ = new ::Gamedata::OverallSituationData(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_sky_info()) {
    sky_info_ = new ::Gamedata::OverallSituationSkyInfo(*from.sky_info_);
  } else {
    sky_info_ = NULL;
  }
  if (from.has_actor_add()) {
    actor_add_ = new ::Gamedata::EntityMeshMasterInfo(*from.actor_add_);
  } else {
    actor_add_ = NULL;
  }
  if (from.has_actor_add_transform()) {
    actor_add_transform_ = new ::Gamedata::FTransform(*from.actor_add_transform_);
  } else {
    actor_add_transform_ = NULL;
  }
  if (from.has_actor_update()) {
    actor_update_ = new ::Gamedata::EntityMeshMasterInfo(*from.actor_update_);
  } else {
    actor_update_ = NULL;
  }
  if (from.has_actor_update_transform()) {
    actor_update_transform_ = new ::Gamedata::FTransform(*from.actor_update_transform_);
  } else {
    actor_update_transform_ = NULL;
  }
  ::memcpy(&set_type_, &from.set_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&actor_delete_) -
    reinterpret_cast<char*>(&set_type_)) + sizeof(actor_delete_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.OverallSituationDataResponse)
}

void OverallSituationDataResponse::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_delete_) -
      reinterpret_cast<char*>(&data_)) + sizeof(actor_delete_));
  _cached_size_ = 0;
}

OverallSituationDataResponse::~OverallSituationDataResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.OverallSituationDataResponse)
  SharedDtor();
}

void OverallSituationDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete sky_info_;
  if (this != internal_default_instance()) delete actor_add_;
  if (this != internal_default_instance()) delete actor_add_transform_;
  if (this != internal_default_instance()) delete actor_update_;
  if (this != internal_default_instance()) delete actor_update_transform_;
}

void OverallSituationDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverallSituationDataResponse::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OverallSituationDataResponse& OverallSituationDataResponse::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsOverallSituationDataResponse();
  return *internal_default_instance();
}

OverallSituationDataResponse* OverallSituationDataResponse::New(::google::protobuf::Arena* arena) const {
  OverallSituationDataResponse* n = new OverallSituationDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OverallSituationDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.OverallSituationDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_list_.Clear();
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && sky_info_ != NULL) {
    delete sky_info_;
  }
  sky_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_add_ != NULL) {
    delete actor_add_;
  }
  actor_add_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_add_transform_ != NULL) {
    delete actor_add_transform_;
  }
  actor_add_transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_update_ != NULL) {
    delete actor_update_;
  }
  actor_update_ = NULL;
  if (GetArenaNoVirtual() == NULL && actor_update_transform_ != NULL) {
    delete actor_update_transform_;
  }
  actor_update_transform_ = NULL;
  ::memset(&set_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_delete_) -
      reinterpret_cast<char*>(&set_type_)) + sizeof(actor_delete_));
  _internal_metadata_.Clear();
}

bool OverallSituationDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.OverallSituationDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.OverallSituationDataType set_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_set_type(static_cast< ::Gamedata::OverallSituationDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.OverallSituationData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.OverallSituationSkyInfo sky_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sky_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          OverallSituationDataResponse_ActorListEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              OverallSituationDataResponse_ActorListEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo > > parser(&actor_list_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityMeshMasterInfo actor_add = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FTransform actor_add_transform = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_add_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EntityMeshMasterInfo actor_update = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.FTransform actor_update_transform = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor_update_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actor_delete = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.OverallSituationDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.OverallSituationDataResponse)
  return false;
#undef DO_
}

void OverallSituationDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.OverallSituationDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.OverallSituationDataType set_type = 1;
  if (this->set_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->set_type(), output);
  }

  // .Gamedata.OverallSituationData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 4;
  if (this->has_sky_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sky_info_, output);
  }

  // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 5;
  if (!this->actor_list().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->actor_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->actor_list().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OverallSituationDataResponse_ActorListEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(actor_list_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<OverallSituationDataResponse_ActorListEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it) {
        entry.reset(actor_list_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // .Gamedata.EntityMeshMasterInfo actor_add = 6;
  if (this->has_actor_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->actor_add_, output);
  }

  // .Gamedata.FTransform actor_add_transform = 7;
  if (this->has_actor_add_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->actor_add_transform_, output);
  }

  // .Gamedata.EntityMeshMasterInfo actor_update = 8;
  if (this->has_actor_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->actor_update_, output);
  }

  // .Gamedata.FTransform actor_update_transform = 9;
  if (this->has_actor_update_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->actor_update_transform_, output);
  }

  // int32 actor_delete = 10;
  if (this->actor_delete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->actor_delete(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.OverallSituationDataResponse)
}

::google::protobuf::uint8* OverallSituationDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.OverallSituationDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.OverallSituationDataType set_type = 1;
  if (this->set_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->set_type(), target);
  }

  // .Gamedata.OverallSituationData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 4;
  if (this->has_sky_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->sky_info_, deterministic, target);
  }

  // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 5;
  if (!this->actor_list().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->actor_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->actor_list().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OverallSituationDataResponse_ActorListEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(actor_list_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<OverallSituationDataResponse_ActorListEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
          it = this->actor_list().begin();
          it != this->actor_list().end(); ++it) {
        entry.reset(actor_list_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // .Gamedata.EntityMeshMasterInfo actor_add = 6;
  if (this->has_actor_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->actor_add_, deterministic, target);
  }

  // .Gamedata.FTransform actor_add_transform = 7;
  if (this->has_actor_add_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->actor_add_transform_, deterministic, target);
  }

  // .Gamedata.EntityMeshMasterInfo actor_update = 8;
  if (this->has_actor_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->actor_update_, deterministic, target);
  }

  // .Gamedata.FTransform actor_update_transform = 9;
  if (this->has_actor_update_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->actor_update_transform_, deterministic, target);
  }

  // int32 actor_delete = 10;
  if (this->actor_delete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->actor_delete(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.OverallSituationDataResponse)
  return target;
}

size_t OverallSituationDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.OverallSituationDataResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.EntityMeshMasterInfo> actor_list = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actor_list_size());
  {
    ::google::protobuf::scoped_ptr<OverallSituationDataResponse_ActorListEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::EntityMeshMasterInfo >::const_iterator
        it = this->actor_list().begin();
        it != this->actor_list().end(); ++it) {
      entry.reset(actor_list_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .Gamedata.OverallSituationData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // .Gamedata.OverallSituationSkyInfo sky_info = 4;
  if (this->has_sky_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sky_info_);
  }

  // .Gamedata.EntityMeshMasterInfo actor_add = 6;
  if (this->has_actor_add()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_add_);
  }

  // .Gamedata.FTransform actor_add_transform = 7;
  if (this->has_actor_add_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_add_transform_);
  }

  // .Gamedata.EntityMeshMasterInfo actor_update = 8;
  if (this->has_actor_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_update_);
  }

  // .Gamedata.FTransform actor_update_transform = 9;
  if (this->has_actor_update_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actor_update_transform_);
  }

  // .Gamedata.OverallSituationDataType set_type = 1;
  if (this->set_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->set_type());
  }

  // int32 actor_delete = 10;
  if (this->actor_delete() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_delete());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverallSituationDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.OverallSituationDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OverallSituationDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OverallSituationDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.OverallSituationDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.OverallSituationDataResponse)
    MergeFrom(*source);
  }
}

void OverallSituationDataResponse::MergeFrom(const OverallSituationDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.OverallSituationDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actor_list_.MergeFrom(from.actor_list_);
  if (from.has_data()) {
    mutable_data()->::Gamedata::OverallSituationData::MergeFrom(from.data());
  }
  if (from.has_sky_info()) {
    mutable_sky_info()->::Gamedata::OverallSituationSkyInfo::MergeFrom(from.sky_info());
  }
  if (from.has_actor_add()) {
    mutable_actor_add()->::Gamedata::EntityMeshMasterInfo::MergeFrom(from.actor_add());
  }
  if (from.has_actor_add_transform()) {
    mutable_actor_add_transform()->::Gamedata::FTransform::MergeFrom(from.actor_add_transform());
  }
  if (from.has_actor_update()) {
    mutable_actor_update()->::Gamedata::EntityMeshMasterInfo::MergeFrom(from.actor_update());
  }
  if (from.has_actor_update_transform()) {
    mutable_actor_update_transform()->::Gamedata::FTransform::MergeFrom(from.actor_update_transform());
  }
  if (from.set_type() != 0) {
    set_set_type(from.set_type());
  }
  if (from.actor_delete() != 0) {
    set_actor_delete(from.actor_delete());
  }
}

void OverallSituationDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.OverallSituationDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverallSituationDataResponse::CopyFrom(const OverallSituationDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.OverallSituationDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverallSituationDataResponse::IsInitialized() const {
  return true;
}

void OverallSituationDataResponse::Swap(OverallSituationDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverallSituationDataResponse::InternalSwap(OverallSituationDataResponse* other) {
  using std::swap;
  actor_list_.Swap(&other->actor_list_);
  swap(data_, other->data_);
  swap(sky_info_, other->sky_info_);
  swap(actor_add_, other->actor_add_);
  swap(actor_add_transform_, other->actor_add_transform_);
  swap(actor_update_, other->actor_update_);
  swap(actor_update_transform_, other->actor_update_transform_);
  swap(set_type_, other->set_type_);
  swap(actor_delete_, other->actor_delete_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OverallSituationDataResponse::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EventCommandInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventCommandInfo::kCommandFieldNumber;
const int EventCommandInfo::kEntityListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventCommandInfo::EventCommandInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEventCommandInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EventCommandInfo)
}
EventCommandInfo::EventCommandInfo(const EventCommandInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entity_list_(from.entity_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.command().size() > 0) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.EventCommandInfo)
}

void EventCommandInfo::SharedCtor() {
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EventCommandInfo::~EventCommandInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EventCommandInfo)
  SharedDtor();
}

void EventCommandInfo::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventCommandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventCommandInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventCommandInfo& EventCommandInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEventCommandInfo();
  return *internal_default_instance();
}

EventCommandInfo* EventCommandInfo::New(::google::protobuf::Arena* arena) const {
  EventCommandInfo* n = new EventCommandInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventCommandInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EventCommandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_list_.Clear();
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EventCommandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EventCommandInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command().data(), static_cast<int>(this->command().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.EventCommandInfo.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 entity_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entity_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_entity_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EventCommandInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EventCommandInfo)
  return false;
#undef DO_
}

void EventCommandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EventCommandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EventCommandInfo.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // repeated int32 entity_list = 2;
  if (this->entity_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _entity_list_cached_byte_size_));
  }
  for (int i = 0, n = this->entity_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->entity_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EventCommandInfo)
}

::google::protobuf::uint8* EventCommandInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EventCommandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.EventCommandInfo.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // repeated int32 entity_list = 2;
  if (this->entity_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _entity_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->entity_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EventCommandInfo)
  return target;
}

size_t EventCommandInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EventCommandInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 entity_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->entity_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entity_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventCommandInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EventCommandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EventCommandInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventCommandInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EventCommandInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EventCommandInfo)
    MergeFrom(*source);
  }
}

void EventCommandInfo::MergeFrom(const EventCommandInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EventCommandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_list_.MergeFrom(from.entity_list_);
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
}

void EventCommandInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EventCommandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventCommandInfo::CopyFrom(const EventCommandInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EventCommandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCommandInfo::IsInitialized() const {
  return true;
}

void EventCommandInfo::Swap(EventCommandInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventCommandInfo::InternalSwap(EventCommandInfo* other) {
  using std::swap;
  entity_list_.InternalSwap(&other->entity_list_);
  command_.Swap(&other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventCommandInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EventInfo::InitAsDefaultInstance() {
  ::Gamedata::_EventInfo_default_instance_._instance.get_mutable()->command_info_ = const_cast< ::Gamedata::EventCommandInfo*>(
      ::Gamedata::EventCommandInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventInfo::kPlayerIdFieldNumber;
const int EventInfo::kEventTypeFieldNumber;
const int EventInfo::kBroadcastRangeTypeFieldNumber;
const int EventInfo::kBroadcastPlayerListFieldNumber;
const int EventInfo::kCommandInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventInfo::EventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsEventInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.EventInfo)
}
EventInfo::EventInfo(const EventInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      broadcast_player_list_(from.broadcast_player_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command_info()) {
    command_info_ = new ::Gamedata::EventCommandInfo(*from.command_info_);
  } else {
    command_info_ = NULL;
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_range_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(broadcast_range_type_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.EventInfo)
}

void EventInfo::SharedCtor() {
  ::memset(&command_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_range_type_) -
      reinterpret_cast<char*>(&command_info_)) + sizeof(broadcast_range_type_));
  _cached_size_ = 0;
}

EventInfo::~EventInfo() {
  // @@protoc_insertion_point(destructor:Gamedata.EventInfo)
  SharedDtor();
}

void EventInfo::SharedDtor() {
  if (this != internal_default_instance()) delete command_info_;
}

void EventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventInfo& EventInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsEventInfo();
  return *internal_default_instance();
}

EventInfo* EventInfo::New(::google::protobuf::Arena* arena) const {
  EventInfo* n = new EventInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.EventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_player_list_.Clear();
  if (GetArenaNoVirtual() == NULL && command_info_ != NULL) {
    delete command_info_;
  }
  command_info_ = NULL;
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_range_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(broadcast_range_type_));
  _internal_metadata_.Clear();
}

bool EventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.EventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::Gamedata::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EventBroadcastRangeType broadcast_range_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_broadcast_range_type(static_cast< ::Gamedata::EventBroadcastRangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 broadcast_player_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_broadcast_player_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_broadcast_player_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gamedata.EventCommandInfo command_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.EventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.EventInfo)
  return false;
#undef DO_
}

void EventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.EventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // .Gamedata.EventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // .Gamedata.EventBroadcastRangeType broadcast_range_type = 3;
  if (this->broadcast_range_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->broadcast_range_type(), output);
  }

  // repeated int32 broadcast_player_list = 4;
  if (this->broadcast_player_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _broadcast_player_list_cached_byte_size_));
  }
  for (int i = 0, n = this->broadcast_player_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->broadcast_player_list(i), output);
  }

  // .Gamedata.EventCommandInfo command_info = 5;
  if (this->has_command_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->command_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.EventInfo)
}

::google::protobuf::uint8* EventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.EventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // .Gamedata.EventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // .Gamedata.EventBroadcastRangeType broadcast_range_type = 3;
  if (this->broadcast_range_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->broadcast_range_type(), target);
  }

  // repeated int32 broadcast_player_list = 4;
  if (this->broadcast_player_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _broadcast_player_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->broadcast_player_list_, target);
  }

  // .Gamedata.EventCommandInfo command_info = 5;
  if (this->has_command_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->command_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.EventInfo)
  return target;
}

size_t EventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.EventInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 broadcast_player_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->broadcast_player_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _broadcast_player_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .Gamedata.EventCommandInfo command_info = 5;
  if (this->has_command_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->command_info_);
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // .Gamedata.EventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  // .Gamedata.EventBroadcastRangeType broadcast_range_type = 3;
  if (this->broadcast_range_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->broadcast_range_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.EventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EventInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.EventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.EventInfo)
    MergeFrom(*source);
  }
}

void EventInfo::MergeFrom(const EventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.EventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcast_player_list_.MergeFrom(from.broadcast_player_list_);
  if (from.has_command_info()) {
    mutable_command_info()->::Gamedata::EventCommandInfo::MergeFrom(from.command_info());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  if (from.broadcast_range_type() != 0) {
    set_broadcast_range_type(from.broadcast_range_type());
  }
}

void EventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.EventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventInfo::CopyFrom(const EventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.EventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInfo::IsInitialized() const {
  return true;
}

void EventInfo::Swap(EventInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventInfo::InternalSwap(EventInfo* other) {
  using std::swap;
  broadcast_player_list_.InternalSwap(&other->broadcast_player_list_);
  swap(command_info_, other->command_info_);
  swap(player_id_, other->player_id_);
  swap(event_type_, other->event_type_);
  swap(broadcast_range_type_, other->broadcast_range_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimelineOneFrameOneEntityData::InitAsDefaultInstance() {
  ::Gamedata::_TimelineOneFrameOneEntityData_default_instance_._instance.get_mutable()->collision_transform_ = const_cast< ::Gamedata::FTransform_s*>(
      ::Gamedata::FTransform_s::internal_default_instance());
}
void TimelineOneFrameOneEntityData::clear_collision_transform() {
  if (GetArenaNoVirtual() == NULL && collision_transform_ != NULL) {
    delete collision_transform_;
  }
  collision_transform_ = NULL;
}
void TimelineOneFrameOneEntityData::clear_child_transform() {
  child_transform_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimelineOneFrameOneEntityData::kCollisionTransformFieldNumber;
const int TimelineOneFrameOneEntityData::kChildTransformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimelineOneFrameOneEntityData::TimelineOneFrameOneEntityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsTimelineOneFrameOneEntityData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.TimelineOneFrameOneEntityData)
}
TimelineOneFrameOneEntityData::TimelineOneFrameOneEntityData(const TimelineOneFrameOneEntityData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_transform_(from.child_transform_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_collision_transform()) {
    collision_transform_ = new ::Gamedata::FTransform_s(*from.collision_transform_);
  } else {
    collision_transform_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.TimelineOneFrameOneEntityData)
}

void TimelineOneFrameOneEntityData::SharedCtor() {
  collision_transform_ = NULL;
  _cached_size_ = 0;
}

TimelineOneFrameOneEntityData::~TimelineOneFrameOneEntityData() {
  // @@protoc_insertion_point(destructor:Gamedata.TimelineOneFrameOneEntityData)
  SharedDtor();
}

void TimelineOneFrameOneEntityData::SharedDtor() {
  if (this != internal_default_instance()) delete collision_transform_;
}

void TimelineOneFrameOneEntityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimelineOneFrameOneEntityData::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimelineOneFrameOneEntityData& TimelineOneFrameOneEntityData::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsTimelineOneFrameOneEntityData();
  return *internal_default_instance();
}

TimelineOneFrameOneEntityData* TimelineOneFrameOneEntityData::New(::google::protobuf::Arena* arena) const {
  TimelineOneFrameOneEntityData* n = new TimelineOneFrameOneEntityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimelineOneFrameOneEntityData::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.TimelineOneFrameOneEntityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_transform_.Clear();
  if (GetArenaNoVirtual() == NULL && collision_transform_ != NULL) {
    delete collision_transform_;
  }
  collision_transform_ = NULL;
  _internal_metadata_.Clear();
}

bool TimelineOneFrameOneEntityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.TimelineOneFrameOneEntityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.FTransform_s collision_transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_collision_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.FTransform_s child_transform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_child_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.TimelineOneFrameOneEntityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.TimelineOneFrameOneEntityData)
  return false;
#undef DO_
}

void TimelineOneFrameOneEntityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.TimelineOneFrameOneEntityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform_s collision_transform = 1;
  if (this->has_collision_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->collision_transform_, output);
  }

  // repeated .Gamedata.FTransform_s child_transform = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_transform_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->child_transform(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.TimelineOneFrameOneEntityData)
}

::google::protobuf::uint8* TimelineOneFrameOneEntityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.TimelineOneFrameOneEntityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.FTransform_s collision_transform = 1;
  if (this->has_collision_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->collision_transform_, deterministic, target);
  }

  // repeated .Gamedata.FTransform_s child_transform = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_transform_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->child_transform(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.TimelineOneFrameOneEntityData)
  return target;
}

size_t TimelineOneFrameOneEntityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.TimelineOneFrameOneEntityData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.FTransform_s child_transform = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->child_transform_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->child_transform(static_cast<int>(i)));
    }
  }

  // .Gamedata.FTransform_s collision_transform = 1;
  if (this->has_collision_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->collision_transform_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimelineOneFrameOneEntityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.TimelineOneFrameOneEntityData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimelineOneFrameOneEntityData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimelineOneFrameOneEntityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.TimelineOneFrameOneEntityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.TimelineOneFrameOneEntityData)
    MergeFrom(*source);
  }
}

void TimelineOneFrameOneEntityData::MergeFrom(const TimelineOneFrameOneEntityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.TimelineOneFrameOneEntityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_transform_.MergeFrom(from.child_transform_);
  if (from.has_collision_transform()) {
    mutable_collision_transform()->::Gamedata::FTransform_s::MergeFrom(from.collision_transform());
  }
}

void TimelineOneFrameOneEntityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.TimelineOneFrameOneEntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimelineOneFrameOneEntityData::CopyFrom(const TimelineOneFrameOneEntityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.TimelineOneFrameOneEntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineOneFrameOneEntityData::IsInitialized() const {
  return true;
}

void TimelineOneFrameOneEntityData::Swap(TimelineOneFrameOneEntityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimelineOneFrameOneEntityData::InternalSwap(TimelineOneFrameOneEntityData* other) {
  using std::swap;
  child_transform_.InternalSwap(&other->child_transform_);
  swap(collision_transform_, other->collision_transform_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimelineOneFrameOneEntityData::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse() {}
TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::MergeFrom(const TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[60];
}
void TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TimelineOnewFrameAllEntityData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimelineOnewFrameAllEntityData::kEntityTransformMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimelineOnewFrameAllEntityData::TimelineOnewFrameAllEntityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsTimelineOnewFrameAllEntityData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.TimelineOnewFrameAllEntityData)
}
TimelineOnewFrameAllEntityData::TimelineOnewFrameAllEntityData(const TimelineOnewFrameAllEntityData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_transform_map_.MergeFrom(from.entity_transform_map_);
  // @@protoc_insertion_point(copy_constructor:Gamedata.TimelineOnewFrameAllEntityData)
}

void TimelineOnewFrameAllEntityData::SharedCtor() {
  _cached_size_ = 0;
}

TimelineOnewFrameAllEntityData::~TimelineOnewFrameAllEntityData() {
  // @@protoc_insertion_point(destructor:Gamedata.TimelineOnewFrameAllEntityData)
  SharedDtor();
}

void TimelineOnewFrameAllEntityData::SharedDtor() {
}

void TimelineOnewFrameAllEntityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimelineOnewFrameAllEntityData::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimelineOnewFrameAllEntityData& TimelineOnewFrameAllEntityData::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsTimelineOnewFrameAllEntityData();
  return *internal_default_instance();
}

TimelineOnewFrameAllEntityData* TimelineOnewFrameAllEntityData::New(::google::protobuf::Arena* arena) const {
  TimelineOnewFrameAllEntityData* n = new TimelineOnewFrameAllEntityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimelineOnewFrameAllEntityData::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.TimelineOnewFrameAllEntityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_transform_map_.Clear();
  _internal_metadata_.Clear();
}

bool TimelineOnewFrameAllEntityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.TimelineOnewFrameAllEntityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .Gamedata.TimelineOneFrameOneEntityData> entity_transform_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse,
              ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData > > parser(&entity_transform_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.TimelineOnewFrameAllEntityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.TimelineOnewFrameAllEntityData)
  return false;
#undef DO_
}

void TimelineOnewFrameAllEntityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.TimelineOnewFrameAllEntityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .Gamedata.TimelineOneFrameOneEntityData> entity_transform_map = 2;
  if (!this->entity_transform_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->entity_transform_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->entity_transform_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_iterator
          it = this->entity_transform_map().begin();
          it != this->entity_transform_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entity_transform_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_iterator
          it = this->entity_transform_map().begin();
          it != this->entity_transform_map().end(); ++it) {
        entry.reset(entity_transform_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.TimelineOnewFrameAllEntityData)
}

::google::protobuf::uint8* TimelineOnewFrameAllEntityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.TimelineOnewFrameAllEntityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .Gamedata.TimelineOneFrameOneEntityData> entity_transform_map = 2;
  if (!this->entity_transform_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->entity_transform_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->entity_transform_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_iterator
          it = this->entity_transform_map().begin();
          it != this->entity_transform_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entity_transform_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_iterator
          it = this->entity_transform_map().begin();
          it != this->entity_transform_map().end(); ++it) {
        entry.reset(entity_transform_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.TimelineOnewFrameAllEntityData)
  return target;
}

size_t TimelineOnewFrameAllEntityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.TimelineOnewFrameAllEntityData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .Gamedata.TimelineOneFrameOneEntityData> entity_transform_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entity_transform_map_size());
  {
    ::google::protobuf::scoped_ptr<TimelineOnewFrameAllEntityData_EntityTransformMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::Gamedata::TimelineOneFrameOneEntityData >::const_iterator
        it = this->entity_transform_map().begin();
        it != this->entity_transform_map().end(); ++it) {
      entry.reset(entity_transform_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimelineOnewFrameAllEntityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.TimelineOnewFrameAllEntityData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimelineOnewFrameAllEntityData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimelineOnewFrameAllEntityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.TimelineOnewFrameAllEntityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.TimelineOnewFrameAllEntityData)
    MergeFrom(*source);
  }
}

void TimelineOnewFrameAllEntityData::MergeFrom(const TimelineOnewFrameAllEntityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.TimelineOnewFrameAllEntityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_transform_map_.MergeFrom(from.entity_transform_map_);
}

void TimelineOnewFrameAllEntityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.TimelineOnewFrameAllEntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimelineOnewFrameAllEntityData::CopyFrom(const TimelineOnewFrameAllEntityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.TimelineOnewFrameAllEntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineOnewFrameAllEntityData::IsInitialized() const {
  return true;
}

void TimelineOnewFrameAllEntityData::Swap(TimelineOnewFrameAllEntityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimelineOnewFrameAllEntityData::InternalSwap(TimelineOnewFrameAllEntityData* other) {
  using std::swap;
  entity_transform_map_.Swap(&other->entity_transform_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimelineOnewFrameAllEntityData::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimelineOneSecondAllFrameData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimelineOneSecondAllFrameData::kTimeFieldNumber;
const int TimelineOneSecondAllFrameData::kFrameListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimelineOneSecondAllFrameData::TimelineOneSecondAllFrameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsTimelineOneSecondAllFrameData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.TimelineOneSecondAllFrameData)
}
TimelineOneSecondAllFrameData::TimelineOneSecondAllFrameData(const TimelineOneSecondAllFrameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frame_list_(from.frame_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.TimelineOneSecondAllFrameData)
}

void TimelineOneSecondAllFrameData::SharedCtor() {
  time_ = 0;
  _cached_size_ = 0;
}

TimelineOneSecondAllFrameData::~TimelineOneSecondAllFrameData() {
  // @@protoc_insertion_point(destructor:Gamedata.TimelineOneSecondAllFrameData)
  SharedDtor();
}

void TimelineOneSecondAllFrameData::SharedDtor() {
}

void TimelineOneSecondAllFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimelineOneSecondAllFrameData::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimelineOneSecondAllFrameData& TimelineOneSecondAllFrameData::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsTimelineOneSecondAllFrameData();
  return *internal_default_instance();
}

TimelineOneSecondAllFrameData* TimelineOneSecondAllFrameData::New(::google::protobuf::Arena* arena) const {
  TimelineOneSecondAllFrameData* n = new TimelineOneSecondAllFrameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimelineOneSecondAllFrameData::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.TimelineOneSecondAllFrameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_list_.Clear();
  time_ = 0;
  _internal_metadata_.Clear();
}

bool TimelineOneSecondAllFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.TimelineOneSecondAllFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Gamedata.TimelineOnewFrameAllEntityData frame_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_frame_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.TimelineOneSecondAllFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.TimelineOneSecondAllFrameData)
  return false;
#undef DO_
}

void TimelineOneSecondAllFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.TimelineOneSecondAllFrameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // repeated .Gamedata.TimelineOnewFrameAllEntityData frame_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.TimelineOneSecondAllFrameData)
}

::google::protobuf::uint8* TimelineOneSecondAllFrameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.TimelineOneSecondAllFrameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // repeated .Gamedata.TimelineOnewFrameAllEntityData frame_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->frame_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.TimelineOneSecondAllFrameData)
  return target;
}

size_t TimelineOneSecondAllFrameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.TimelineOneSecondAllFrameData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gamedata.TimelineOnewFrameAllEntityData frame_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frame_list(static_cast<int>(i)));
    }
  }

  // int32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimelineOneSecondAllFrameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.TimelineOneSecondAllFrameData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimelineOneSecondAllFrameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimelineOneSecondAllFrameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.TimelineOneSecondAllFrameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.TimelineOneSecondAllFrameData)
    MergeFrom(*source);
  }
}

void TimelineOneSecondAllFrameData::MergeFrom(const TimelineOneSecondAllFrameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.TimelineOneSecondAllFrameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_list_.MergeFrom(from.frame_list_);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void TimelineOneSecondAllFrameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.TimelineOneSecondAllFrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimelineOneSecondAllFrameData::CopyFrom(const TimelineOneSecondAllFrameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.TimelineOneSecondAllFrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineOneSecondAllFrameData::IsInitialized() const {
  return true;
}

void TimelineOneSecondAllFrameData::Swap(TimelineOneSecondAllFrameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimelineOneSecondAllFrameData::InternalSwap(TimelineOneSecondAllFrameData* other) {
  using std::swap;
  frame_list_.InternalSwap(&other->frame_list_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimelineOneSecondAllFrameData::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Gamedata

// @@protoc_insertion_point(global_scope)

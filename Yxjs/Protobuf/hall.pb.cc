// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall.proto

#include "hall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Gamedata {
class PlayerLoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoginRequest>
      _instance;
} _PlayerLoginRequest_default_instance_;
class PlayerLoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoginResponse>
      _instance;
} _PlayerLoginResponse_default_instance_;
class PlayerLogoutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLogoutRequest>
      _instance;
} _PlayerLogoutRequest_default_instance_;
class PlayerLogoutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLogoutResponse>
      _instance;
} _PlayerLogoutResponse_default_instance_;
class CreateRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateRoomRequest>
      _instance;
} _CreateRoomRequest_default_instance_;
class CreateRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateRoomResponse>
      _instance;
} _CreateRoomResponse_default_instance_;
class JoinRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomRequest>
      _instance;
} _JoinRoomRequest_default_instance_;
class JoinRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomResponse>
      _instance;
} _JoinRoomResponse_default_instance_;
class JoinMapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinMapRequest>
      _instance;
} _JoinMapRequest_default_instance_;
class JoinMapResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinMapResponse>
      _instance;
} _JoinMapResponse_default_instance_;
class LeavelRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeavelRoomRequest>
      _instance;
} _LeavelRoomRequest_default_instance_;
class LeavelRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeavelRoomResponse>
      _instance;
} _LeavelRoomResponse_default_instance_;
}  // namespace Gamedata
namespace protobuf_hall_2eproto {
void InitDefaultsPlayerLoginRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerLoginRequest_default_instance_;
    new (ptr) ::Gamedata::PlayerLoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerLoginRequest::InitAsDefaultInstance();
}

void InitDefaultsPlayerLoginRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerLoginRequestImpl);
}

void InitDefaultsPlayerLoginResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerLoginResponse_default_instance_;
    new (ptr) ::Gamedata::PlayerLoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerLoginResponse::InitAsDefaultInstance();
}

void InitDefaultsPlayerLoginResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerLoginResponseImpl);
}

void InitDefaultsPlayerLogoutRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerLogoutRequest_default_instance_;
    new (ptr) ::Gamedata::PlayerLogoutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerLogoutRequest::InitAsDefaultInstance();
}

void InitDefaultsPlayerLogoutRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerLogoutRequestImpl);
}

void InitDefaultsPlayerLogoutResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_PlayerLogoutResponse_default_instance_;
    new (ptr) ::Gamedata::PlayerLogoutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::PlayerLogoutResponse::InitAsDefaultInstance();
}

void InitDefaultsPlayerLogoutResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerLogoutResponseImpl);
}

void InitDefaultsCreateRoomRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_CreateRoomRequest_default_instance_;
    new (ptr) ::Gamedata::CreateRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::CreateRoomRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateRoomRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateRoomRequestImpl);
}

void InitDefaultsCreateRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_CreateRoomResponse_default_instance_;
    new (ptr) ::Gamedata::CreateRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::CreateRoomResponse::InitAsDefaultInstance();
}

void InitDefaultsCreateRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateRoomResponseImpl);
}

void InitDefaultsJoinRoomRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_JoinRoomRequest_default_instance_;
    new (ptr) ::Gamedata::JoinRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::JoinRoomRequest::InitAsDefaultInstance();
}

void InitDefaultsJoinRoomRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinRoomRequestImpl);
}

void InitDefaultsJoinRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_JoinRoomResponse_default_instance_;
    new (ptr) ::Gamedata::JoinRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::JoinRoomResponse::InitAsDefaultInstance();
}

void InitDefaultsJoinRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinRoomResponseImpl);
}

void InitDefaultsJoinMapRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_JoinMapRequest_default_instance_;
    new (ptr) ::Gamedata::JoinMapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::JoinMapRequest::InitAsDefaultInstance();
}

void InitDefaultsJoinMapRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinMapRequestImpl);
}

void InitDefaultsJoinMapResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_JoinMapResponse_default_instance_;
    new (ptr) ::Gamedata::JoinMapResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::JoinMapResponse::InitAsDefaultInstance();
}

void InitDefaultsJoinMapResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinMapResponseImpl);
}

void InitDefaultsLeavelRoomRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_LeavelRoomRequest_default_instance_;
    new (ptr) ::Gamedata::LeavelRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::LeavelRoomRequest::InitAsDefaultInstance();
}

void InitDefaultsLeavelRoomRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeavelRoomRequestImpl);
}

void InitDefaultsLeavelRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Gamedata::_LeavelRoomResponse_default_instance_;
    new (ptr) ::Gamedata::LeavelRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gamedata::LeavelRoomResponse::InitAsDefaultInstance();
}

void InitDefaultsLeavelRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeavelRoomResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginRequest, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginResponse, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLoginResponse, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLogoutRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLogoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLogoutResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::PlayerLogoutResponse, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::CreateRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::CreateRoomRequest, roomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::CreateRoomRequest, mapname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::CreateRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::CreateRoomResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::CreateRoomResponse, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinRoomRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinRoomRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinRoomResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinRoomResponse, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinMapRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinMapRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinMapResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::JoinMapResponse, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::LeavelRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::LeavelRoomRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::LeavelRoomRequest, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::LeavelRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::LeavelRoomResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gamedata::LeavelRoomResponse, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Gamedata::PlayerLoginRequest)},
  { 7, -1, sizeof(::Gamedata::PlayerLoginResponse)},
  { 15, -1, sizeof(::Gamedata::PlayerLogoutRequest)},
  { 21, -1, sizeof(::Gamedata::PlayerLogoutResponse)},
  { 28, -1, sizeof(::Gamedata::CreateRoomRequest)},
  { 35, -1, sizeof(::Gamedata::CreateRoomResponse)},
  { 42, -1, sizeof(::Gamedata::JoinRoomRequest)},
  { 49, -1, sizeof(::Gamedata::JoinRoomResponse)},
  { 56, -1, sizeof(::Gamedata::JoinMapRequest)},
  { 63, -1, sizeof(::Gamedata::JoinMapResponse)},
  { 70, -1, sizeof(::Gamedata::LeavelRoomRequest)},
  { 77, -1, sizeof(::Gamedata::LeavelRoomResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerLogoutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_PlayerLogoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_CreateRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_CreateRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_JoinRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_JoinRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_JoinMapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_JoinMapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_LeavelRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Gamedata::_LeavelRoomResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hall.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nhall.proto\022\010Gamedata\032\020the_public.proto"
      "\"7\n\022PlayerLoginRequest\022\017\n\007account\030\001 \001(\t\022"
      "\020\n\010password\030\002 \001(\t\"X\n\023PlayerLoginResponse"
      "\022\"\n\004code\030\001 \001(\0162\024.Gamedata.ReturnCode\022\013\n\003"
      "msg\030\002 \001(\t\022\020\n\010playerId\030\003 \001(\005\"\'\n\023PlayerLog"
      "outRequest\022\020\n\010playerId\030\001 \001(\005\"G\n\024PlayerLo"
      "goutResponse\022\"\n\004code\030\001 \001(\0162\024.Gamedata.Re"
      "turnCode\022\013\n\003msg\030\002 \001(\t\"6\n\021CreateRoomReque"
      "st\022\020\n\010roomName\030\001 \001(\t\022\017\n\007mapName\030\002 \001(\t\"E\n"
      "\022CreateRoomResponse\022\"\n\004code\030\001 \001(\0162\024.Game"
      "data.ReturnCode\022\013\n\003msg\030\002 \001(\t\"3\n\017JoinRoom"
      "Request\022\016\n\006roomId\030\001 \001(\005\022\020\n\010playerId\030\002 \001("
      "\005\"C\n\020JoinRoomResponse\022\"\n\004code\030\001 \001(\0162\024.Ga"
      "medata.ReturnCode\022\013\n\003msg\030\002 \001(\t\"2\n\016JoinMa"
      "pRequest\022\016\n\006roomId\030\001 \001(\005\022\020\n\010playerId\030\002 \001"
      "(\005\"B\n\017JoinMapResponse\022\"\n\004code\030\001 \001(\0162\024.Ga"
      "medata.ReturnCode\022\013\n\003msg\030\002 \001(\t\"5\n\021Leavel"
      "RoomRequest\022\016\n\006roomId\030\001 \001(\005\022\020\n\010playerId\030"
      "\002 \001(\005\"E\n\022LeavelRoomResponse\022\"\n\004code\030\001 \001("
      "\0162\024.Gamedata.ReturnCode\022\013\n\003msg\030\002 \001(\t*<\n\n"
      "ReturnCode\022\021\n\rPB_Successful\020\000\022\r\n\tPB_Fail"
      "ed\020\001\022\014\n\010PB_Error\020\002B\022\n\020zc.test.Protobufb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 886);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hall.proto", &protobuf_RegisterTypes);
  ::protobuf_the_5fpublic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hall_2eproto
namespace Gamedata {
const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor() {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hall_2eproto::file_level_enum_descriptors[0];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlayerLoginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLoginRequest::kAccountFieldNumber;
const int PlayerLoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoginRequest::PlayerLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsPlayerLoginRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerLoginRequest)
}
PlayerLoginRequest::PlayerLoginRequest(const PlayerLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerLoginRequest)
}

void PlayerLoginRequest::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PlayerLoginRequest::~PlayerLoginRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerLoginRequest)
  SharedDtor();
}

void PlayerLoginRequest::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginRequest::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLoginRequest& PlayerLoginRequest::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsPlayerLoginRequest();
  return *internal_default_instance();
}

PlayerLoginRequest* PlayerLoginRequest::New(::google::protobuf::Arena* arena) const {
  PlayerLoginRequest* n = new PlayerLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PlayerLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.PlayerLoginRequest.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.PlayerLoginRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerLoginRequest)
  return false;
#undef DO_
}

void PlayerLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLoginRequest.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLoginRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerLoginRequest)
}

::google::protobuf::uint8* PlayerLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLoginRequest.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLoginRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerLoginRequest)
  return target;
}

size_t PlayerLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerLoginRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerLoginRequest)
    MergeFrom(*source);
  }
}

void PlayerLoginRequest::MergeFrom(const PlayerLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void PlayerLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginRequest::CopyFrom(const PlayerLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginRequest::IsInitialized() const {
  return true;
}

void PlayerLoginRequest::Swap(PlayerLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoginRequest::InternalSwap(PlayerLoginRequest* other) {
  using std::swap;
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLoginRequest::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerLoginResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLoginResponse::kCodeFieldNumber;
const int PlayerLoginResponse::kMsgFieldNumber;
const int PlayerLoginResponse::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoginResponse::PlayerLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsPlayerLoginResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerLoginResponse)
}
PlayerLoginResponse::PlayerLoginResponse(const PlayerLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerLoginResponse)
}

void PlayerLoginResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

PlayerLoginResponse::~PlayerLoginResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerLoginResponse)
  SharedDtor();
}

void PlayerLoginResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginResponse::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLoginResponse& PlayerLoginResponse::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsPlayerLoginResponse();
  return *internal_default_instance();
}

PlayerLoginResponse* PlayerLoginResponse::New(::google::protobuf::Arena* arena) const {
  PlayerLoginResponse* n = new PlayerLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  _internal_metadata_.Clear();
}

bool PlayerLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.ReturnCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::Gamedata::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.PlayerLoginResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerLoginResponse)
  return false;
#undef DO_
}

void PlayerLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLoginResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerLoginResponse)
}

::google::protobuf::uint8* PlayerLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLoginResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerLoginResponse)
  return target;
}

size_t PlayerLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerLoginResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerLoginResponse)
    MergeFrom(*source);
  }
}

void PlayerLoginResponse::MergeFrom(const PlayerLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void PlayerLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginResponse::CopyFrom(const PlayerLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginResponse::IsInitialized() const {
  return true;
}

void PlayerLoginResponse::Swap(PlayerLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoginResponse::InternalSwap(PlayerLoginResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLoginResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerLogoutRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLogoutRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLogoutRequest::PlayerLogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsPlayerLogoutRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerLogoutRequest)
}
PlayerLogoutRequest::PlayerLogoutRequest(const PlayerLogoutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerLogoutRequest)
}

void PlayerLogoutRequest::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

PlayerLogoutRequest::~PlayerLogoutRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerLogoutRequest)
  SharedDtor();
}

void PlayerLogoutRequest::SharedDtor() {
}

void PlayerLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLogoutRequest::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLogoutRequest& PlayerLogoutRequest::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsPlayerLogoutRequest();
  return *internal_default_instance();
}

PlayerLogoutRequest* PlayerLogoutRequest::New(::google::protobuf::Arena* arena) const {
  PlayerLogoutRequest* n = new PlayerLogoutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerLogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool PlayerLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerLogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerLogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerLogoutRequest)
  return false;
#undef DO_
}

void PlayerLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerLogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerLogoutRequest)
}

::google::protobuf::uint8* PlayerLogoutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerLogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerLogoutRequest)
  return target;
}

size_t PlayerLogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerLogoutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerLogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLogoutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLogoutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerLogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerLogoutRequest)
    MergeFrom(*source);
  }
}

void PlayerLogoutRequest::MergeFrom(const PlayerLogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerLogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void PlayerLogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerLogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogoutRequest::CopyFrom(const PlayerLogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerLogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogoutRequest::IsInitialized() const {
  return true;
}

void PlayerLogoutRequest::Swap(PlayerLogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLogoutRequest::InternalSwap(PlayerLogoutRequest* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLogoutRequest::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerLogoutResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLogoutResponse::kCodeFieldNumber;
const int PlayerLogoutResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLogoutResponse::PlayerLogoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsPlayerLogoutResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.PlayerLogoutResponse)
}
PlayerLogoutResponse::PlayerLogoutResponse(const PlayerLogoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.PlayerLogoutResponse)
}

void PlayerLogoutResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

PlayerLogoutResponse::~PlayerLogoutResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.PlayerLogoutResponse)
  SharedDtor();
}

void PlayerLogoutResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerLogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLogoutResponse::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLogoutResponse& PlayerLogoutResponse::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsPlayerLogoutResponse();
  return *internal_default_instance();
}

PlayerLogoutResponse* PlayerLogoutResponse::New(::google::protobuf::Arena* arena) const {
  PlayerLogoutResponse* n = new PlayerLogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.PlayerLogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool PlayerLogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.PlayerLogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.ReturnCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::Gamedata::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.PlayerLogoutResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.PlayerLogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.PlayerLogoutResponse)
  return false;
#undef DO_
}

void PlayerLogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.PlayerLogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLogoutResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.PlayerLogoutResponse)
}

::google::protobuf::uint8* PlayerLogoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.PlayerLogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.PlayerLogoutResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.PlayerLogoutResponse)
  return target;
}

size_t PlayerLogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.PlayerLogoutResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.PlayerLogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLogoutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLogoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.PlayerLogoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.PlayerLogoutResponse)
    MergeFrom(*source);
  }
}

void PlayerLogoutResponse::MergeFrom(const PlayerLogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.PlayerLogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void PlayerLogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.PlayerLogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogoutResponse::CopyFrom(const PlayerLogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.PlayerLogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogoutResponse::IsInitialized() const {
  return true;
}

void PlayerLogoutResponse::Swap(PlayerLogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLogoutResponse::InternalSwap(PlayerLogoutResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLogoutResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateRoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomRequest::kRoomNameFieldNumber;
const int CreateRoomRequest::kMapNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomRequest::CreateRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsCreateRoomRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.CreateRoomRequest)
}
CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mapname().size() > 0) {
    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  // @@protoc_insertion_point(copy_constructor:Gamedata.CreateRoomRequest)
}

void CreateRoomRequest::SharedCtor() {
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.CreateRoomRequest)
  SharedDtor();
}

void CreateRoomRequest::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomRequest::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoomRequest& CreateRoomRequest::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsCreateRoomRequest();
  return *internal_default_instance();
}

CreateRoomRequest* CreateRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateRoomRequest* n = new CreateRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.CreateRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.CreateRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string roomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.CreateRoomRequest.roomName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mapName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapname().data(), static_cast<int>(this->mapname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.CreateRoomRequest.mapName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.CreateRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.CreateRoomRequest)
  return false;
#undef DO_
}

void CreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.CreateRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.CreateRoomRequest.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  // string mapName = 2;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), static_cast<int>(this->mapname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.CreateRoomRequest.mapName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.CreateRoomRequest)
}

::google::protobuf::uint8* CreateRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.CreateRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.CreateRoomRequest.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  // string mapName = 2;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), static_cast<int>(this->mapname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.CreateRoomRequest.mapName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.CreateRoomRequest)
  return target;
}

size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.CreateRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string roomName = 1;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // string mapName = 2;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.CreateRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.CreateRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.CreateRoomRequest)
    MergeFrom(*source);
  }
}

void CreateRoomRequest::MergeFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.CreateRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.mapname().size() > 0) {

    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
}

void CreateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {
  return true;
}

void CreateRoomRequest::Swap(CreateRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  using std::swap;
  roomname_.Swap(&other->roomname_);
  mapname_.Swap(&other->mapname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoomRequest::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateRoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomResponse::kCodeFieldNumber;
const int CreateRoomResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomResponse::CreateRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsCreateRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.CreateRoomResponse)
}
CreateRoomResponse::CreateRoomResponse(const CreateRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.CreateRoomResponse)
}

void CreateRoomResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

CreateRoomResponse::~CreateRoomResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.CreateRoomResponse)
  SharedDtor();
}

void CreateRoomResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomResponse::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoomResponse& CreateRoomResponse::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsCreateRoomResponse();
  return *internal_default_instance();
}

CreateRoomResponse* CreateRoomResponse::New(::google::protobuf::Arena* arena) const {
  CreateRoomResponse* n = new CreateRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.CreateRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool CreateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.CreateRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.ReturnCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::Gamedata::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.CreateRoomResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.CreateRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.CreateRoomResponse)
  return false;
#undef DO_
}

void CreateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.CreateRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.CreateRoomResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.CreateRoomResponse)
}

::google::protobuf::uint8* CreateRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.CreateRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.CreateRoomResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.CreateRoomResponse)
  return target;
}

size_t CreateRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.CreateRoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.CreateRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.CreateRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.CreateRoomResponse)
    MergeFrom(*source);
  }
}

void CreateRoomResponse::MergeFrom(const CreateRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.CreateRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void CreateRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.CreateRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomResponse::CopyFrom(const CreateRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.CreateRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomResponse::IsInitialized() const {
  return true;
}

void CreateRoomResponse::Swap(CreateRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomResponse::InternalSwap(CreateRoomResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoomResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinRoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomRequest::kRoomIdFieldNumber;
const int JoinRoomRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomRequest::JoinRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsJoinRoomRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.JoinRoomRequest)
}
JoinRoomRequest::JoinRoomRequest(const JoinRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.JoinRoomRequest)
}

void JoinRoomRequest::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

JoinRoomRequest::~JoinRoomRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.JoinRoomRequest)
  SharedDtor();
}

void JoinRoomRequest::SharedDtor() {
}

void JoinRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomRequest::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomRequest& JoinRoomRequest::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsJoinRoomRequest();
  return *internal_default_instance();
}

JoinRoomRequest* JoinRoomRequest::New(::google::protobuf::Arena* arena) const {
  JoinRoomRequest* n = new JoinRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.JoinRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  _internal_metadata_.Clear();
}

bool JoinRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.JoinRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.JoinRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.JoinRoomRequest)
  return false;
#undef DO_
}

void JoinRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.JoinRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.JoinRoomRequest)
}

::google::protobuf::uint8* JoinRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.JoinRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.JoinRoomRequest)
  return target;
}

size_t JoinRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.JoinRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.JoinRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.JoinRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.JoinRoomRequest)
    MergeFrom(*source);
  }
}

void JoinRoomRequest::MergeFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.JoinRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void JoinRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomRequest::CopyFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomRequest::IsInitialized() const {
  return true;
}

void JoinRoomRequest::Swap(JoinRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomRequest::InternalSwap(JoinRoomRequest* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomRequest::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinRoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomResponse::kCodeFieldNumber;
const int JoinRoomResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomResponse::JoinRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsJoinRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.JoinRoomResponse)
}
JoinRoomResponse::JoinRoomResponse(const JoinRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.JoinRoomResponse)
}

void JoinRoomResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

JoinRoomResponse::~JoinRoomResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.JoinRoomResponse)
  SharedDtor();
}

void JoinRoomResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomResponse::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomResponse& JoinRoomResponse::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsJoinRoomResponse();
  return *internal_default_instance();
}

JoinRoomResponse* JoinRoomResponse::New(::google::protobuf::Arena* arena) const {
  JoinRoomResponse* n = new JoinRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.JoinRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool JoinRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.JoinRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.ReturnCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::Gamedata::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.JoinRoomResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.JoinRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.JoinRoomResponse)
  return false;
#undef DO_
}

void JoinRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.JoinRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.JoinRoomResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.JoinRoomResponse)
}

::google::protobuf::uint8* JoinRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.JoinRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.JoinRoomResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.JoinRoomResponse)
  return target;
}

size_t JoinRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.JoinRoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.JoinRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.JoinRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.JoinRoomResponse)
    MergeFrom(*source);
  }
}

void JoinRoomResponse::MergeFrom(const JoinRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.JoinRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void JoinRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.JoinRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomResponse::CopyFrom(const JoinRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.JoinRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomResponse::IsInitialized() const {
  return true;
}

void JoinRoomResponse::Swap(JoinRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomResponse::InternalSwap(JoinRoomResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinMapRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinMapRequest::kRoomIdFieldNumber;
const int JoinMapRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinMapRequest::JoinMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsJoinMapRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.JoinMapRequest)
}
JoinMapRequest::JoinMapRequest(const JoinMapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.JoinMapRequest)
}

void JoinMapRequest::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

JoinMapRequest::~JoinMapRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.JoinMapRequest)
  SharedDtor();
}

void JoinMapRequest::SharedDtor() {
}

void JoinMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinMapRequest::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinMapRequest& JoinMapRequest::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsJoinMapRequest();
  return *internal_default_instance();
}

JoinMapRequest* JoinMapRequest::New(::google::protobuf::Arena* arena) const {
  JoinMapRequest* n = new JoinMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.JoinMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  _internal_metadata_.Clear();
}

bool JoinMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.JoinMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.JoinMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.JoinMapRequest)
  return false;
#undef DO_
}

void JoinMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.JoinMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.JoinMapRequest)
}

::google::protobuf::uint8* JoinMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.JoinMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.JoinMapRequest)
  return target;
}

size_t JoinMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.JoinMapRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.JoinMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinMapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.JoinMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.JoinMapRequest)
    MergeFrom(*source);
  }
}

void JoinMapRequest::MergeFrom(const JoinMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.JoinMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void JoinMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.JoinMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinMapRequest::CopyFrom(const JoinMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.JoinMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMapRequest::IsInitialized() const {
  return true;
}

void JoinMapRequest::Swap(JoinMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinMapRequest::InternalSwap(JoinMapRequest* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinMapRequest::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinMapResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinMapResponse::kCodeFieldNumber;
const int JoinMapResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinMapResponse::JoinMapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsJoinMapResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.JoinMapResponse)
}
JoinMapResponse::JoinMapResponse(const JoinMapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.JoinMapResponse)
}

void JoinMapResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

JoinMapResponse::~JoinMapResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.JoinMapResponse)
  SharedDtor();
}

void JoinMapResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinMapResponse::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinMapResponse& JoinMapResponse::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsJoinMapResponse();
  return *internal_default_instance();
}

JoinMapResponse* JoinMapResponse::New(::google::protobuf::Arena* arena) const {
  JoinMapResponse* n = new JoinMapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.JoinMapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool JoinMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.JoinMapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.ReturnCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::Gamedata::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.JoinMapResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.JoinMapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.JoinMapResponse)
  return false;
#undef DO_
}

void JoinMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.JoinMapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.JoinMapResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.JoinMapResponse)
}

::google::protobuf::uint8* JoinMapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.JoinMapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.JoinMapResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.JoinMapResponse)
  return target;
}

size_t JoinMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.JoinMapResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.JoinMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinMapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinMapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.JoinMapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.JoinMapResponse)
    MergeFrom(*source);
  }
}

void JoinMapResponse::MergeFrom(const JoinMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.JoinMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void JoinMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.JoinMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinMapResponse::CopyFrom(const JoinMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.JoinMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMapResponse::IsInitialized() const {
  return true;
}

void JoinMapResponse::Swap(JoinMapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinMapResponse::InternalSwap(JoinMapResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinMapResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeavelRoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeavelRoomRequest::kRoomIdFieldNumber;
const int LeavelRoomRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeavelRoomRequest::LeavelRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsLeavelRoomRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.LeavelRoomRequest)
}
LeavelRoomRequest::LeavelRoomRequest(const LeavelRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Gamedata.LeavelRoomRequest)
}

void LeavelRoomRequest::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

LeavelRoomRequest::~LeavelRoomRequest() {
  // @@protoc_insertion_point(destructor:Gamedata.LeavelRoomRequest)
  SharedDtor();
}

void LeavelRoomRequest::SharedDtor() {
}

void LeavelRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeavelRoomRequest::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeavelRoomRequest& LeavelRoomRequest::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsLeavelRoomRequest();
  return *internal_default_instance();
}

LeavelRoomRequest* LeavelRoomRequest::New(::google::protobuf::Arena* arena) const {
  LeavelRoomRequest* n = new LeavelRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeavelRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.LeavelRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playerid_));
  _internal_metadata_.Clear();
}

bool LeavelRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.LeavelRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.LeavelRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.LeavelRoomRequest)
  return false;
#undef DO_
}

void LeavelRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.LeavelRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.LeavelRoomRequest)
}

::google::protobuf::uint8* LeavelRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.LeavelRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.LeavelRoomRequest)
  return target;
}

size_t LeavelRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.LeavelRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeavelRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.LeavelRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeavelRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeavelRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.LeavelRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.LeavelRoomRequest)
    MergeFrom(*source);
  }
}

void LeavelRoomRequest::MergeFrom(const LeavelRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.LeavelRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void LeavelRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.LeavelRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeavelRoomRequest::CopyFrom(const LeavelRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.LeavelRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeavelRoomRequest::IsInitialized() const {
  return true;
}

void LeavelRoomRequest::Swap(LeavelRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeavelRoomRequest::InternalSwap(LeavelRoomRequest* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeavelRoomRequest::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeavelRoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeavelRoomResponse::kCodeFieldNumber;
const int LeavelRoomResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeavelRoomResponse::LeavelRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hall_2eproto::InitDefaultsLeavelRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gamedata.LeavelRoomResponse)
}
LeavelRoomResponse::LeavelRoomResponse(const LeavelRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Gamedata.LeavelRoomResponse)
}

void LeavelRoomResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

LeavelRoomResponse::~LeavelRoomResponse() {
  // @@protoc_insertion_point(destructor:Gamedata.LeavelRoomResponse)
  SharedDtor();
}

void LeavelRoomResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeavelRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeavelRoomResponse::descriptor() {
  ::protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeavelRoomResponse& LeavelRoomResponse::default_instance() {
  ::protobuf_hall_2eproto::InitDefaultsLeavelRoomResponse();
  return *internal_default_instance();
}

LeavelRoomResponse* LeavelRoomResponse::New(::google::protobuf::Arena* arena) const {
  LeavelRoomResponse* n = new LeavelRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeavelRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Gamedata.LeavelRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool LeavelRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gamedata.LeavelRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gamedata.ReturnCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::Gamedata::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gamedata.LeavelRoomResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gamedata.LeavelRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gamedata.LeavelRoomResponse)
  return false;
#undef DO_
}

void LeavelRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gamedata.LeavelRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.LeavelRoomResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gamedata.LeavelRoomResponse)
}

::google::protobuf::uint8* LeavelRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gamedata.LeavelRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Gamedata.LeavelRoomResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gamedata.LeavelRoomResponse)
  return target;
}

size_t LeavelRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gamedata.LeavelRoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .Gamedata.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeavelRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gamedata.LeavelRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeavelRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeavelRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gamedata.LeavelRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gamedata.LeavelRoomResponse)
    MergeFrom(*source);
  }
}

void LeavelRoomResponse::MergeFrom(const LeavelRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gamedata.LeavelRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void LeavelRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gamedata.LeavelRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeavelRoomResponse::CopyFrom(const LeavelRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gamedata.LeavelRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeavelRoomResponse::IsInitialized() const {
  return true;
}

void LeavelRoomResponse::Swap(LeavelRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeavelRoomResponse::InternalSwap(LeavelRoomResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeavelRoomResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hall_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Gamedata

// @@protoc_insertion_point(global_scope)
